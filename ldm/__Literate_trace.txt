Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
parts needed:  {'LDM', 'Attribute', 'Constraint', 'SubjectC', 'Class', 'SubjectE', 'Derivation', 'SubjectD', 'Default', 'Annotation', 'SubjectB', 'AttributeSection'}

Phase: Warming up
Model dir:  ldm
Model doc:  Literate.md
Model name:  Literate
Model doc path:  ldm/Literate.md
Model module:  Literate01.py
Model module path:  ldm/Literate01.py
Results dir:  ldm/Literate_results

Phase: Parsing model: {model_doc_path}
PARSING ldm/Literate.md

Phase: Deriving dict for model
PREFIX IS: #
PREFIX IS: #
PREFIX IS: ##
PREFIX IS: ##
PREFIX IS: _
PREFIX IS: _
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: __
PREFIX IS: __
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  based_on for based_on
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  based_on for based_on
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: __
PREFIX IS: __
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: ##
PREFIX IS: ##
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  abbreviation for abbreviation
Snake for {self.words} = {snake}
Using ATT_NAME  plural for plural
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Classes
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Classes
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: __
PREFIX IS: __
PREFIX IS: -
Created list dt:  List of reference AnnotationTypes
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Coding Languages
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Template Languages
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference String
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  plural for plural
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Using ATT_NAME  dependent_of for dependent_of
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Classes
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Subjects
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  inverse for inverse
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  plural for plural
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Using ATT_NAME  where for where
Snake for {self.words} = {snake}
PREFIX IS: ###
PREFIX IS: ###
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  plural for plural
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
Created set dt:  Set of reference Classes
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Subtypings
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Classes
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Attributes
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference AttributeSections
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Constraints
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Methods
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: __
PREFIX IS: __
PREFIX IS: -
Created set dt:  Set of reference Classes
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  inverse for inverse
Snake for {self.words} = {snake}
PREFIX IS: -
Created set dt:  Set of reference UniqueKeys
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  inverse for inverse
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  dependent_of for dependent_of
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Classes
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Using ATT_NAME  dependent_of for dependent_of
PREFIX IS: -
Created list dt:  List of reference Attributes
PREFIX IS: -
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: ##
PREFIX IS: ##
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Using ATT_NAME  based_on for based_on
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  plural for plural
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Using ATT_NAME  based_on for based_on
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  overrides for overrides
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: __
PREFIX IS: __
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
Inventing name for:  1:1 Author
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Inventing name for:  N:M Set of Books
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: __
PREFIX IS: __
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference Constraints
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: __
PREFIX IS: __
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  plural for plural
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  plural for plural
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Inventing name for:  e.g., OCL _(CodeExpression
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Using ATT_NAME  based_on for based_on
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Using ATT_NAME  based_on for based_on
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: ##
PREFIX IS: ##
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  plural for plural
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
PREFIX IS: -
Created list dt:  List of reference Parameters
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  plural for plural
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Inventing name for:  e.g., optional, required
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: ##
PREFIX IS: ##
PREFIX IS: _
PREFIX IS: _
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
Created list dt:  List of reference DataTypes
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: ##
PREFIX IS: ##
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
PREFIX IS: -
PREFIX IS: -
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Using ATT_NAME  where for where
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Using ATT_NAME  where for where
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
PREFIX IS: -
PREFIX IS: -
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
Snake for {self.words} = {snake}
Using ATT_NAME  one_liner for one_liner
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: _
PREFIX IS: _
Snake for {self.words} = {snake}
Using ATT_NAME  subtype_of for subtype_of
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: ##
PREFIX IS: ##
PREFIX IS: ###
PREFIX IS: ###
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: ##
PREFIX IS: ##
Snake for {self.words} = {snake}
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
PREFIX IS: -
PREFIX IS: -
Snake for {self.words} = {snake}
.. dict saved  in ldm/Literate_results/Literate.dict.yaml and ldm/Literate_results/Literate.dict.json
Building class map for module: ldm.Literate_01
[ldm_object_creator.py:40 -                    _build_class_map()] Building class map for module: ldm.Literate_01
Class map is
{   'Annotation': <class 'ldm.Literate_01.Annotation'>,
    'AsValue': <class 'class_pom_token.AsValue'>,
    'Attribute': <class 'ldm.Literate_01.Attribute'>,
    'AttributeName': <class 'ldm.Literate_01.AttributeName'>,
    'AttributeReference': <class 'ldm.Literate_01.AttributeReference'>,
    'AttributeSection': <class 'ldm.Literate_01.AttributeSection'>,
    'AttributeSectionName': <class 'ldm.Literate_01.AttributeSectionName'>,
    'BaseDataType': <class 'ldm.Literate_01.BaseDataType'>,
    'CamelCase': <class 'class_casing.CamelCase'>,
    'Casing': <class 'class_casing.CamelCase'>,
    'Class': <class 'ldm.Literate_01.Class'>,
    'ClassName': <class 'ldm.Literate_01.ClassName'>,
    'Class_': <class 'ldm.Literate_01.Class'>,
    'CodeBlock': <class 'ldm.Literate_01.CodeBlock'>,
    'Component': <class 'ldm.Literate_01.Component'>,
    'Constraint': <class 'ldm.Literate_01.Constraint'>,
    'DataType': <class 'ldm.Literate_01.SetDataType'>,
    'DataTypeClause': <class 'ldm.Literate_01.DataTypeClause'>,
    'Default': <class 'ldm.Literate_01.Default'>,
    'Derivation': <class 'ldm.Literate_01.Derivation'>,
    'Diagnostic': <class 'ldm.Literate_01.Diagnostic'>,
    'Emoji': <class 'class_pom_token.Emoji'>,
    'Formula': <class 'ldm.Literate_01.Formula'>,
    'FormulaCoding': <class 'ldm.Literate_01.FormulaCoding'>,
    'IsExclusive': <class 'class_pom_token.IsExclusive'>,
    'IsExhaustive': <class 'class_pom_token.IsExhaustive'>,
    'IsOptional': <class 'class_pom_token.IsOptional'>,
    'LDM': <class 'ldm.Literate_01.LDM'>,
    'Label': <class 'ldm.Literate_01.Label'>,
    'ListDataType': <class 'ldm.Literate_01.ListDataType'>,
    'LowerCamel': <class 'class_casing.LowerCamel'>,
    'MappingDataType': <class 'ldm.Literate_01.MappingDataType'>,
    'MinorComponent': <class 'ldm.Literate_01.MinorComponent'>,
    'Natural': <class 'ldm.Literate_01.OneLiner'>,
    'OneLiner': <class 'ldm.Literate_01.OneLiner'>,
    'Paragraph': <class 'ldm.Literate_01.Paragraph'>,
    'PresentableBoolean': <class 'class_pom_token.PresentableBoolean'>,
    'ReferenceType': <class 'ldm.Literate_01.ReferenceType'>,
    'SetDataType': <class 'ldm.Literate_01.SetDataType'>,
    'Subject': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectB': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectC': <class 'ldm.Literate_01.SubjectC'>,
    'SubjectD': <class 'ldm.Literate_01.SubjectD'>,
    'SubjectE': <class 'ldm.Literate_01.SubjectE'>,
    'SubjectName': <class 'ldm.Literate_01.SubjectName'>,
    'Subtyping': <class 'ldm.Literate_01.Subtyping'>,
    'SubtypingName': <class 'ldm.Literate_01.SubtypingName'>,
    'UpperCamel': <class 'class_casing.UpperCamel'>,
    'ValueType': <class 'ldm.Literate_01.ValueType'>}

Phase: Creating model from dictionary: ldm/Literate_results/Literate.dict.yaml
[ldm_object_creator.py:140 -                     _prepare_kwargs()] Field Subtype of Component not found in class Class
Created model: <class 'ldm.Literate_01.LDM'>

Phase: Validating model
Validating references...
Validation errors: 119

Phase: counting errors
{"Validation Error in Attribute: Required field 'data_type_clause' is missing": 16, "Validation Error in Class: For field 'based_on' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>": 6, "Validation Error in Constraint: For field 'one_liner' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'list'>": 5, "Validation Error in Class: For field 'abbreviation' - expected typing.Optional[class_casing.CamelCase], but got <class 'str'>": 1, "Validation Error in Class: For field 'subtype_of' - expected typing.Optional[typing.Dict[ldm.Literate_01.ClassName, ldm.Literate_01.SubtypingName]], but got <class 'list'>": 17, "Validation Error in Class: For field 'dependent_of' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>": 1, "Validation Error in Class: For field 'where' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'str'>": 3, "Validation Error in Attribute: Required field 'name' is missing": 7, "Validation Error in SubjectC: For field 'elaboration' - expected typing.Optional[typing.List[ldm.Literate_01.Paragraph]], but got <class 'list'>": 1}
16 	 Validation Error in Attribute: Required field 'data_type_clause' is missing
6 	 Validation Error in Class: For field 'based_on' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>
5 	 Validation Error in Constraint: For field 'one_liner' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'list'>
1 	 Validation Error in Class: For field 'abbreviation' - expected typing.Optional[class_casing.CamelCase], but got <class 'str'>
17 	 Validation Error in Class: For field 'subtype_of' - expected typing.Optional[typing.Dict[ldm.Literate_01.ClassName, ldm.Literate_01.SubtypingName]], but got <class 'list'>
1 	 Validation Error in Class: For field 'dependent_of' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>
3 	 Validation Error in Class: For field 'where' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'str'>
7 	 Validation Error in Attribute: Required field 'name' is missing
1 	 Validation Error in SubjectC: For field 'elaboration' - expected typing.Optional[typing.List[ldm.Literate_01.Paragraph]], but got <class 'list'>

Phase: Serialing model ...
Model serialized to ldm/Literate_results/Literate.model.json
Model serialized to ldm/Literate_results/Literate.model.yaml
..Created model files: ldm/Literate_results/Literate.model.json and ldm/Literate_results/Literate.model.yaml

Phase: Rendering back to markdown
Render header: [# ]  () 
8  subjects coming in model
Render header: [## ]  () 
Render header: [_ ]  (None) 
Render header: [    - ]  (optional reference String) 
Render header: [    - ]  (optional reference CamelName) 
Render header: [    - ]  (optional reference QualifiedCamel) 
Render header: [    - ]  (optional reference CamelName) 
Render header: [    - ]  (optional reference RichLine) 
Render header: [    - ]  (optional reference RichText) 
Render header: [__ ]  () 
Render header: [    - ]  (optional reference Boolean) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference Emoji) 
Render header: [    - ]  (optional reference String) 
Render header: [    - ]  (optional reference Unicode) 
Render header: [    - ]  (optional reference CamelName) 
Render header: [    - ]  (optional reference UpperCamel) 
Render header: [    - ]  (None) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference Annotation Type) 
Render header: [    - ]  (optional reference CamelName) 
Render header: [    - ]  (optional reference Emoji) 
Render header: [    - ]  (optional reference RichText) 
Render header: [__ ]  () 
Render header: [    - ]  (optional reference Boolean) 
0  subjects coming in subject
Render header: [## ]  () 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference UpperCamel) 
Render header: [    - ]  (optional List of reference Classes) 
Render header: [    - ]  (optional List of reference Classes) 
Render header: [__ ]  () 
Render header: [    - ]  (optional List of reference AnnotationTypes) 
Render header: [    - ]  (optional reference Coding Language) 
Render header: [    - ]  (optional List of reference Coding Languages) 
Render header: [    - ]  (optional reference Template Language) 
Render header: [    - ]  (optional List of reference Template Languages) 
Render header: [    - ]  (optional List of reference String) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference UpperCamel) 
Render header: [    - ]  (optional reference Subject) 
Render header: [    - ]  (optional List of reference Classes) 
Render header: [    - ]  (None) 
Render header: [    - ]  (None) 
Render header: [    - ]  (optional List of reference Subjects) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
1  subjects coming in subject
Render header: [### ]  () 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference UpperName) 
Render header: [    - ]  (optional Set of reference Classes) 
Render header: [    - ]  (optional reference es) 
Render header: [    - ]  (optional List of reference Subtypings) 
Render header: [    - ]  (optional List of reference Classes) 
Render header: [    - ]  (optional List of reference Attributes) 
Render header: [    - ]  (optional List of reference AttributeSections) 
Render header: [    - ]  (optional List of reference Constraints) 
Render header: [    - ]  (optional List of reference Methods) 
Render header: [__ ]  () 
Render header: [    - ]  (optional Set of reference Classes) 
Render header: [    - ]  (optional Set of reference UniqueKeys) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference Upper Name) 
Render header: [    - ]  (optional reference Boolean) 
Render header: [    - ]  (optional reference Boolean) 
Render header: [    - ]  (optional List of reference Classes) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (None) 
Render header: [    - ]  (None) 
Render header: [    - ]  (optional reference Boolean) 
Render header: [_ ]  (None) 
Render header: [    - ]  (optional reference NameString) 
Render header: [    - ]  (optional reference RichText) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional List of reference Attributes) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
0  subjects coming in subject
Render header: [## ]  () 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference Boolean) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference Lower Camel) 
Render header: [    - ]  (optional reference DataType) 
Render header: [    - ]  (None) 
Render header: [    - ]  (None) 
Render header: [    - ]  (None) 
Render header: [__ ]  () 
Render header: [    - ]  (optional reference Boolean) 
Render header: [    - ]  (optional reference CardinalityCode) 
Render header: [    - ]  (optional value Invented Name) 
Render header: [    - ]  (optional value Invented Name) 
Render header: [__ ]  () 
Render header: [    - ]  (optional reference Boolean) 
Render header: [    - ]  (optional reference Class) 
Render header: [    - ]  (optional reference Attribute) 
Render header: [    - ]  (optional reference Attribute) 
Render header: [_ ]  (None) 
Render header: [    - ]  (optional reference Derivation) 
Render header: [    - ]  (optional reference Derivation) 
Render header: [    - ]  (optional List of reference Constraints) 
Render header: [__ ]  () 
Render header: [    - ]  (None) 
Render header: [_ ]  (None) 
Render header: [    - ]  (optional reference RichText) 
Render header: [    - ]  (optional reference CodeExpression) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference RichText) 
Render header: [    - ]  (optional value Invented Name) 
Render header: [    - ]  (optional reference Code) 
Render header: [    - ]  (None) 
Render header: [    - ]  (None) 
Render header: [    - ]  (optional reference Template) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [_ ]  (None) 
Render header: [    - ]  (optional reference Code) 
Render header: [    - ]  (None) 
Render header: [    - ]  (None) 
Render header: [    - ]  (optional reference String) 
0  subjects coming in subject
Render header: [## ]  () 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional List of reference Parameters) 
Render header: [    - ]  (optional reference DataType) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference DataType) 
Render header: [    - ]  (optional value Invented Name) 
0  subjects coming in subject
Render header: [## ]  () 
Render header: [_ ]  (None) 
Render header: [    - ]  (optional reference Class) 
Render header: [_ ]  (None) 
Render header: [    - ]  (optional reference Aggregating Operator) 
Render header: [    - ]  (optional List of reference DataTypes) 
Render header: [_ ]  (None) 
Render header: [    - ]  (optional reference Code) 
Render header: [    - ]  (None) 
Render header: [    - ]  (None) 
Render header: [    - ]  (None) 
Render header: [    - ]  (optional reference Integer) 
Render header: [    - ]  (optional reference Template) 
0  subjects coming in subject
Render header: [## ]  () 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference String) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference string) 
Render header: [    - ]  (optional reference Code) 
Render header: [    - ]  (None) 
Render header: [    - ]  (None) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
Render header: [    - ]  (optional reference string) 
Render header: [_ ]  (None) 
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'Literate_01.ClassName'>
0  subjects coming in subject
Render header: [## ]  () 
1  subjects coming in subject
Render header: [### ]  () 
0  subjects coming in subject
Render header: [## ]  () 
0  subjects coming in subject

Phase: Creating HTML from model dict
All keys are: 
	 data_type_clause
	 default
	 subjects
	 dependent_of
	 attribute_name
	 label
	 subtype_of
	 one_liner
	 based_on
	 parenthetical
	 abbreviation
	 constraints
	 attributes
	 data_type
	 content
	 where
	 Subtype of Component
	 value
	 overrides
	 annotations
	 inverse
	 name
	 class_name
	 classes
	 plural
	 elaboration
	 is_optional_lit
	 as_value_type
	 _type
	 prefix
	 derivation
	 element_type
	 emoji
	 attribute_sections
Saved styled dictionary to ldm/Literate_results/Literate.html

Phase: Skipping PDF creation

Phase: Creating PDF from html and css
PDF for ldm/Literate_results/Literate.html written to ldm/Literate_results/Literate.pdf
