_type: LiterateModel
is_embellishment: false
prefix: '#'
name:
    _type: SubjectName
    content: This is my first Mermaid test
subjects:
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '```mermaid



            classDiagram

            class Component

            class Literate

            class Subject

            class Class

            class Attrribute Section

            class Attribute


            Component  <|-- Literate

            Subject  <|-- Literate

            Class  <|-- Literate

            AttributeSection  <|-- Literate

            Attribute  <|-- Literate


            classDef default fill:yellow,stroke:#000, color:black, stroke-width:4px

            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Mermaid Class Diagram
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '``` mermaid

            %%{init: {

            "flowchart": {

            "curve": "stepAfter",

            "useMaxWidth": true

            }

            }}%%


            flowchart TB

            subgraph Component["Component - Base class"]

            direction TB


            Literate["Literate<br>Core implementation"]


            subgraph Subtypes["Component Subtypes"]

            direction LR

            Subject["Subject<br>Domain entity"]

            Class["Class<br>Schema definition"]

            AttributeSection["AttributeSection<br>Property group"]

            Attribute["Attribute<br>Individual property"]

            end


            Subject ==> Literate

            Class ==> Literate

            AttributeSection ==> Literate

            Attribute ==> Literate

            end


            %% Styling with border-radius only

            classDef container fill:#e3f2fd,stroke:#1565c0,stroke-width:3px,color:#0d47a1,border-radius:10px

            classDef subcontainer fill:#f5f5f5,stroke:#78909c,stroke-width:2px,color:#37474f,border-radius:8px

            classDef default fill:white,stroke:#90a4ae,stroke-width:1px,color:#455a64,border-radius:5px


            class Component container

            class Subtypes subcontainer


            %% Edge styling

            linkStyle default stroke:#546e7a,stroke-width:2px, border-radius: 20px

            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Mermaid Flowchart
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '``` puml

            @startjson

            <style>

            .h1 {

            BackGroundColor green

            FontColor white

            FontStyle italic

            }

            .h2 {

            BackGroundColor red

            FontColor white

            FontStyle bold

            }

            </style>

            #highlight "lastName"

            #highlight "address" / "city" <<h1>>

            #highlight "phoneNumbers" / "0" / "number" <<h2>>

            {

            "firstName": "John",

            "lastName": "Smith",

            "isAlive": true,

            "age": 28,

            "address": {

            "streetAddress": "21 2nd Street",

            "city": "New York",

            "state": "NY",

            "postalCode": "10021-3100"

            },

            "phoneNumbers": [

            {

            "type": "home",

            "number": "212 555-1234"

            },

            {

            "type": "office",

            "number": "646 555-4567"

            }

            ],

            "children": [],

            "spouse": null

            }

            @endjson

            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Plant UML jsondata
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '``` puml


            @startuml


            rectangle Component

            rectangle Literate

            rectangle Subject

            rectangle Class

            rectangle Attribute

            rectangle a


            Literate -u->  a

            Subject -u-> a

            Class -u-> a

            Attribute -u-> a

            a -u-> Component

            skinparam linetype ortho

            @enduml

            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Plant UML UML
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '```mermaid

            block-beta

            columns 3

            a:3

            block:group1:2

            columns 2

            h i j k

            end

            g

            block:group2:3

            %% columns auto (default)

            l m n o p q r

            end

            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Mermaid block diagram
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '``` mermaid


            erDiagram


            CAR {


            string registrationNumber


            string make


            string model


            }


            PERSON {


            string firstName


            string lastName


            int age


            }


            style CAR fill: red,stroke:navy,stroke-width:3px


            style PERSON color: white, fill: navy,stroke:yellow ,stroke-width:2px


            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Mermaid ER Diagram
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '``` mermaid

            erDiagram


            class Subject Component


            class Section Component


            class Attribute Component


            class Classe Component


            Subject ||--|{ Subject : contains


            Subject ||--|{ Classe : contains




            Classe ||--|{ Section : contains


            Classe ||--|{ Attribute : contains


            Section ||--|{ Attribute : contains


            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Mermaid ER Diagram
-   _type: SubjectB
    elaboration:
    -   _type: Paragraph
        content: "<figure>\n \n+ <img src=\"../ldm_assets/FMKNYIDFrontIMG_1141.jpg\"\
            \ alt=\"Trulli\" style=\"width:30%\">\n \n+ <figcaption>Fig.1 - Trulli,\
            \ Puglia, Italy.</figcaption>\n \n+ </figure>\n"
    -   _type: Paragraph
        content: 'And the same figure with figure/caption markup

            '
    -   _type: Paragraph
        content: "<figure title=\"A Drivers License\">\n \n+ <img src=\"../FMKNYIDFrontIMG_1141.jpg\"\
            \ style=\"width:20%\">\n \n+ <figcaption>My Non-Drivers License</figcaption>\n\
            \ \n+ </figure>\n"
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Captioned figure
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '```csv

            eFormat, Description

            E-Book, ''Kindle or Apple books - etc''

            PDF, formatted for printing and direct delivery


            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: List of Codes
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '``` puml


            @startuml


            nwdiag {


            network {


            Component;


            Literate;


            Subject;


            Attribute;


            AttributeSection;


            Class;


            Component -- Literate;


            Component -- Subject;


            Component -- Class;


            Component -- AttributeSection;


            Component -- Attribute;




            Subject [description = "Domain entity"];


            Literate [description = "Core implementation"];


            AttributeSection [description = "Property group"];


            Attribute [description = "Individual property"];


            Class [description = "Schema definition"];





            }


            }


            @enduml

            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Plant UML UML
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: "``` puml\n@startuml\n'hide empty description\n'!pragma layout elk\n\
            skinparam rectangleBorderThickness 1\nskinparam defaultTextAlignment center\n\
            skinparam lifelineStrategy solid\nskinparam monochrome false\nskinparam\
            \ style strictuml\nhide empty members\nskinparam Linetype ortho\n\nrectangle\
            \ \"\u0411\u0430\u0437\u043E\u0432\u044B\u0435 \u043C\u043E\u0434\u0443\
            \u043B\u0438\" as base {\n\nclass \"\u0411\u0430\u0437\u043E\u0432\u044B\
            \u0435 \u043E\u0431\u044A\u0435\u043A\u0442\u044B\" as baseobjects\nclass\
            \ \"\u0414\u0435\u043B\u043E\u043F\u0440\u043E\u0438\u0437\u0432\u043E\
            \u0434\u0441\u0442\u0432\u043E\\n4.5\" as takeoffice\nclass \"\u0423\u043F\
            \u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\\n\u043F\u0440\u043E\u0446\
            \u0435\u0441\u0441\u0430\u043C\u0438\" as workflow\nclass \"Windows-\u043A\
            \u043B\u0438\u0435\u043D\u0442\" as windowsclient\n\nclass \"\u0423\u043F\
            \u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\\n\u0434\u043E\u043A\u0443\
            \u043C\u0435\u043D\u0442\u0430\u043C\u0438\" as documentmanagement\nclass\
            \ \"\u041A\u043E\u043D\u0441\u0442\u0440\u0443\u043A\u0442\u043E\u0440\
            \\n\u0441\u043E\u0433\u043B\u0430\u0441\u043E\u0432\u0430\u043D\u0438\u0439\
            \" as approvaldesigner\n\nclass \"\u041F\u043B\u0430\u0442\u0444\u043E\
            \u0440\u043C\u0430\" as platform\nclass \"\u0421\u043B\u0443\u0436\u0431\
            \u0430\\n \u0444\u043E\u043D\u043E\u0432\u044B\u0445 \u043E\u043F\u0435\
            \u0440\u0430\u0446\u0438\u0439\" as worker\n\n}\n\nplatform <-- baseobjects\n\
            platform <-- workflow\nplatform <-- takeoffice\nplatform <-- windowsclient\n\
            platform <-- documentmanagement\nplatform <-- approvaldesigner\n\nwindowsclient\
            \ -up-> approvaldesigner\nwindowsclient -up-> documentmanagement\nwindowsclient\
            \ -up-> baseobjects\nwindowsclient -up-> takeoffice\nwindowsclient -up->\
            \ workflow\n\nworker <-- approvaldesigner\nworker <-- baseobjects\n@enduml\n\
            \n```"
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Russian UML
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '``` puml

            @startuml

            class Car


            Driver - Car : drives >

            Car *- Wheel : have 4 >

            Car -- Person : < owns

            @enduml

            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Car diagram
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '```puml

            @startuml

            '' Configure the modern style approach with CSS

            '' Try polyline instead of ortho

            skinparam linetype polyline


            <style>

            /* Global settings */

            diagram {

            backgroundColor: white;

            }


            /* Class styling */

            class {

            BackgroundColor: #FFFFEE;

            BorderColor: #333333;

            BorderThickness: 1;

            BorderRadius: 8;

            FontColor: #333333;

            FontSize: 12;

            }


            /* Arrow styling */

            arrow {

            Color: #333333;

            Thickness: 1.5;

            }


            /* Package styling */

            package {

            BackgroundColor: #E6F2FF;

            BorderColor: #336699;

            BorderThickness: 3;

            FontColor: #333333;

            }


            /* Custom style for Component */

            .container {

            BackgroundColor: #E6F2FF;

            BorderColor: #336699;

            BorderThickness: 3;

            BorderRadius: 10;

            }

            </style>


            package "Component" <<container>> {

            class Literate {

            Core implementation

            }


            class Subject {

            Domain entity

            }

            class Class {

            Schema definition

            }

            class AttributeSection {

            Property group

            }

            class Attribute {

            Individual property

            }


            '' Relationships

            Subject -> Literate

            Class -> Literate

            AttributeSection -> Literate

            Attribute -> Literate

            }


            @enduml

            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Fancy Plant UML
-   _type: SubjectB
    one_liner:
        _type: OneLiner
        content: PlanUML
    elaboration:
    -   _type: CodeBlock
        content: '```puml


            @startmindmap

            * Component

            ** Literate

            *** Subject

            *** Class

            *** AttributeSection

            *** Attribute

            @endmindmap

            @startuml

            !include <C4/C4_Component>


            Person(user, "User")

            Container_Boundary(component, "Component") {

            Component(literate, "Literate", "Core implementation")

            Component(subject, "Subject", "Domain entity")

            Component(class, "Class", "Schema definition")

            Component(attributeSection, "AttributeSection", "Property group")

            Component(attribute, "Attribute", "Individual property")

            }


            Rel(subject, literate, "extends")

            Rel(class, literate, "extends")

            Rel(attributeSection, literate, "extends")

            Rel(attribute, literate, "extends")

            @enduml


            @startjson

            {

            "Component": {

            "Literate": {"description": "Core implementation"},

            "Subject": {"description": "Domain entity", "extends": "Literate"},

            "Class": {"description": "Schema definition", "extends": "Literate"},

            "AttributeSection": {"description": "Property group", "extends": "Literate"},

            "Attribute": {"description": "Individual property", "extends": "Literate"}

            }

            }

            @endjson

            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: Mind Map
-   _type: SubjectB
    elaboration:
    -   _type: CodeBlock
        content: '``` puml

            @startjson

            {

            "Component": {

            "Literate": ["description", "Core implementation"],

            "Subject": {"description": "Domain entity", "extends": "Literate"},

            "Class": {"description": "Schema definition", "extends": "Literate"},

            "AttributeSection": {"description": "Property group", "extends": "Literate"},

            "Attribute": {"description": "Individual property", "extends": "Literate"}

            }

            }

            @endjson

            ```'
    is_embellishment: false
    prefix: '##'
    name:
        _type: SubjectName
        content: JSON for Components
hello: Hello
