
Phase: Creating schema and survey of Literate_01
Generate schema...
as yaml - warnings =  False
Annotation  Qualified:  <class 'ldm.Literate_01.Annotation'>
Annotation  MRO:  ['Annotation', 'PydanticMixin', 'object']
Any  Qualified:  typing.Any
Any  MRO:  ['Any', 'object']
AsValue  Qualified:  <class 'utils.class_pom_token.AsValue'>
AsValue  MRO:  ['AsValue', 'PresentableBoolean', 'PresentableToken', 'PydanticMixin', 'object']
Attribute  Qualified:  <class 'ldm.Literate_01.Attribute'>
Attribute  MRO:  ['Attribute', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
AttributeName  Qualified:  <class 'ldm.Literate_01.AttributeName'>
AttributeName  MRO:  ['AttributeName', 'LowerCamel', 'CamelCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
AttributeReference  Qualified:  <class 'ldm.Literate_01.AttributeReference'>
AttributeReference  MRO:  ['AttributeReference', 'PydanticMixin', 'object']
AttributeSection  Qualified:  <class 'ldm.Literate_01.AttributeSection'>
AttributeSection  MRO:  ['AttributeSection', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
AttributeSectionName  Qualified:  <class 'ldm.Literate_01.AttributeSectionName'>
AttributeSectionName  MRO:  ['AttributeSectionName', 'NormalCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
BaseDataType  Qualified:  <class 'ldm.Literate_01.BaseDataType'>
BaseDataType  MRO:  ['BaseDataType', 'DataType', 'PydanticMixin', 'object']
CamelCase  Qualified:  <class 'utils.class_casing.CamelCase'>
CamelCase  MRO:  ['CamelCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
Casing  Qualified:  <class 'utils.class_casing.Casing'>
Casing  MRO:  ['Casing', 'PresentableToken', 'PydanticMixin', 'object']
Class  Qualified:  <class 'ldm.Literate_01.Class'>
Class  MRO:  ['Class', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
ClassName  Qualified:  <class 'ldm.Literate_01.ClassName'>
ClassName  MRO:  ['ClassName', 'UpperCamel', 'CamelCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
Class  Qualified:  <class 'ldm.Literate_01.Class'>
Class  MRO:  ['Class', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
CodeBlock  Qualified:  <class 'ldm.Literate_01.CodeBlock'>
CodeBlock  MRO:  ['CodeBlock', 'PydanticMixin', 'object']
CodeType  Qualified:  <class 'ldm.Literate_01.CodeType'>
CodeType  MRO:  ['CodeType', 'ValueType', 'Class', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
Component  Qualified:  <class 'ldm.Literate_01.Component'>
Component  MRO:  ['Component', 'MinorComponent', 'PydanticMixin', 'object']
Constraint  Qualified:  <class 'ldm.Literate_01.Constraint'>
Constraint  MRO:  ['Constraint', 'Formula', 'MinorComponent', 'PydanticMixin', 'object']
DataType  Qualified:  <class 'ldm.Literate_01.DataType'>
DataType  MRO:  ['DataType', 'PydanticMixin', 'object']
DataTypeClause  Qualified:  <class 'ldm.Literate_01.DataTypeClause'>
DataTypeClause  MRO:  ['DataTypeClause', 'PydanticMixin', 'object']
Default  Qualified:  <class 'ldm.Literate_01.Default'>
Default  MRO:  ['Default', 'Formula', 'MinorComponent', 'PydanticMixin', 'object']
Derivation  Qualified:  <class 'ldm.Literate_01.Derivation'>
Derivation  MRO:  ['Derivation', 'Formula', 'MinorComponent', 'PydanticMixin', 'object']
Diagnostic  Qualified:  <class 'ldm.Literate_01.Diagnostic'>
Diagnostic  MRO:  ['Diagnostic', 'PydanticMixin', 'object']
DotCase  Qualified:  <class 'utils.class_casing.DotCase'>
DotCase  MRO:  ['DotCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
Emoji  Qualified:  <class 'utils.class_pom_token.Emoji'>
Emoji  MRO:  ['Emoji', 'PresentableToken', 'PydanticMixin', 'object']
Formula  Qualified:  <class 'ldm.Literate_01.Formula'>
Formula  MRO:  ['Formula', 'MinorComponent', 'PydanticMixin', 'object']
FormulaCoding  Qualified:  <class 'ldm.Literate_01.FormulaCoding'>
FormulaCoding  MRO:  ['FormulaCoding', 'PydanticMixin', 'object']
InitVar  Qualified:  <class 'dataclasses.InitVar'>
InitVar  MRO:  ['InitVar', 'object']
IsExclusive  Qualified:  <class 'utils.class_pom_token.IsExclusive'>
IsExclusive  MRO:  ['IsExclusive', 'PresentableBoolean', 'PresentableToken', 'PydanticMixin', 'object']
IsExhaustive  Qualified:  <class 'utils.class_pom_token.IsExhaustive'>
IsExhaustive  MRO:  ['IsExhaustive', 'PresentableBoolean', 'PresentableToken', 'PydanticMixin', 'object']
IsOptional  Qualified:  <class 'utils.class_pom_token.IsOptional'>
IsOptional  MRO:  ['IsOptional', 'PresentableBoolean', 'PresentableToken', 'PydanticMixin', 'object']
Kebab  Qualified:  <class 'utils.class_casing.Kebab'>
Kebab  MRO:  ['Kebab', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
Label  Qualified:  <class 'ldm.Literate_01.Label'>
Label  MRO:  ['Label', 'LowerCamel', 'CamelCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
ListDataType  Qualified:  <class 'ldm.Literate_01.ListDataType'>
ListDataType  MRO:  ['ListDataType', 'DataType', 'PydanticMixin', 'object']
LiterateModel  Qualified:  <class 'ldm.Literate_01.LiterateModel'>
LiterateModel  MRO:  ['LiterateModel', 'SubjectB', 'SubjectC', 'SubjectD', 'SubjectE', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
LowerCamel  Qualified:  <class 'utils.class_casing.LowerCamel'>
LowerCamel  MRO:  ['LowerCamel', 'CamelCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
MappingDataType  Qualified:  <class 'ldm.Literate_01.MappingDataType'>
MappingDataType  MRO:  ['MappingDataType', 'DataType', 'PydanticMixin', 'object']
MinorComponent  Qualified:  <class 'ldm.Literate_01.MinorComponent'>
MinorComponent  MRO:  ['MinorComponent', 'PydanticMixin', 'object']
ModelName  Qualified:  <class 'ldm.Literate_01.ModelName'>
ModelName  MRO:  ['ModelName', 'NormalCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
SnakeCase  Qualified:  <class 'utils.class_casing.SnakeCase'>
SnakeCase  MRO:  ['SnakeCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
Natural  Qualified:  <class 'ldm.Literate_01.Natural'>
Natural  MRO:  ['Natural', 'PydanticMixin', 'object']
NormalCase  Qualified:  <class 'utils.class_casing.NormalCase'>
NormalCase  MRO:  ['NormalCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
OneLiner  Qualified:  <class 'ldm.Literate_01.OneLiner'>
OneLiner  MRO:  ['OneLiner', 'Natural', 'PydanticMixin', 'object']
Paragraph  Qualified:  <class 'ldm.Literate_01.Paragraph'>
Paragraph  MRO:  ['Paragraph', 'Natural', 'PydanticMixin', 'object']
PascalCase  Qualified:  <class 'utils.class_casing.PascalCase'>
PascalCase  MRO:  ['PascalCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
PomTemplate  Qualified:  <class 'utils.class_templates.PomTemplate'>
PomTemplate  MRO:  ['PomTemplate', 'object']
PresentableBoolean  Qualified:  <class 'utils.class_pom_token.PresentableBoolean'>
PresentableBoolean  MRO:  ['PresentableBoolean', 'PresentableToken', 'PydanticMixin', 'object']
PresentableToken  Qualified:  <class 'utils.class_pom_token.PresentableToken'>
PresentableToken  MRO:  ['PresentableToken', 'PydanticMixin', 'object']
PydanticMixin  Qualified:  <class 'utils.util_pydantic.PydanticMixin'>
PydanticMixin  MRO:  ['PydanticMixin', 'object']
ReferenceType  Qualified:  <class 'ldm.Literate_01.ReferenceType'>
ReferenceType  MRO:  ['ReferenceType', 'Class', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
SetDataType  Qualified:  <class 'ldm.Literate_01.SetDataType'>
SetDataType  MRO:  ['SetDataType', 'DataType', 'PydanticMixin', 'object']
SnakeCase  Qualified:  <class 'utils.class_casing.SnakeCase'>
SnakeCase  MRO:  ['SnakeCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
SubjectB  Qualified:  <class 'ldm.Literate_01.SubjectB'>
SubjectB  MRO:  ['SubjectB', 'SubjectC', 'SubjectD', 'SubjectE', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
SubjectB  Qualified:  <class 'ldm.Literate_01.SubjectB'>
SubjectB  MRO:  ['SubjectB', 'SubjectC', 'SubjectD', 'SubjectE', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
SubjectC  Qualified:  <class 'ldm.Literate_01.SubjectC'>
SubjectC  MRO:  ['SubjectC', 'SubjectD', 'SubjectE', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
SubjectD  Qualified:  <class 'ldm.Literate_01.SubjectD'>
SubjectD  MRO:  ['SubjectD', 'SubjectE', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
SubjectE  Qualified:  <class 'ldm.Literate_01.SubjectE'>
SubjectE  MRO:  ['SubjectE', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
SubjectName  Qualified:  <class 'ldm.Literate_01.SubjectName'>
SubjectName  MRO:  ['SubjectName', 'NormalCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
SubtypeBy  Qualified:  <class 'ldm.Literate_01.SubtypeBy'>
SubtypeBy  MRO:  ['SubtypeBy', 'PydanticMixin', 'object']
Subtyping  Qualified:  <class 'ldm.Literate_01.Subtyping'>
Subtyping  MRO:  ['Subtyping', 'PydanticMixin', 'object']
SubtypingName  Qualified:  <class 'ldm.Literate_01.SubtypingName'>
SubtypingName  MRO:  ['SubtypingName', 'LowerCamel', 'CamelCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
UpperSnake  Qualified:  <class 'utils.class_casing.UpperSnake'>
UpperSnake  MRO:  ['UpperSnake', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
TrainCase  Qualified:  <class 'utils.class_casing.TrainCase'>
TrainCase  MRO:  ['TrainCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
UpperSnake  Qualified:  <class 'utils.class_casing.UpperSnake'>
UpperSnake  MRO:  ['UpperSnake', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
UpperCamel  Qualified:  <class 'utils.class_casing.UpperCamel'>
UpperCamel  MRO:  ['UpperCamel', 'CamelCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
UpperCamel  Qualified:  <class 'utils.class_casing.UpperCamel'>
UpperCamel  MRO:  ['UpperCamel', 'CamelCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
UpperSnake  Qualified:  <class 'utils.class_casing.UpperSnake'>
UpperSnake  MRO:  ['UpperSnake', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
ValueType  Qualified:  <class 'ldm.Literate_01.ValueType'>
ValueType  MRO:  ['ValueType', 'Class', 'Component', 'MinorComponent', 'PydanticMixin', 'object']
DotCase  Qualified:  <class 'utils.class_casing.DotCase'>
DotCase  MRO:  ['DotCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
Kebab  Qualified:  <class 'utils.class_casing.Kebab'>
Kebab  MRO:  ['Kebab', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
LowerCamel  Qualified:  <class 'utils.class_casing.LowerCamel'>
LowerCamel  MRO:  ['LowerCamel', 'CamelCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
PascalCase  Qualified:  <class 'utils.class_casing.PascalCase'>
PascalCase  MRO:  ['PascalCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
SnakeCase  Qualified:  <class 'utils.class_casing.SnakeCase'>
SnakeCase  MRO:  ['SnakeCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
TrainCase  Qualified:  <class 'utils.class_casing.TrainCase'>
TrainCase  MRO:  ['TrainCase', 'Casing', 'PresentableToken', 'PydanticMixin', 'object']
as yaml - warnings =  False

Phase: Parsing model: ldm/ldm_models/Literate/Literate.md
PARSING ldm/ldm_models/Literate/Literate.md

Phase: Deriving dict from parse => {yaml_dict_file}
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(_type='ClassName', content='LiterateDataModel')]
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(_type='ClassName', content='Component')]
parsing subtypeOfs:   Component

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   Component

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  dependent_of for dependent of
Adding value in ddforpart. dependent_of -. [ClassName(_type='ClassName', content='LiterateDataModel')]
parsing subtypeOfs:   Subject

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Subject'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Subject'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   Component

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  dependent_of for dependent of
Adding value in ddforpart. dependent_of -. [ClassName(_type='ClassName', content='Class')]
parsing subtypeOfs:   Class.

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Class'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Class'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   Class.

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Class'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Class'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   ValueType.

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='ValueType'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='ValueType'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   Component

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  dependent_of for dependent of
Adding value in ddforpart. dependent_of -. [ClassName(_type='ClassName', content='Class')]
parsing subtypeOfs:   Key

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Key'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Key'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   Component.

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(_type='ClassName', content='Class')]
parsing subtypeOfs:   Component

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(_type='ClassName', content='AttributeSection')]
Inventing name for:  1:1 Author
Inventing name for:  N:M Set of Books
parsing subtypeOfs:   Component

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Inventing name for:  e.g., OCL _(CodeExpression
parsing subtypeOfs:   Constraint

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Constraint'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Constraint'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(_type='ClassName', content='Class')]
parsing subtypeOfs:   Constraint

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Constraint'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Constraint'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(_type='ClassName', content='Attribute')]
parsing subtypeOfs:   Component

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   Component

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='Component'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Inventing name for:  e.g., optional, required
parsing subtypeOfs:   String

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='String'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='String'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   CamelName

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='CamelName'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='CamelName'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   CamelName

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='CamelName'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='CamelName'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   String

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='String'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='String'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   String

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='String'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='String'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   RichText

SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='RichText'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='RichText'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
parsing subtypeOfs:   ValueType
A basic, built-in data type
SubtypeOf result is  [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='ValueTypeABasic'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}, {'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='BuiltInDataType'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [{'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='ValueTypeABasic'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}, {'type': '_SubtypeBy', 'class_name': ClassName(_type='ClassName', content='BuiltInDataType'), 'subtyping_name': SubtypingName(_type='SubtypingName', content='subtypes')}]
as yaml - warnings =  False

Phase: .. full dict saved  in ldm/ldm_models/Literate/Literate_results/Literate_DC_02.dict.yaml

Phase: Creating model with from_typed_dict() => to_typed_dict() => ldm/ldm_models/Literate/Literate_results/Literate_DC_03.model.yaml
Calling LiterateModel.from_typed_dict ...
In AttSection post-init for For Machinery, is_optional = None
In AttSection post-init for For Machinery, is_optional = None
In AttSection post-init for Modeling Configuration, is_optional = None
In AttSection post-init for Implied Attributes, is_optional = None
In AttSection post-init for Cardinalities, is_optional = None
In AttSection post-init for Inverse Attributes, is_optional = None
In AttSection post-init for Override Tracking, is_optional = None

Phase: have py  model from dict

Phase: Creating model_dict from model => ldm/ldm_models/Literate/Literate_results/Literate_DC_03.model.yaml
as yaml - warnings =  False

Phase: Validating model tp ldm/ldm_models/Literate/Literate_results/Literate_DC_04.v_model.yaml
Found Literate_01 module as: ldm.Literate_01
Found Literate_01 module as: Literate_01
Patching module: ldm.Literate_01
  Attached validate method to ldm.Literate_01.Component
  Attached validate method to ldm.Literate_01.Subject
  Attached validate method to ldm.Literate_01.SubjectB
  Attached validate method to ldm.Literate_01.Class
  Attached validate method to ldm.Literate_01.AttributeSection
  Attached validate method to ldm.Literate_01.Attribute
  Attached validate method to ldm.Literate_01.Formula
  Attached validate method to ldm.Literate_01.Constraint
  Attached validate method to ldm.Literate_01.DataTypeClause
Patching module: Literate_01
  Attached validate method to Literate_01.Component
  Attached validate method to Literate_01.Subject
  Attached validate method to Literate_01.SubjectB
  Attached validate method to Literate_01.Class
  Attached validate method to Literate_01.AttributeSection
  Attached validate method to Literate_01.Attribute
  Attached validate method to Literate_01.Formula
  Attached validate method to Literate_01.Constraint
  Attached validate method to Literate_01.DataTypeClause
oname for diagnostic is  Literate Data Model
oname_str for diag is  Literate Data Model
Validating object: SubjectB Py: <class 'Literate_01.SubjectB'>, PyName: SubjectB == Preliminaries
... found validate method! - validate_subject
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == Component
... found validate method! - validate_class
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == normalName
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == name
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == qualifiedName
... found validate method! - validate_attribute
oname for diagnostic is  qualifiedName
oname_str for diag is  qualifiedName
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == abbreviatedName
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Default Py: <class 'Literate_01.Default'>, PyName: Default == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == oneLiner
... found validate method! - validate_attribute
oname for diagnostic is  oneLiner
oname_str for diag is  oneLiner
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == elaboration
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: AttributeSection Py: <class 'Literate_01.AttributeSection'>, PyName: AttributeSection == For Machinery
... found validate method! - validate_attribute_section
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == isEmbellishment
... found validate method! - validate_attribute
oname for diagnostic is  isEmbellishment
oname_str for diag is  isEmbellishment
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Default Py: <class 'Literate_01.Default'>, PyName: Default == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == AnnotationType
... found validate method! - validate_class
oname for diagnostic is  AnnotationType
oname_str for diag is  AnnotationType
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == emoji
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == emojiName
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == emojiUnicode
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == label
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == plural
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Default Py: <class 'Literate_01.Default'>, PyName: Default == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == purpose
... found validate method! - validate_attribute
oname for diagnostic is  purpose
oname_str for diag is  purpose
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  purpose
oname_str for diag is  purpose
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == ValueTypeAnnotationANoteOrCommentAssociatedWithAModelElement
... found validate method! - validate_class
oname for diagnostic is  ValueTypeAnnotationANoteOrCommentAssociatedWithAModelElement
oname_str for diag is  ValueTypeAnnotationANoteOrCommentAssociatedWithAModelElement
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == annotationType
... found validate method! - validate_attribute
oname for diagnostic is  annotationType
oname_str for diag is  annotationType
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == label
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Default Py: <class 'Literate_01.Default'>, PyName: Default == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == emoji
... found validate method! - validate_attribute
oname for diagnostic is  emoji
oname_str for diag is  emoji
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Default Py: <class 'Literate_01.Default'>, PyName: Default == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == content
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: AttributeSection Py: <class 'Literate_01.AttributeSection'>, PyName: AttributeSection == For Machinery
... found validate method! - validate_attribute_section
oname for diagnostic is  For Machinery
oname_str for diag is  For Machinery
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == isEmbellishment
... found validate method! - validate_attribute
oname for diagnostic is  isEmbellishment
oname_str for diag is  isEmbellishment
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Default Py: <class 'Literate_01.Default'>, PyName: Default == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  Preliminaries
oname_str for diag is  Preliminaries
Validating object: SubjectB Py: <class 'Literate_01.SubjectB'>, PyName: SubjectB == The Model and its Subjects
... found validate method! - validate_subject
oname for diagnostic is  The Model and its Subjects
oname_str for diag is  The Model and its Subjects
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == LiterateDataModel
... found validate method! - validate_class
oname for diagnostic is  LiterateDataModel
oname_str for diag is  LiterateDataModel
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == name
... found validate method! - validate_attribute
oname for diagnostic is  name
oname_str for diag is  name
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == allSubjects
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Derivation Py: <class 'Literate_01.Derivation'>, PyName: Derivation == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Constraint Py: <class 'Literate_01.Constraint'>, PyName: Constraint == NoName?
... found validate method! - validate_constraint
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == allClasses
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Derivation Py: <class 'Literate_01.Derivation'>, PyName: Derivation == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Constraint Py: <class 'Literate_01.Constraint'>, PyName: Constraint == NoName?
... found validate method! - validate_constraint
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: AttributeSection Py: <class 'Literate_01.AttributeSection'>, PyName: AttributeSection == Modeling Configuration
... found validate method! - validate_attribute_section
oname for diagnostic is  Modeling Configuration
oname_str for diag is  Modeling Configuration
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == annotationTypes
... found validate method! - validate_attribute
oname for diagnostic is  annotationTypes
oname_str for diag is  annotationTypes
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == preferredCodingLanguage
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Default Py: <class 'Literate_01.Default'>, PyName: Default == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == alternateCodingLanguages
... found validate method! - validate_attribute
oname for diagnostic is  alternateCodingLanguages
oname_str for diag is  alternateCodingLanguages
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == preferredTemplateLanguage
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Default Py: <class 'Literate_01.Default'>, PyName: Default == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == alternateTemplateLanguages
... found validate method! - validate_attribute
oname for diagnostic is  alternateTemplateLanguages
oname_str for diag is  alternateTemplateLanguages
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == aiFunctions
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Derivation Py: <class 'Literate_01.Derivation'>, PyName: Derivation == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  LiterateDataModel
oname_str for diag is  LiterateDataModel
oname for diagnostic is  LiterateDataModel
oname_str for diag is  LiterateDataModel
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == SubjectASpecificTopicOrThemeWithinTheModel
... found validate method! - validate_class
oname for diagnostic is  SubjectASpecificTopicOrThemeWithinTheModel
oname_str for diag is  SubjectASpecificTopicOrThemeWithinTheModel
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == name
... found validate method! - validate_attribute
oname for diagnostic is  name
oname_str for diag is  name
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == parentSubject
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == classes
... found validate method! - validate_attribute
oname for diagnostic is  classes
oname_str for diag is  classes
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == eachClassShouldBeFollowedFirstByTheClassesThatAreDependentOnItAndThen
... found validate method! - validate_attribute
oname for diagnostic is  eachClassShouldBeFollowedFirstByTheClassesThatAreDependentOnItAndThen
oname_str for diag is  eachClassShouldBeFollowedFirstByTheClassesThatAreDependentOnItAndThen
oname for diagnostic is  eachClassShouldBeFollowedFirstByTheClassesThatAreDependentOnItAndThen
oname_str for diag is  eachClassShouldBeFollowedFirstByTheClassesThatAreDependentOnItAndThen
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  eachClassShouldBeFollowedFirstByTheClassesThatAreDependentOnItAndThen
oname_str for diag is  eachClassShouldBeFollowedFirstByTheClassesThatAreDependentOnItAndThen
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == byItsSubtypeClasses
... found validate method! - validate_attribute
oname for diagnostic is  byItsSubtypeClasses
oname_str for diag is  byItsSubtypeClasses
oname for diagnostic is  byItsSubtypeClasses
oname_str for diag is  byItsSubtypeClasses
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  byItsSubtypeClasses
oname_str for diag is  byItsSubtypeClasses
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == childSubjects
... found validate method! - validate_attribute
oname for diagnostic is  childSubjects
oname_str for diag is  childSubjects
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  SubjectASpecificTopicOrThemeWithinTheModel
oname_str for diag is  SubjectASpecificTopicOrThemeWithinTheModel
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == SubjectAreaAMainTopicOrAreaOfFocusWithinTheModelContainingRelatedSubjectsAndClasses
... found validate method! - validate_class
oname for diagnostic is  SubjectAreaAMainTopicOrAreaOfFocusWithinTheModelContainingRelatedSubjectsAndClasses
oname_str for diag is  SubjectAreaAMainTopicOrAreaOfFocusWithinTheModelContainingRelatedSubjectsAndClasses
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  SubjectAreaAMainTopicOrAreaOfFocusWithinTheModelContainingRelatedSubjectsAndClasses
oname_str for diag is  SubjectAreaAMainTopicOrAreaOfFocusWithinTheModelContainingRelatedSubjectsAndClasses
oname for diagnostic is  SubjectAreaAMainTopicOrAreaOfFocusWithinTheModelContainingRelatedSubjectsAndClasses
oname_str for diag is  SubjectAreaAMainTopicOrAreaOfFocusWithinTheModelContainingRelatedSubjectsAndClasses
Validating object: SubjectC Py: <class 'Literate_01.SubjectC'>, PyName: SubjectC == Classes
... found validate method! - validate_component
oname for diagnostic is  Classes
oname_str for diag is  Classes
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  Classes
oname_str for diag is  Classes
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  The Model and its Subjects
oname_str for diag is  The Model and its Subjects
Validating object: SubjectB Py: <class 'Literate_01.SubjectB'>, PyName: SubjectB == Attributes
... found validate method! - validate_subject
oname for diagnostic is  Attributes
oname_str for diag is  Attributes
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == AttributeSection
... found validate method! - validate_class
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == isOptional
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
oname for diagnostic is  AttributeSection
oname_str for diag is  AttributeSection
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == AttributeAPropertyOrCharacteristicOfAClass
... found validate method! - validate_class
oname for diagnostic is  AttributeAPropertyOrCharacteristicOfAClass
oname_str for diag is  AttributeAPropertyOrCharacteristicOfAClass
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == name
... found validate method! - validate_attribute
oname for diagnostic is  name
oname_str for diag is  name
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == dataType
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: AttributeSection Py: <class 'Literate_01.AttributeSection'>, PyName: AttributeSection == Cardinalities
... found validate method! - validate_attribute_section
oname for diagnostic is  Cardinalities
oname_str for diag is  Cardinalities
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == isOptional
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Default Py: <class 'Literate_01.Default'>, PyName: Default == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == cardinality
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Default Py: <class 'Literate_01.Default'>, PyName: Default == NoName?
... found validate method! - validate_formula
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == author
... found validate method! - validate_attribute
oname for diagnostic is  author
oname_str for diag is  author
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == books
... found validate method! - validate_attribute
oname for diagnostic is  books
oname_str for diag is  books
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: AttributeSection Py: <class 'Literate_01.AttributeSection'>, PyName: AttributeSection == Inverse Attributes
... found validate method! - validate_attribute_section
oname for diagnostic is  Inverse Attributes
oname_str for diag is  Inverse Attributes
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == isInvertible
... found validate method! - validate_attribute
oname for diagnostic is  isInvertible
oname_str for diag is  isInvertible
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Derivation Py: <class 'Literate_01.Derivation'>, PyName: Derivation == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == inverseClass
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Derivation Py: <class 'Literate_01.Derivation'>, PyName: Derivation == NoName?
... found validate method! - validate_formula
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == inverseAttribute
... found validate method! - validate_attribute
oname for diagnostic is  inverseAttribute
oname_str for diag is  inverseAttribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == inverseIsOptional
... found validate method! - validate_attribute
oname for diagnostic is  inverseIsOptional
oname_str for diag is  inverseIsOptional
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  AttributeAPropertyOrCharacteristicOfAClass
oname_str for diag is  AttributeAPropertyOrCharacteristicOfAClass
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == Formulas
... found validate method! - validate_class
oname for diagnostic is  Formulas
oname_str for diag is  Formulas
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == default
... found validate method! - validate_attribute
oname for diagnostic is  default
oname_str for diag is  default
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == derivation
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == constraints
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: AttributeSection Py: <class 'Literate_01.AttributeSection'>, PyName: AttributeSection == Override Tracking
... found validate method! - validate_attribute_section
oname for diagnostic is  Override Tracking
oname_str for diag is  Override Tracking
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == overrides
... found validate method! - validate_attribute
oname for diagnostic is  overrides
oname_str for diag is  overrides
oname for diagnostic is  overrides
oname_str for diag is  overrides
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  overrides
oname_str for diag is  overrides
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == ValueTypeDerivationARuleOrFormulaForDerivingTheValueOfAnAttribute
... found validate method! - validate_class
oname for diagnostic is  ValueTypeDerivationARuleOrFormulaForDerivingTheValueOfAnAttribute
oname_str for diag is  ValueTypeDerivationARuleOrFormulaForDerivingTheValueOfAnAttribute
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == statement
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == expression
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == ValueTypeConstraintARuleConditionOrValidationThatMustBeSatisfiedByTheModel
... found validate method! - validate_class
oname for diagnostic is  ValueTypeConstraintARuleConditionOrValidationThatMustBeSatisfiedByTheModel
oname_str for diag is  ValueTypeConstraintARuleConditionOrValidationThatMustBeSatisfiedByTheModel
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == statement
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == expression
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == severity
... found validate method! - validate_attribute
oname for diagnostic is  severity
oname_str for diag is  severity
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == None
... found validate method! - validate_attribute
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname_str for diag is  
oname_str for diag is  
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == None
... found validate method! - validate_attribute
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname_str for diag is  
oname_str for diag is  
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == message
... found validate method! - validate_attribute
oname for diagnostic is  message
oname_str for diag is  message
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  ValueTypeConstraintARuleConditionOrValidationThatMustBeSatisfiedByTheModel
oname_str for diag is  ValueTypeConstraintARuleConditionOrValidationThatMustBeSatisfiedByTheModel
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == ClassConstraint
... found validate method! - validate_class
oname for diagnostic is  ClassConstraint
oname_str for diag is  ClassConstraint
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  ClassConstraint
oname_str for diag is  ClassConstraint
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == AttributeConstraint
... found validate method! - validate_class
oname for diagnostic is  AttributeConstraint
oname_str for diag is  AttributeConstraint
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  AttributeConstraint
oname_str for diag is  AttributeConstraint
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == CodeExpression
... found validate method! - validate_class
oname for diagnostic is  CodeExpression
oname_str for diag is  CodeExpression
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == language
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == None
... found validate method! - validate_attribute
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname_str for diag is  
oname_str for diag is  
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == None
... found validate method! - validate_attribute
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname_str for diag is  
oname_str for diag is  
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == expression
... found validate method! - validate_attribute
oname for diagnostic is  expression
oname_str for diag is  expression
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  Attributes
oname_str for diag is  Attributes
Validating object: SubjectB Py: <class 'Literate_01.SubjectB'>, PyName: SubjectB == Methods
... found validate method! - validate_subject
oname for diagnostic is  Methods
oname_str for diag is  Methods
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == MethodABehaviorOrOperationAssociatedWithAClass
... found validate method! - validate_class
oname for diagnostic is  MethodABehaviorOrOperationAssociatedWithAClass
oname_str for diag is  MethodABehaviorOrOperationAssociatedWithAClass
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == parameters
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == returnType
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  MethodABehaviorOrOperationAssociatedWithAClass
oname_str for diag is  MethodABehaviorOrOperationAssociatedWithAClass
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == ParameterAnInputToAMethod
... found validate method! - validate_class
oname for diagnostic is  ParameterAnInputToAMethod
oname_str for diag is  ParameterAnInputToAMethod
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == type
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == cardinality
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  ParameterAnInputToAMethod
oname_str for diag is  ParameterAnInputToAMethod
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  Methods
oname_str for diag is  Methods
Validating object: SubjectB Py: <class 'Literate_01.SubjectB'>, PyName: SubjectB == Data Types
... found validate method! - validate_subject
oname for diagnostic is  Data Types
oname_str for diag is  Data Types
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == SimpleDataTypeSubtpeOfDataType
... found validate method! - validate_class
oname for diagnostic is  SimpleDataTypeSubtpeOfDataType
oname_str for diag is  SimpleDataTypeSubtpeOfDataType
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == coreClass
... found validate method! - validate_attribute
oname for diagnostic is  coreClass
oname_str for diag is  coreClass
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == ComplexDataType
... found validate method! - validate_class
oname for diagnostic is  ComplexDataType
oname_str for diag is  ComplexDataType
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == aggregation
... found validate method! - validate_attribute
oname for diagnostic is  aggregation
oname_str for diag is  aggregation
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == aggregatedTypes
... found validate method! - validate_attribute
oname for diagnostic is  aggregatedTypes
oname_str for diag is  aggregatedTypes
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == AggregatingOperator
... found validate method! - validate_class
oname for diagnostic is  AggregatingOperator
oname_str for diag is  AggregatingOperator
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == name
... found validate method! - validate_attribute
oname for diagnostic is  name
oname_str for diag is  name
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == None
... found validate method! - validate_attribute
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname_str for diag is  
oname_str for diag is  
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == None
... found validate method! - validate_attribute
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname_str for diag is  
oname_str for diag is  
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == None
... found validate method! - validate_attribute
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname_str for diag is  
oname_str for diag is  
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == arity
... found validate method! - validate_attribute
oname for diagnostic is  arity
oname_str for diag is  arity
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == spelling
... found validate method! - validate_attribute
oname for diagnostic is  spelling
oname_str for diag is  spelling
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  Data Types
oname_str for diag is  Data Types
Validating object: SubjectB Py: <class 'Literate_01.SubjectB'>, PyName: SubjectB == Low level Data Types
... found validate method! - validate_subject
oname for diagnostic is  Low level Data Types
oname_str for diag is  Low level Data Types
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == ValueTypeCamelName
... found validate method! - validate_class
oname for diagnostic is  ValueTypeCamelName
oname_str for diag is  ValueTypeCamelName
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == valueTheString
... found validate method! - validate_attribute
oname for diagnostic is  valueTheString
oname_str for diag is  valueTheString
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Constraint Py: <class 'Literate_01.Constraint'>, PyName: Constraint == NoName?
... found validate method! - validate_constraint
oname_str for diag is  
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  ValueTypeCamelName
oname_str for diag is  ValueTypeCamelName
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == UpperCamel
... found validate method! - validate_class
oname for diagnostic is  UpperCamel
oname_str for diag is  UpperCamel
oname for diagnostic is  UpperCamel
oname_str for diag is  UpperCamel
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == LowerCamel
... found validate method! - validate_class
oname for diagnostic is  LowerCamel
oname_str for diag is  LowerCamel
oname for diagnostic is  LowerCamel
oname_str for diag is  LowerCamel
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == QualifiedCamel
... found validate method! - validate_class
Validating object: Constraint Py: <class 'Literate_01.Constraint'>, PyName: Constraint == NoName?
... found validate method! - validate_constraint
oname_str for diag is  
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  QualifiedCamel
oname_str for diag is  QualifiedCamel
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == RichTextAStringWithMarkupForBlockLevelFormatting
... found validate method! - validate_class
oname for diagnostic is  RichTextAStringWithMarkupForBlockLevelFormatting
oname_str for diag is  RichTextAStringWithMarkupForBlockLevelFormatting
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == value
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == format
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == html
... found validate method! - validate_attribute
oname for diagnostic is  html
oname_str for diag is  html
oname for diagnostic is  html
oname_str for diag is  html
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  html
oname_str for diag is  html
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == markDown
... found validate method! - validate_attribute
oname for diagnostic is  markDown
oname_str for diag is  markDown
oname for diagnostic is  markDown
oname_str for diag is  markDown
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  markDown
oname_str for diag is  markDown
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  RichTextAStringWithMarkupForBlockLevelFormatting
oname_str for diag is  RichTextAStringWithMarkupForBlockLevelFormatting
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == RichLine
... found validate method! - validate_class
Validating object: Attribute Py: <class 'Literate_01.Attribute'>, PyName: Attribute == value
... found validate method! - validate_attribute
Validating object: DataTypeClause Py: <class 'Literate_01.DataTypeClause'>, PyName: DataTypeClause == NoName?
... found validate method! - validate_data_type_clause
Validating object: Constraint Py: <class 'Literate_01.Constraint'>, PyName: Constraint == NoName?
... found validate method! - validate_constraint
oname_str for diag is  
oname_str for diag is  
oname_str for diag is  
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  RichLine
oname_str for diag is  RichLine
Validating object: Class Py: <class 'Literate_01.Class'>, PyName: Class == PrimitiveType
... found validate method! - validate_class
oname for diagnostic is  PrimitiveType
oname_str for diag is  PrimitiveType
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  PrimitiveType
oname_str for diag is  PrimitiveType
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  Low level Data Types
oname_str for diag is  Low level Data Types
Validating object: SubjectB Py: <class 'Literate_01.SubjectB'>, PyName: SubjectB == Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md
... found validate method! - validate_subject
oname for diagnostic is  Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md
oname_str for diag is  Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md
Validating object: SubjectC Py: <class 'Literate_01.SubjectC'>, PyName: SubjectC == Annotation Types Used
... found validate method! - validate_component
oname for diagnostic is  Annotation Types Used
oname_str for diag is  Annotation Types Used
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  Annotation Types Used
oname_str for diag is  Annotation Types Used
Validating object: SubjectC Py: <class 'Literate_01.SubjectC'>, PyName: SubjectC == Annotation types as CSV
... found validate method! - validate_component
oname for diagnostic is  Annotation types as CSV
oname_str for diag is  Annotation types as CSV
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  Annotation types as CSV
oname_str for diag is  Annotation types as CSV
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md
oname_str for diag is  Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md
Validating object: SubjectB Py: <class 'Literate_01.SubjectB'>, PyName: SubjectB == Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md
... found validate method! - validate_subject
oname for diagnostic is  Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md
oname_str for diag is  Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md
Type name match: Diagnostic == Diagnostic (different modules)
oname for diagnostic is  Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md
oname_str for diag is  Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md
Validating references...
Validation diagnostics: 172
- Error (Missing field) on LiterateModel named Literate Data Model: Missing oneLiner
- Error (Missing field) on Attribute named qualifiedName: Missing oneLiner
- Error (No presence) on Default named : No value for code
- Warning (Style) on Attribute named oneLiner: oneLiner is too long. (116 chars).
- Warning (Style) on Attribute named isEmbellishment: oneLiner is too long. (91 chars).
- Error (No presence) on Default named : No value for code
- Warning (Style) on Class named AnnotationType: oneLiner is too long. (96 chars).
- Error (No presence) on Default named : No value for code
- Error (No presence) on Attribute named purpose: No value for data_type_clause
- Error (Field Error) on Attribute named purpose: Required field 'data_type_clause' is missing
- Error (Missing field) on Class named ValueTypeAnnotationANoteOrCommentAssociatedWithAModelElement: Missing oneLiner
- Error (Missing field) on Attribute named annotationType: Missing oneLiner
- Error (No presence) on Default named : No value for code
- Error (Missing field) on Attribute named emoji: Missing oneLiner
- Error (No presence) on Default named : No value for code
- Error (Missing field) on AttributeSection named For Machinery: Missing oneLiner
- Warning (Style) on Attribute named isEmbellishment: oneLiner is too long. (92 chars).
- Error (No presence) on Default named : No value for code
- Error (Field Error) on SubjectB named Preliminaries: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
- Error (Missing field) on SubjectB named The Model and its Subjects: Missing oneLiner
- Warning (Style) on Class named LiterateDataModel: oneLiner is too long. (112 chars).
- Error (Missing field) on Attribute named name: Missing oneLiner
- Error (No presence) on Derivation named : No value for code
- Error (No presence) on Constraint named : No value for code
- Error (Field Error) on Constraint named : For field 'one_liner' - expected typing.Optional[Literate_01.OneLiner], but got <class 'list'>
- Error (No presence) on Derivation named : No value for code
- Error (No presence) on Constraint named : No value for code
- Error (Field Error) on Constraint named : For field 'one_liner' - expected typing.Optional[Literate_01.OneLiner], but got <class 'list'>
- Error (Missing field) on AttributeSection named Modeling Configuration: Missing oneLiner
- Error (Missing field) on Attribute named annotationTypes: Missing oneLiner
- Error (No presence) on Default named : No value for code
- Error (Missing field) on Attribute named alternateCodingLanguages: Missing oneLiner
- Error (No presence) on Default named : No value for code
- Error (Missing field) on Attribute named alternateTemplateLanguages: Missing oneLiner
- Error (No presence) on Derivation named : No value for code
- Error (Field Error) on Class named LiterateDataModel: For field 'abbreviation' - expected typing.Optional[utils.class_casing.CamelCase], but got <class 'str'>
- Error (Field Error) on Class named LiterateDataModel: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Missing field) on Class named SubjectASpecificTopicOrThemeWithinTheModel: Missing oneLiner
- Error (Missing field) on Attribute named name: Missing oneLiner
- Warning (Style) on Attribute named classes: oneLiner is too long. (91 chars).
- Error (Missing field) on Attribute named eachClassShouldBeFollowedFirstByTheClassesThatAreDependentOnItAndThen: Missing oneLiner
- Error (No presence) on Attribute named eachClassShouldBeFollowedFirstByTheClassesThatAreDependentOnItAndThen: No value for data_type_clause
- Error (Field Error) on Attribute named eachClassShouldBeFollowedFirstByTheClassesThatAreDependentOnItAndThen: Required field 'data_type_clause' is missing
- Error (Missing field) on Attribute named byItsSubtypeClasses: Missing oneLiner
- Error (No presence) on Attribute named byItsSubtypeClasses: No value for data_type_clause
- Error (Field Error) on Attribute named byItsSubtypeClasses: Required field 'data_type_clause' is missing
- Warning (Style) on Attribute named childSubjects: oneLiner is too long. (94 chars).
- Error (Field Error) on Class named SubjectASpecificTopicOrThemeWithinTheModel: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Missing field) on Class named SubjectAreaAMainTopicOrAreaOfFocusWithinTheModelContainingRelatedSubjectsAndClasses: Missing oneLiner
- Error (Field Error) on Class named SubjectAreaAMainTopicOrAreaOfFocusWithinTheModelContainingRelatedSubjectsAndClasses: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Field Error) on Class named SubjectAreaAMainTopicOrAreaOfFocusWithinTheModelContainingRelatedSubjectsAndClasses: For field 'where' - expected typing.Optional[Literate_01.OneLiner], but got <class 'str'>
- Error (Missing field) on SubjectC named Classes: Missing oneLiner
- Error (Field Error) on SubjectC named Classes: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
- Error (Field Error) on SubjectB named The Model and its Subjects: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
- Error (Missing field) on SubjectB named Attributes: Missing oneLiner
- Error (Field Error) on Class named AttributeSection: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Missing field) on Class named AttributeAPropertyOrCharacteristicOfAClass: Missing oneLiner
- Error (Missing field) on Attribute named name: Missing oneLiner
- Error (Missing field) on AttributeSection named Cardinalities: Missing oneLiner
- Error (No presence) on Default named : No value for code
- Error (Style) on Default named : Formula one_liner is too long (220 chars)
- Error (No presence) on Default named : No value for code
- Error (Missing field) on Attribute named author: Missing oneLiner
- Error (Missing field) on Attribute named books: Missing oneLiner
- Error (Missing field) on AttributeSection named Inverse Attributes: Missing oneLiner
- Error (Missing field) on Attribute named isInvertible: Missing oneLiner
- Error (No presence) on Derivation named : No value for code
- Error (No presence) on Derivation named : No value for code
- Error (Missing field) on Attribute named inverseAttribute: Missing oneLiner
- Error (Missing field) on Attribute named inverseIsOptional: Missing oneLiner
- Error (Field Error) on Class named AttributeAPropertyOrCharacteristicOfAClass: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Missing field) on Class named Formulas: Missing oneLiner
- Warning (Style) on Attribute named default: oneLiner is too long. (143 chars).
- Error (Missing field) on AttributeSection named Override Tracking: Missing oneLiner
- Error (Missing field) on Attribute named overrides: Missing oneLiner
- Error (No presence) on Attribute named overrides: No value for data_type_clause
- Error (Field Error) on Attribute named overrides: Required field 'data_type_clause' is missing
- Error (Missing field) on Class named ValueTypeDerivationARuleOrFormulaForDerivingTheValueOfAnAttribute: Missing oneLiner
- Error (Missing field) on Class named ValueTypeConstraintARuleConditionOrValidationThatMustBeSatisfiedByTheModel: Missing oneLiner
- Error (Missing field) on Attribute named severity: Missing oneLiner
- Error (Missing field) on Attribute named : Name is missing
- Error (No presence) on Attribute named : No value for data_type_clause
- Error (Field Error) on Attribute named : Required field 'name' is missing
- Error (Field Error) on Attribute named : Required field 'data_type_clause' is missing
- Error (Missing field) on Attribute named : Name is missing
- Error (No presence) on Attribute named : No value for data_type_clause
- Error (Field Error) on Attribute named : Required field 'name' is missing
- Error (Field Error) on Attribute named : Required field 'data_type_clause' is missing
- Error (Missing field) on Attribute named message: Missing oneLiner
- Error (Field Error) on Class named ValueTypeConstraintARuleConditionOrValidationThatMustBeSatisfiedByTheModel: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Missing field) on Class named ClassConstraint: Missing oneLiner
- Error (Field Error) on Class named ClassConstraint: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Missing field) on Class named AttributeConstraint: Missing oneLiner
- Error (Field Error) on Class named AttributeConstraint: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Missing field) on Class named CodeExpression: Missing oneLiner
- Error (Missing field) on Attribute named : Name is missing
- Error (No presence) on Attribute named : No value for data_type_clause
- Error (Field Error) on Attribute named : Required field 'name' is missing
- Error (Field Error) on Attribute named : Required field 'data_type_clause' is missing
- Error (Missing field) on Attribute named : Name is missing
- Error (No presence) on Attribute named : No value for data_type_clause
- Error (Field Error) on Attribute named : Required field 'name' is missing
- Error (Field Error) on Attribute named : Required field 'data_type_clause' is missing
- Error (Missing field) on Attribute named expression: Missing oneLiner
- Error (Field Error) on SubjectB named Attributes: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
- Error (Missing field) on SubjectB named Methods: Missing oneLiner
- Error (Missing field) on Class named MethodABehaviorOrOperationAssociatedWithAClass: Missing oneLiner
- Error (Field Error) on Class named MethodABehaviorOrOperationAssociatedWithAClass: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Missing field) on Class named ParameterAnInputToAMethod: Missing oneLiner
- Error (Field Error) on Class named ParameterAnInputToAMethod: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Field Error) on SubjectB named Methods: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
- Error (Missing field) on SubjectB named Data Types: Missing oneLiner
- Error (Missing field) on Class named SimpleDataTypeSubtpeOfDataType: Missing oneLiner
- Error (Missing field) on Attribute named coreClass: Missing oneLiner
- Error (Missing field) on Class named ComplexDataType: Missing oneLiner
- Error (Missing field) on Attribute named aggregation: Missing oneLiner
- Error (Missing field) on Attribute named aggregatedTypes: Missing oneLiner
- Error (Missing field) on Class named AggregatingOperator: Missing oneLiner
- Error (Missing field) on Attribute named name: Missing oneLiner
- Error (Missing field) on Attribute named : Name is missing
- Error (No presence) on Attribute named : No value for data_type_clause
- Error (Field Error) on Attribute named : Required field 'name' is missing
- Error (Field Error) on Attribute named : Required field 'data_type_clause' is missing
- Error (Missing field) on Attribute named : Name is missing
- Error (No presence) on Attribute named : No value for data_type_clause
- Error (Field Error) on Attribute named : Required field 'name' is missing
- Error (Field Error) on Attribute named : Required field 'data_type_clause' is missing
- Error (Missing field) on Attribute named : Name is missing
- Error (No presence) on Attribute named : No value for data_type_clause
- Error (Field Error) on Attribute named : Required field 'name' is missing
- Error (Field Error) on Attribute named : Required field 'data_type_clause' is missing
- Error (Missing field) on Attribute named arity: Missing oneLiner
- Error (Missing field) on Attribute named spelling: Missing oneLiner
- Error (Field Error) on SubjectB named Data Types: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
- Error (Missing field) on SubjectB named Low level Data Types: Missing oneLiner
- Error (Missing field) on Class named ValueTypeCamelName: Missing oneLiner
- Error (Missing field) on Attribute named valueTheString: Missing oneLiner
- Error (Style) on Constraint named : Formula one_liner is too long (105 chars)
- Error (No presence) on Constraint named : No value for code
- Error (Field Error) on Constraint named : For field 'one_liner' - expected typing.Optional[Literate_01.OneLiner], but got <class 'list'>
- Error (Field Error) on Class named ValueTypeCamelName: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Field Error) on Class named UpperCamel: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Field Error) on Class named UpperCamel: For field 'where' - expected typing.Optional[Literate_01.OneLiner], but got <class 'str'>
- Error (Field Error) on Class named LowerCamel: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Field Error) on Class named LowerCamel: For field 'where' - expected typing.Optional[Literate_01.OneLiner], but got <class 'str'>
- Error (Style) on Constraint named : Formula one_liner is too long (170 chars)
- Error (No presence) on Constraint named : No value for code
- Error (Field Error) on Constraint named : For field 'one_liner' - expected typing.Optional[Literate_01.OneLiner], but got <class 'list'>
- Error (Field Error) on Class named QualifiedCamel: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Missing field) on Class named RichTextAStringWithMarkupForBlockLevelFormatting: Missing oneLiner
- Error (Missing field) on Attribute named html: Missing oneLiner
- Error (No presence) on Attribute named html: No value for data_type_clause
- Error (Field Error) on Attribute named html: Required field 'data_type_clause' is missing
- Error (Missing field) on Attribute named markDown: Missing oneLiner
- Error (No presence) on Attribute named markDown: No value for data_type_clause
- Error (Field Error) on Attribute named markDown: Required field 'data_type_clause' is missing
- Error (Field Error) on Class named RichTextAStringWithMarkupForBlockLevelFormatting: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Style) on Constraint named : Formula one_liner is too long (93 chars)
- Error (No presence) on Constraint named : No value for code
- Error (Field Error) on Constraint named : For field 'one_liner' - expected typing.Optional[Literate_01.OneLiner], but got <class 'list'>
- Error (Field Error) on Class named RichLine: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Missing field) on Class named PrimitiveType: Missing oneLiner
- Error (Field Error) on Class named PrimitiveType: For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got <class 'list'>
- Error (Field Error) on SubjectB named Low level Data Types: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
- Error (Missing field) on SubjectB named Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md: Missing oneLiner
- Error (Missing field) on SubjectC named Annotation Types Used: Missing oneLiner
- Error (Field Error) on SubjectC named Annotation Types Used: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
- Error (Missing field) on SubjectC named Annotation types as CSV: Missing oneLiner
- Error (Field Error) on SubjectC named Annotation types as CSV: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
- Error (Field Error) on SubjectB named Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
- Error (Missing field) on SubjectB named Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md: Missing oneLiner
- Error (Field Error) on SubjectB named Appendices Insert More Sidebars md Insert Overrides md insert LDM Intro md Insert OCL md Insert Camel Case md: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'Literate_01.SubjectName'>
as yaml - warnings =  False
..Created dict for validated model: ldm/ldm_models/Literate/Literate_results/Literate_DC_04.v_model.yaml

Phase: counting diagnostics
{'Error - Missing field': 70, 'Error - No presence': 33, 'Warning - Style': 8, 'Error - Field Error': 57, 'Error - Style': 4}
70 	 Error - Missing field
33 	 Error - No presence
8 	 Warning - Style
57 	 Error - Field Error
4 	 Error - Style
pattern is ldm/ldm_models/Literate/Literate_results/*dict*.yaml
pattern is ldm/ldm_models/Literate/Literate_results/*model*.yaml
Dict names are:  ['Literate_DC_02.dict.yaml', 'Literate_DC_03.model.yaml', 'Literate_DC_04.v_model.yaml']
All combos are:
['Literate_DC_02.dict.yaml', 'Literate_DC_03.model.yaml']
['Literate_DC_03.model.yaml', 'Literate_DC_04.v_model.yaml']
Combo is: ['Literate_DC_02.dict.yaml', 'Literate_DC_03.model.yaml']
Including:  Literate_DC_02.dict.yaml
Including:  Literate_DC_03.model.yaml
as yaml - warnings =  False
Combo is: ['Literate_DC_03.model.yaml', 'Literate_DC_04.v_model.yaml']
Including:  Literate_DC_03.model.yaml
Including:  Literate_DC_04.v_model.yaml
as yaml - warnings =  False

Phase: Rendering back to markdown => ldm/ldm_models/Literate/Literate_results/Literate_DC_05.rendered.md
Rendering LDM - <class 'ldm.Literate_01.LiterateModel'> - ??
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
8  subjects coming in model
RenderValue for SubjectB == <class 'Literate_01.SubjectB'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
3  classes in subject
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for AttributeSection == <class 'Literate_01.AttributeSection'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for IsOptional == <class 'utils.class_pom_token.IsOptional'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for AttributeSection == <class 'Literate_01.AttributeSection'>
RenderValue for IsOptional == <class 'utils.class_pom_token.IsOptional'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for SubjectB == <class 'Literate_01.SubjectB'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
3  classes in subject
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for AttributeSection == <class 'Literate_01.AttributeSection'>
RenderValue for IsOptional == <class 'utils.class_pom_token.IsOptional'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for AttributeReference == <class 'Literate_01.AttributeReference'>
RenderValue for ClassName == <class 'Literate_01.ClassName'>
RenderValue for AttributeName == <class 'Literate_01.AttributeName'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for SubjectC == <class 'Literate_01.SubjectC'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
8  classes in subject
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Constraint == <class 'Literate_01.Constraint'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Paragraph == <class 'Literate_01.Paragraph'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for AttributeSection == <class 'Literate_01.AttributeSection'>
RenderValue for IsOptional == <class 'utils.class_pom_token.IsOptional'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for AttributeReference == <class 'Literate_01.AttributeReference'>
RenderValue for ClassName == <class 'Literate_01.ClassName'>
RenderValue for AttributeName == <class 'Literate_01.AttributeName'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for AttributeReference == <class 'Literate_01.AttributeReference'>
RenderValue for ClassName == <class 'Literate_01.ClassName'>
RenderValue for AttributeName == <class 'Literate_01.AttributeName'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for SubjectB == <class 'Literate_01.SubjectB'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
8  classes in subject
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for AttributeReference == <class 'Literate_01.AttributeReference'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for AttributeSection == <class 'Literate_01.AttributeSection'>
RenderValue for IsOptional == <class 'utils.class_pom_token.IsOptional'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for AttributeSection == <class 'Literate_01.AttributeSection'>
RenderValue for IsOptional == <class 'utils.class_pom_token.IsOptional'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for AttributeSection == <class 'Literate_01.AttributeSection'>
RenderValue for IsOptional == <class 'utils.class_pom_token.IsOptional'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for SubjectB == <class 'Literate_01.SubjectB'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
2  classes in subject
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for SubjectB == <class 'Literate_01.SubjectB'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
3  classes in subject
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for SubjectB == <class 'Literate_01.SubjectB'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
7  classes in subject
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Constraint == <class 'Literate_01.Constraint'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Paragraph == <class 'Literate_01.Paragraph'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Attribute == <class 'Literate_01.Attribute'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for DataTypeClause == <class 'Literate_01.DataTypeClause'>
RenderValue for Class == <class 'Literate_01.Class'>
RenderValue for Annotation == <class 'Literate_01.Annotation'>
RenderValue for Label == <class 'Literate_01.Label'>
RenderValue for OneLiner == <class 'Literate_01.OneLiner'>
RenderValue for Emoji == <class 'utils.class_pom_token.Emoji'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for SubjectB == <class 'Literate_01.SubjectB'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
0  classes in subject
RenderValue for SubjectC == <class 'Literate_01.SubjectC'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
0  classes in subject
RenderValue for SubjectC == <class 'Literate_01.SubjectC'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
0  classes in subject
RenderValue for SubjectB == <class 'Literate_01.SubjectB'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
RenderValue for Diagnostic == <class 'ldm.Literate_01.Diagnostic'>
0  classes in subject

Phase: Skipping Render to HTML

Phase: Creating HTML ASfrom model dict
All keys are: 
	 severity
	 classes
	 class_name
	 default
	 type
	 plural
	 inverse
	 emoji
	 where
	 is_optional_lit
	 data_type_clause
	 content
	 is_optional
	 message
	 data_type
	 object_type
	 dependent_of
	 constraints
	 _type
	 parenthetical
	 object_name
	 as_value_type
	 subtype_of
	 elaboration
	 prefix
	 name
	 attribute_name
	 derivation
	 annotations
	 category
	 english
	 based_on
	 one_liner
	 diagnostics
	 overrides
	 attributes
	 abbreviation
	 subtyping_name
	 is_value_type
	 subjects
	 attribute_sections
	 label
	 is_embellishment
	 element_type
htmling object   LiterateModel
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  subjects
htmling object   SubjectB
htmling object   OneLiner
Adding headless list:  elaboration
htmling object   Paragraph
htmling object   Paragraph
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

Adding headless list:  classes
htmling object   Class
htmling object   OneLiner
Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  example
 </span>
 <span class="OneLiner content">
  "LDM" is the short form of "Literate Data Model".
 </span>
 None
</div>

htmling object   Default
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 oneLiner is too long. (116 chars).
</span>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  attribute_sections
htmling object   AttributeSection
htmling object   OneLiner
Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  This attribute is set to true for components that are automatically generated or added during the fleshing out, review, or rendering processes, such as implied attributes or suggested model elements. It helps distinguish embellishments from the core model elements defined in the original LDM source.
 </span>
 None
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 oneLiner is too long. (91 chars).
</span>

htmling object   Default
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Class
htmling object   OneLiner
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  Each LDM declares a set of Annotation Types, with defined labels, emojis, and clearly documented purposes. These are *recognized* or *registered* Annotation Types.
 </span>
 None
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 oneLiner is too long. (96 chars).
</span>

Orphaned list:  [{'_type': 'ClassName', 'content': 'LiterateDataModel'}]
htmling object   ClassName
listh <div class="orphaned list">
 <div class="ClassName">
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Default
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Attribute
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Orphaned list:  [{'_type': 'ClassName', 'content': 'Component'}]
htmling object   ClassName
listh <div class="orphaned list">
 <div class="ClassName">
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  An Annotation is considered to *recognized* if the label is associated with an Annotation Type. otherwise it is *ad hoc*.
 </span>
 None
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  elaboration
htmling object   Paragraph
htmling object   Default
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Default
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  attribute_sections
htmling object   AttributeSection
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  This attribute is set to true for annotations that are automatically generated or added during the fleshing out, review, or rendering processes, such as suggestions, issues, or diagnostic messages. It helps distinguish embellishment annotations from the annotations defined in the original LDM source.
 </span>
 None
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 oneLiner is too long. (92 chars).
</span>

htmling object   Default
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   SubjectB
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

Adding headless list:  classes
htmling object   Class
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 oneLiner is too long. (112 chars).
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'abbreviation' - expected typing.Optional[utils.class_casing.CamelCase], but got &lt;class 'str'&gt;
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Component'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Derivation
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
Adding headless list:  constraints
htmling object   Constraint
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'one_liner' - expected typing.Optional[Literate_01.OneLiner], but got &lt;class 'list'&gt;
</span>

htmling object   Paragraph
htmling object   Paragraph
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Derivation
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
Adding headless list:  constraints
htmling object   Constraint
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'one_liner' - expected typing.Optional[Literate_01.OneLiner], but got &lt;class 'list'&gt;
</span>

htmling object   Paragraph
htmling object   Paragraph
Adding headless list:  attribute_sections
htmling object   AttributeSection
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Default
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Default
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Derivation
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Class
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Component'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Orphaned list:  [{'_type': 'ClassName', 'content': 'LiterateDataModel'}]
htmling object   ClassName
listh <div class="orphaned list">
 <div class="ClassName">
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  issue
 </span>
 <span class="OneLiner content">
  define chapter, section, subsection as levels?
 </span>
 None
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 oneLiner is too long. (91 chars).
</span>

htmling object   Attribute
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Attribute
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 oneLiner is too long. (94 chars).
</span>

htmling object   AttributeReference
htmling object   ClassName
htmling object   AttributeName
htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'where' - expected typing.Optional[Literate_01.OneLiner], but got &lt;class 'str'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Subject'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  subjects
htmling object   SubjectC
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

Adding headless list:  classes
htmling object   Class
htmling object   OneLiner
Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Component'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  constraints
htmling object   Constraint
htmling object   Paragraph
htmling object   Paragraph
Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Orphaned list:  [{'_type': 'Paragraph', 'content': 'The exception is when a common noun has two plural forms, like People and Persons. But this is unusual.\n'}]
htmling object   Paragraph
listh <div class="orphaned list">
 <span class="Paragraph">
  The exception is when a common noun has two plural forms, like People and Persons. But this is unusual.
 </span>
</div>

Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  When inputting a model, you will rarely need to specify the plural form. The input program will just look it up.
 </span>
 None
 <div class="orphaned list elaboration">
  <span class="Paragraph">
   The exception is when a common noun has two plural forms, like People and Persons. But this is unusual.
  </span>
 </div>
</div>

htmling object   Default
htmling object   Paragraph
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  that basedOn and dependentOf are being used synonymousle in this metamodel.
 </span>
 None
</div>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  example
 </span>
 <span class="OneLiner content">
  in a library model, the `Book` class could have subtypings based on genre (e.g., Fiction, Non-fiction), format (e.g., Hardcover, Paperback), or subject (e.g., Science, History).
 </span>
 None
</div>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  example
 </span>
 <span class="OneLiner content">
  For instance, using the `Book` example, the subtypes could include `FictionBook`, `Non-fictionBook`, `HardcoverBook`, `PaperbackBook`, `ScienceBook`, and `HistoryBook`.
 </span>
 None
</div>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  Constraints may be expressed on either the Class or the Attribute. Always?
 </span>
 None
</div>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  attribute_sections
htmling object   AttributeSection
Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   AttributeReference
htmling object   ClassName
htmling object   AttributeName
htmling object   Attribute
htmling object   DataTypeClause
htmling object   AttributeReference
htmling object   ClassName
htmling object   AttributeName
htmling object   Class
htmling object   OneLiner
Orphaned list:  [{'_type': 'ClassName', 'content': 'Class'}]
htmling object   ClassName
listh <div class="orphaned list">
 <div class="ClassName">
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
htmling object   Attribute
htmling object   DataTypeClause
htmling object   Default
htmling object   Paragraph
htmling object   Attribute
htmling object   DataTypeClause
htmling object   Default
htmling object   Paragraph
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  every class can have an unnamed subtyping.
 </span>
 None
</div>

htmling object   Class
Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Class'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

htmling object   Class
Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Class'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

htmling object   Class
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  Often, a CodeType will be assigned to just one attribute in the model.  In such cases, there's no need to declare a new Code Type and invent a name for it.  Instead:
 </span>
 None
</div>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'ValueType'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   Attribute
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Class
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  aPossibleValueForAnEnumeratedDataClassDependentOf
 </span>
 <span class="OneLiner content">
  CodeType
 </span>
 None
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Class
htmling object   OneLiner
Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Component'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Orphaned list:  [{'_type': 'ClassName', 'content': 'Class'}]
htmling object   ClassName
listh <div class="orphaned list">
 <div class="ClassName">
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  issue
 </span>
 <span class="OneLiner content">
  need ascending descending to support index keys or ordering keys.
 </span>
 None
</div>

Adding headless list:  constraints
htmling object   Constraint
htmling object   Paragraph
htmling object   Paragraph
htmling object   Constraint
htmling object   Paragraph
htmling object   Paragraph
htmling object   Class
htmling object   OneLiner
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  order unimportant for Unique Keys.
 </span>
 None
</div>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Key'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

htmling object   SubjectB
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

Adding headless list:  classes
htmling object   Class
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Component'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Orphaned list:  [{'_type': 'ClassName', 'content': 'Class'}]
htmling object   ClassName
listh <div class="orphaned list">
 <div class="ClassName">
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  elaboration
htmling object   Paragraph
htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Component'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Orphaned list:  [{'_type': 'ClassName', 'content': 'AttributeSection'}]
htmling object   ClassName
listh <div class="orphaned list">
 <div class="ClassName">
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   AttributeReference
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  see
 </span>
 <span class="OneLiner content">
  the section below on Data Type Specifiers.
 </span>
 None
</div>

Adding headless list:  attribute_sections
htmling object   AttributeSection
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Default
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  forExample
 </span>
 None
 None
</div>

htmling object   Default
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Formula one_liner is too long (220 chars)
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  how this works with optionality
 </span>
 None
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   AttributeSection
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Derivation
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Derivation
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Paragraph
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Orphaned list:  [{'_type': 'Paragraph', 'content': "Yes, it handled extra lines.  Let's see about additional paras for an annotation\n"}, {'_type': 'Paragraph', 'content': 'Last paragraph here\n'}]
htmling object   Paragraph
htmling object   Paragraph
listh <div class="orphaned list">
 <span class="Paragraph">
  Yes, it handled extra lines.  Let's see about additional paras for an annotation
 </span>
 <span class="Paragraph">
  Last paragraph here
 </span>
</div>

Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  even when an Attribute has a default derivation, there’s no guarantee that every instance will have an assigned value. Example needed.
 </span>
 None
 <div class="orphaned list elaboration">
  <span class="Paragraph">
   Yes, it handled extra lines.  Let's see about additional paras for an annotation
  </span>
  <span class="Paragraph">
   Last paragraph here
  </span>
 </div>
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 oneLiner is too long. (143 chars).
</span>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  issue
 </span>
 <span class="OneLiner content">
  on insert vs on access?
 </span>
 None
</div>

htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  note
 </span>
 <span class="OneLiner content">
  from Class.constraints
 </span>
 None
</div>

Adding headless list:  attribute_sections
htmling object   AttributeSection
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Component'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Name is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'name' is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Attribute
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Name is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'name' is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Constraint'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Orphaned list:  [{'_type': 'ClassName', 'content': 'Class'}]
htmling object   ClassName
listh <div class="orphaned list">
 <div class="ClassName">
 </div>
</div>

htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Constraint'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Orphaned list:  [{'_type': 'ClassName', 'content': 'Attribute'}]
htmling object   ClassName
listh <div class="orphaned list">
 <div class="ClassName">
 </div>
</div>

htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Name is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'name' is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Attribute
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Name is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'name' is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   SubjectB
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

Adding headless list:  classes
htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Component'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'Component'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   SubjectB
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

Adding headless list:  classes
htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Name is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'name' is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Attribute
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Name is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'name' is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Attribute
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Name is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'name' is missing
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   SubjectB
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

Adding headless list:  classes
htmling object   Class
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'String'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   DataTypeClause
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Orphaned list:  [{'_type': 'Paragraph', 'content': '> 📝 ***ModelingNote***: Putting the non-empty constraint on the CamelName value type is effective because it automatically applies to all attributes that use CamelName as their type. This ensures consistency and avoids the need to define the constraint separately for each attribute.\n'}]
htmling object   Paragraph
listh <div class="orphaned list">
 <span class="Paragraph">
  &gt; 📝 ***ModelingNote***: Putting the non-empty constraint on the CamelName value type is effective because it automatically applies to all attributes that use CamelName as their type. This ensures consistency and avoids the need to define the constraint separately for each attribute.
 </span>
</div>

Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  example
 </span>
 <span class="OneLiner content">
  "firstName", "orderDate", "customerID"
 </span>
 None
 <div class="orphaned list elaboration">
  <span class="Paragraph">
   &gt; 📝 ***ModelingNote***: Putting the non-empty constraint on the CamelName value type is effective because it automatically applies to all attributes that use CamelName as their type. This ensures consistency and avoids the need to define the constraint separately for each attribute.
  </span>
 </div>
</div>

htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  modelingNote
 </span>
 <span class="OneLiner content">
  * *CamelName* is presented here, just after its first usage by another class (Component), to provide context and understanding before it is used further in the model.
 </span>
 None
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

Adding headless list:  constraints
htmling object   Constraint
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Formula one_liner is too long (105 chars)
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'one_liner' - expected typing.Optional[Literate_01.OneLiner], but got &lt;class 'list'&gt;
</span>

htmling object   Paragraph
htmling object   Paragraph
htmling object   Class
htmling object   OneLiner
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  example
 </span>
 <span class="OneLiner content">
  _ "Customer", "ProductCategory", "PaymentMethod"
 </span>
 None
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'where' - expected typing.Optional[Literate_01.OneLiner], but got &lt;class 'str'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'CamelName'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

htmling object   Class
htmling object   OneLiner
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  example
 </span>
 <span class="OneLiner content">
  "firstName", "orderTotal", "shippingAddress"
 </span>
 None
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'where' - expected typing.Optional[Literate_01.OneLiner], but got &lt;class 'str'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'CamelName'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

htmling object   Class
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'String'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  constraints
htmling object   Constraint
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Formula one_liner is too long (170 chars)
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'one_liner' - expected typing.Optional[Literate_01.OneLiner], but got &lt;class 'list'&gt;
</span>

htmling object   Paragraph
htmling object   Paragraph
htmling object   Class
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'String'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
htmling object   Attribute
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Attribute
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for data_type_clause
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Required field 'data_type_clause' is missing
</span>

htmling object   Class
htmling object   OneLiner
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'RichText'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

Adding headless list:  attributes
htmling object   Attribute
htmling object   OneLiner
htmling object   DataTypeClause
Adding headless list:  constraints
htmling object   Constraint
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Formula one_liner is too long (93 chars)
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 No value for code
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'one_liner' - expected typing.Optional[Literate_01.OneLiner], but got &lt;class 'list'&gt;
</span>

htmling object   Paragraph
htmling object   Paragraph
htmling object   Class
Adding headless list:  annotations
htmling object   Annotation
Special special for  Annotation
htmling object   Label
htmling object   OneLiner
htmling object   Emoji
Orphaned list:  [{'_type': 'Paragraph', 'content': '===\n'}]
htmling object   Paragraph
listh <div class="orphaned list">
 <span class="Paragraph">
  ===
 </span>
</div>

Special Annotation becomes:
 <div class="Annotation">
 <span class="Label label">
  values
 </span>
 None
 None
 <div class="orphaned list elaboration">
  <span class="Paragraph">
   ===
  </span>
 </div>
</div>

Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'subtype_of' - expected typing.Optional[typing.List[Literate_01.SubtypeBy]], but got &lt;class 'list'&gt;
</span>

Orphaned list:  [{'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'ValueTypeABasic'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}, {'type': '_SubtypeBy', 'class_name': {'_type': 'ClassName', 'content': 'BuiltInDataType'}, 'subtyping_name': {'_type': 'SubtypingName', 'content': 'subtypes'}}]
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
htmling object   NoDictTypeLabel
htmling object   ClassName
htmling object   SubtypingName
listh <div class="orphaned list">
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
 <div class="NoDictTypeLabel">
  <div class="clause type_clause">
   <span class="key type">
    type
   </span>
   _SubtypeBy
  </div>
  <div class="clause class_name_clause">
   <span class="key class_name">
    class_name
   </span>
   <div class="ClassName">
   </div>
  </div>
  <div class="clause subtyping_name_clause">
   <span class="key subtyping_name">
    subtyping_name
   </span>
   <div class="SubtypingName">
   </div>
  </div>
 </div>
</div>

htmling object   SubjectB
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

Adding headless list:  subjects
htmling object   SubjectC
Adding headless list:  elaboration
htmling object   Paragraph
htmling object   Paragraph
htmling object   CodeBlock
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

htmling object   SubjectC
Adding headless list:  elaboration
htmling object   CodeBlock
htmling object   Paragraph
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

htmling object   SubjectB
Adding headless list:  elaboration
htmling object   Paragraph
Adding headless list:  diagnostics
htmling object   Diagnostic
Diagnostic message is  <span class="message">
 Missing oneLiner
</span>

htmling object   Diagnostic
Diagnostic message is  <span class="message">
 For field 'name' - expected &lt;class 'utils.class_casing.CamelCase'&gt;, but got &lt;class 'Literate_01.SubjectName'&gt;
</span>

Body classes are None
Saved styled dictionary to ldm/ldm_models/Literate/Literate_results/Literate_DC_06_as.html
Body classes are ['reviewing']
Saved styled dictionary (for review) to ldm/ldm_models/Literate/Literate_results/Literate_DC_06_as.review.html

Phase: Skipping PDF creation
