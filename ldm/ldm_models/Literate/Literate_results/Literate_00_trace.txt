Generate schema

Phase: Parsing model: ldm/ldm_models/Literate/Literate.md
PARSING ldm/ldm_models/Literate/Literate.md

Phase: Deriving dict for model
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='String', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='CamelName', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'CamelName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'CamelName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='QualifiedCamel', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='QualifiedCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='QualifiedCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='QualifiedCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='QualifiedCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'QualifiedCamel', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='QualifiedCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='QualifiedCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='QualifiedCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='QualifiedCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='QualifiedCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='QualifiedCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='QualifiedCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'QualifiedCamel', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='CamelName', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'CamelName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'CamelName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  name

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='RichLine', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichLine', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichLine', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichLine', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='RichLine', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'RichLine', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='RichLine', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='RichLine', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichLine', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichLine', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichLine', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='RichLine', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='RichLine', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'RichLine', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='RichText', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'RichText', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'RichText', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Boolean', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  false

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
adding name value. based on -. [ClassName(content='LiterateDataModel', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(content='LiterateDataModel', _type='ClassName')]
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Emoji', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Emoji', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Emoji', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Emoji', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Emoji', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Emoji', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Emoji', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='String', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Unicode', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Unicode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Unicode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Unicode', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Unicode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Unicode', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Unicode', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Unicode', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Unicode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Unicode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Unicode', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Unicode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Unicode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Unicode', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='CamelName', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'CamelName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'CamelName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='UpperCamel', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'UpperCamel', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'UpperCamel', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  based on label

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
adding name value. based on -. [ClassName(content='Component', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(content='Component', _type='ClassName')]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='AnnotationType', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='AnnotationType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='AnnotationType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='AnnotationType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='AnnotationType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'AnnotationType', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='AnnotationType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='AnnotationType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='AnnotationType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='AnnotationType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='AnnotationType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='AnnotationType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='AnnotationType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'AnnotationType', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='CamelName', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'CamelName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CamelName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='CamelName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'CamelName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  from annotationType

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Emoji', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Emoji', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Emoji', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Emoji', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Emoji', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Emoji', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Emoji', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Emoji', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  from annotation type

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='RichText', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'RichText', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'RichText', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Boolean', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  false

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is abbreviation for MinorClause(line_label='ABBREVIATION', priority=1, word='abbreviation', attribute_name='abbreviation', is_list=False, is_cum=False, special_pattern='', plural='abbreviation_s', handlers=ParseName(), kw_pattern='[_\\*]*abbreviation[_\\*:]*') is abbreviation
adding name value. abbreviation -. LDM
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  LiterateDataModels

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='UpperCamel', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'UpperCamel', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'UpperCamel', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Classes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DERIVATION', priority=1, class_started='Derivation', word='Derivation', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Derivation[_\\*:]*') is one_liner
adding name value. one_liner -.  gathering s.allSubjects over s in subjectAreas

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Subject names must be unique across the model.

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Classes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DERIVATION', priority=1, class_started='Derivation', word='Derivation', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Derivation[_\\*:]*') is one_liner
adding name value. one_liner -.  gathering s.allClasses over s in allSubjects.

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Class names must be unique across the model.

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='AnnotationTypes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='AnnotationTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='AnnotationTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='AnnotationTypes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='AnnotationTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'AnnotationTypes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='AnnotationTypes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='AnnotationTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='AnnotationTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='AnnotationTypes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='AnnotationTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='AnnotationTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='AnnotationTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'AnnotationTypes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='CodingLanguage', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CodingLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CodingLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CodingLanguage', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='CodingLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'CodingLanguage', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='CodingLanguage', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='CodingLanguage', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CodingLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CodingLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CodingLanguage', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='CodingLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='CodingLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'CodingLanguage', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  OCL

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='CodingLanguages', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CodingLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CodingLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CodingLanguages', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='CodingLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'CodingLanguages', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='CodingLanguages', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CodingLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CodingLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CodingLanguages', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='CodingLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='CodingLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='CodingLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'CodingLanguages', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='TemplateLanguage', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='TemplateLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='TemplateLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='TemplateLanguage', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='TemplateLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'TemplateLanguage', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='TemplateLanguage', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='TemplateLanguage', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='TemplateLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='TemplateLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='TemplateLanguage', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='TemplateLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='TemplateLanguage', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'TemplateLanguage', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  Handlebars

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='TemplateLanguages', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='TemplateLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='TemplateLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='TemplateLanguages', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='TemplateLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'TemplateLanguages', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='TemplateLanguages', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='TemplateLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='TemplateLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='TemplateLanguages', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='TemplateLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='TemplateLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='TemplateLanguages', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'TemplateLanguages', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='String', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DERIVATION', priority=1, class_started='Derivation', word='Derivation', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Derivation[_\\*:]*') is one_liner
adding name value. one_liner -.  ['aiEnglishPlural()']

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Subjects

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is dependent of for MinorClause(line_label='DEPENDENT_OF', priority=1, word='dependent of', attribute_name='dependent of', is_list=True, is_cum=True, special_pattern='', plural='dependent of', handlers=ParseNameList(), kw_pattern='[_\\*]*dependent\\s?of[_\\*:]*') is dependent of
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
adding name value. dependent of -. [ClassName(content='LiterateDataModel', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  dependent_of for dependent of
Adding value in ddforpart. dependent_of -. [ClassName(content='LiterateDataModel', _type='ClassName')]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='UpperCamel', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'UpperCamel', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UpperCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='UpperCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'UpperCamel', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Subject', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Subject', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Subject', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Subject', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Subject', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Subject', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Subject', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Subject', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Subject', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Subject', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Subject', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Subject', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Subject', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Subject', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Classes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Subjects', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Subjects', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Subjects', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Subjects', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Subjects', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Subjects', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Subjects', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Subjects', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Subjects', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Subjects', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Subjects', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Subjects', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Subjects', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Subjects', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is inverse for MinorClause(line_label='INVERSE', priority=1, word='inverse', attribute_name='inverse', is_list=False, is_cum=False, special_pattern='', plural='inverse_s', handlers=ParseAttributeReference(), kw_pattern='[_\\*]*inverse[_\\*:]*') is inverse
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
adding name value. inverse -. {'_type': 'AttributeReference', 'class_name': ClassName(content='Subject', _type='ClassName'), 'attribute_name': AttributeName(content='parentSubject', _type='AttributeName')}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  SubjectAreas

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Subject

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Subject', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Subject', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Subject', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is where for MinorClause(line_label='WHERE', priority=1, word='where', attribute_name='where', is_list=False, is_cum=False, special_pattern='', plural='where_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*where[_\\*:]*') is where
adding name value. where -.  parentSubject is absent

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Classes

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Within each Class, attribute names must be unique.

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='UpperName', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UpperName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'UpperName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='UpperName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='UpperName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UpperName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'UpperName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  the regular plural, formed by adding "s" or "es".

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Classes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  SetDataType
!!	For SetDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SetDataType
Data type type is  SetDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'SetDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  SetDataType
Data type type is  SetDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': SetDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': SetDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Es', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Es', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Es', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Es', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Es', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Es', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Es', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Es', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Es', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Es', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Es', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Es', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Es', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Es', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Subtypings', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Subtypings', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Subtypings', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Subtypings', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Subtypings', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Subtypings', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Subtypings', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Subtypings', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Subtypings', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Subtypings', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Subtypings', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Subtypings', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Subtypings', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Subtypings', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Classes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Attributes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Attributes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Attributes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Attributes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Attributes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Attributes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='AttributeSections', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='AttributeSections', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='AttributeSections', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='AttributeSections', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='AttributeSections', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'AttributeSections', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='AttributeSections', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='AttributeSections', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='AttributeSections', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='AttributeSections', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='AttributeSections', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='AttributeSections', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='AttributeSections', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'AttributeSections', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Constraints', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Constraints', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Constraints', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Constraints', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Constraints', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Constraints', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Methods', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Methods', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Methods', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Methods', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Methods', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Methods', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Methods', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Methods', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Methods', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Methods', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Methods', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Methods', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Methods', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Methods', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Classes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  SetDataType
!!	For SetDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SetDataType
Data type type is  SetDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'SetDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  SetDataType
Data type type is  SetDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': SetDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': SetDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
att_name is inverse for MinorClause(line_label='INVERSE', priority=1, word='inverse', attribute_name='inverse', is_list=False, is_cum=False, special_pattern='', plural='inverse_s', handlers=ParseAttributeReference(), kw_pattern='[_\\*]*inverse[_\\*:]*') is inverse
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
adding name value. inverse -. {'_type': 'AttributeReference', 'class_name': ClassName(content='Class', _type='ClassName'), 'attribute_name': AttributeName(content='basedOn', _type='AttributeName')}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='UniqueKeys', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UniqueKeys', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UniqueKeys', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UniqueKeys', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='UniqueKeys', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'UniqueKeys', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='UniqueKeys', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UniqueKeys', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UniqueKeys', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UniqueKeys', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  SetDataType
!!	For SetDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SetDataType
Data type type is  SetDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='UniqueKeys', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'SetDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  SetDataType
Data type type is  SetDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': SetDataType(element_type=BaseDataType(class_name=ClassName(content='UniqueKeys', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': SetDataType(element_type=BaseDataType(class_name=ClassName(content='UniqueKeys', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'UniqueKeys', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
att_name is inverse for MinorClause(line_label='INVERSE', priority=1, word='inverse', attribute_name='inverse', is_list=False, is_cum=False, special_pattern='', plural='inverse_s', handlers=ParseAttributeReference(), kw_pattern='[_\\*]*inverse[_\\*:]*') is inverse
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
adding name value. inverse -. {'_type': 'AttributeReference', 'class_name': ClassName(content='UniqueKey', _type='ClassName'), 'attribute_name': AttributeName(content='basedOn', _type='AttributeName')}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is dependent of for MinorClause(line_label='DEPENDENT_OF', priority=1, word='dependent of', attribute_name='dependent of', is_list=True, is_cum=True, special_pattern='', plural='dependent of', handlers=ParseNameList(), kw_pattern='[_\\*]*dependent\\s?of[_\\*:]*') is dependent of
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
adding name value. dependent of -. [ClassName(content='Class', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  dependent_of for dependent of
Adding value in ddforpart. dependent_of -. [ClassName(content='Class', _type='ClassName')]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='UpperName', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UpperName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'UpperName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='UpperName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='UpperName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='UpperName', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='UpperName', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'UpperName', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Boolean', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  true

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Boolean', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  true

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Classes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Classes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Classes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Classes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Class.

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Class', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Class', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Class', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Class.

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Class', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Class', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Class', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   ValueType.

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='ValueType', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='ValueType', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='ValueType', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Boolean', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='NameString', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='NameString', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='NameString', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='NameString', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='NameString', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'NameString', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='NameString', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='NameString', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='NameString', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='NameString', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='NameString', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='NameString', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='NameString', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'NameString', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='RichText', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'RichText', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'RichText', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is dependent of for MinorClause(line_label='DEPENDENT_OF', priority=1, word='dependent of', attribute_name='dependent of', is_list=True, is_cum=True, special_pattern='', plural='dependent of', handlers=ParseNameList(), kw_pattern='[_\\*]*dependent\\s?of[_\\*:]*') is dependent of
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
adding name value. dependent of -. [ClassName(content='Class', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  dependent_of for dependent of
Adding value in ddforpart. dependent_of -. [ClassName(content='Class', _type='ClassName')]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Attributes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Attributes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Attributes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Attributes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Attributes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Attributes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Attributes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  each attribute must be a direct or inherited of the base class.

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  no repetitions allowed in keyAttributes
> 👍 **Issue**: introduce PureLists?
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Key

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Key', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Key', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Key', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component.

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
adding name value. based on -. [ClassName(content='Class', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(content='Class', _type='ClassName')]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Boolean', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Attributes

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
adding name value. based on -. [ClassName(content='AttributeSection', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(content='AttributeSection', _type='ClassName')]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='LowerCamel', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='LowerCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='LowerCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='LowerCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='LowerCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'LowerCamel', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='LowerCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='LowerCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='LowerCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='LowerCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='LowerCamel', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='LowerCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='LowerCamel', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'LowerCamel', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is overrides for MinorClause(line_label='OVERRIDES', priority=1, word='overrides', attribute_name='overrides', is_list=False, is_cum=False, special_pattern='', plural='overrides_s', handlers=ParseAttributeReference(), kw_pattern='[_\\*]*overrides[_\\*:]*') is overrides
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
adding name value. overrides -. {'_type': 'AttributeReference', 'class_name': 'CamelName', 'attribute_name': ''}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='DataType', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'DataType', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'DataType', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Boolean', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -. *** False

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='CardinalityCode', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CardinalityCode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CardinalityCode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CardinalityCode', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='CardinalityCode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'CardinalityCode', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='CardinalityCode', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='CardinalityCode', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CardinalityCode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CardinalityCode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CardinalityCode', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='CardinalityCode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='CardinalityCode', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'CardinalityCode', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -. ***  For a singular attribute, the default cardinality is N:1. If the attribute is 1:1, it must be stated explicitly.
For a collective attribute, the default is 1:N. If the attribute is N:M, it must be stated explicitly.
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Inventing name for:  1:1 Author
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'InventedName', '_type': 'ClassName'}, 'as_value_type': {'content': False, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Inventing name for:  N:M Set of Books
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'InventedName', '_type': 'ClassName'}, 'as_value_type': {'content': False, '_type': 'AsValue'}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Boolean', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Boolean', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Boolean', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Boolean', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DERIVATION', priority=1, class_started='Derivation', word='Derivation', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Derivation[_\\*:]*') is one_liner
adding name value. one_liner -.  true if the data type is a class or a simple collection of members of a class.

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Class', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Class', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Class', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Class', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Class', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Class', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Class', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
att_name is one_liner for MajorClause(line_label='DERIVATION', priority=1, class_started='Derivation', word='Derivation', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Derivation[_\\*:]*') is one_liner
adding name value. one_liner -.  from the data type. Null unless arrribute is invertible.

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Attribute', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Attribute', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Attribute', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Attribute', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Attribute', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Attribute', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Attribute', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Attribute', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Attribute', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Attribute', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Attribute', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Attribute', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Attribute', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Attribute', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Attribute', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Derivation', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Derivation', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Derivation', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Derivation', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Derivation', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Derivation', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Derivation', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Derivation', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Derivation', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Derivation', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Derivation', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Derivation', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Derivation', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Derivation', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=True, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Derivation', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': True, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Constraints', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Constraints', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Constraints', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Constraints', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Constraints', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Constraints', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Constraints', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Derivations

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='RichText', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'RichText', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'RichText', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='CodeExpression', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CodeExpression', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CodeExpression', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CodeExpression', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='CodeExpression', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'CodeExpression', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='CodeExpression', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='CodeExpression', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='CodeExpression', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='CodeExpression', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='CodeExpression', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='CodeExpression', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='CodeExpression', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'CodeExpression', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Constraints

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='RichText', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'RichText', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='RichText', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='RichText', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'RichText', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Inventing name for:  e.g., OCL _(CodeExpression
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'InventedName', '_type': 'ClassName'}, 'as_value_type': {'content': False, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Code', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Template', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Template', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Template', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Template', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Template', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Template', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Template', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Constraint

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Constraint', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Constraint', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Constraint', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
adding name value. based on -. [ClassName(content='Class', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(content='Class', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Constraint

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Constraint', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Constraint', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Constraint', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
adding name value. based on -. [ClassName(content='Attribute', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  based_on for based on
Adding value in ddforpart. based_on -. [ClassName(content='Attribute', _type='ClassName')]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Code', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='String', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Methods

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Parameters', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Parameters', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Parameters', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Parameters', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Parameters', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Parameters', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Parameters', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Parameters', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Parameters', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Parameters', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='Parameters', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Parameters', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='Parameters', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'Parameters', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='DataType', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'DataType', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'DataType', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Parameters

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='Component', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='DataType', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'DataType', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='DataType', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='DataType', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'DataType', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Inventing name for:  e.g., optional, required
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='InventedName', _type='ClassName'), 'as_value_type': AsValue(content=False, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='InventedName', _type='ClassName'), as_value_type=AsValue(content=False, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'InventedName', '_type': 'ClassName'}, 'as_value_type': {'content': False, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Class', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Class', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Class', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Class', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Class', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Class', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Class', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Class', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='AggregatingOperator', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='AggregatingOperator', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='AggregatingOperator', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='AggregatingOperator', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='AggregatingOperator', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'AggregatingOperator', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='AggregatingOperator', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='AggregatingOperator', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='AggregatingOperator', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='AggregatingOperator', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='AggregatingOperator', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='AggregatingOperator', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='AggregatingOperator', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'AggregatingOperator', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='DataTypes', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='DataTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='DataTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='DataTypes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='DataTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'DataTypes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='DataTypes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='DataTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='DataTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='DataTypes', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  ListDataType
!!	For ListDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Using dt for dtc:  {'element_type': BaseDataType(class_name=ClassName(content='DataTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), '_type': 'ListDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ListDataType
Data type type is  ListDataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='DataTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': ListDataType(element_type=BaseDataType(class_name=ClassName(content='DataTypes', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'element_type': {'class_name': {'content': 'DataTypes', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Code', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Integer', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Integer', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Integer', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Integer', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Integer', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Integer', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Integer', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Integer', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Integer', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Integer', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Integer', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Integer', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Template', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Template', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Template', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Template', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Template', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Template', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Template', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Template', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   String

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='String', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='String', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='String', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='String', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Must follow the camel case naming convention and not be empty.

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   CamelName

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='CamelName', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='CamelName', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='CamelName', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is where for MinorClause(line_label='WHERE', priority=1, word='where', attribute_name='where', is_list=False, is_cum=False, special_pattern='', plural='where_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*where[_\\*:]*') is where
adding name value. where -.  content begins with an upper case letter.

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   CamelName

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='CamelName', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='CamelName', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='CamelName', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is where for MinorClause(line_label='WHERE', priority=1, word='where', attribute_name='where', is_list=False, is_cum=False, special_pattern='', plural='where_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*where[_\\*:]*') is where
adding name value. where -.  content begins with a lower case letter.

PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   String

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='String', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='String', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='String', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  content consists of CamelNames, separated by periods.  Each of the camel names must be Upper Camel except, possibly, the first.

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   String

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='String', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='String', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='String', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='String', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='Code', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='Code', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   RichText

PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='RichText', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='RichText', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='RichText', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Arg to basedata type is  ClassName(content='String', _type='ClassName')
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AsValue
!!	For AsValue: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AsValue
Pydantic assigning type:  AsValue
PostInit assigning type:  BaseDataType
!!	For BaseDataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
DT returned =  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
DT asdict =  {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}
DT model_dump =  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Using dt for dtc:  {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  BaseDataType
Data type type is  BaseDataType
Created BDT is  BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type type is  BaseDataType
Base Data type is (repr) BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue'))
Base Data type is (model_dump) {'class_name': ClassName(content='String', _type='ClassName'), 'as_value_type': AsValue(content=True, _type='AsValue'), '_type': 'BaseDataType'}
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Crreated dtc {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
setting data_type_clause to model dump {'data_type': BaseDataType(class_name=ClassName(content='String', _type='ClassName'), as_value_type=AsValue(content=True, _type='AsValue')), 'is_optional_lit': IsOptional(content=False, _type='IsOptional'), 'cardinality': None, '_type': 'DataTypeClause'}
or maybe asdict  {'data_type': {'class_name': {'content': 'String', '_type': 'ClassName'}, 'as_value_type': {'content': True, '_type': 'AsValue'}}, 'is_optional_lit': {'content': False, '_type': 'IsOptional'}, 'cardinality': None}
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  must not containa line break or new line character

PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   ValueType
A basic, built-in data type
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubtypingName
!!	For SubtypingName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubtypingName
SubtypeOf result is  [[ClassName(content='ValueTypeABasic', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')], [ClassName(content='BuiltInDataType', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
adding name value. subtype of -. [[ClassName(content='ValueTypeABasic', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')], [ClassName(content='BuiltInDataType', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
Using ATT_NAME  subtype_of for subtype of
Adding value in ddforpart. subtype_of -. [[ClassName(content='ValueTypeABasic', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')], [ClassName(content='BuiltInDataType', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')]]
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  SnakeCase
!!	For SnakeCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SnakeCase
.. full dict saved  in ldm/ldm_models/Literate/Literate_results/Literate_02.dict.yaml
Building class map for module: ldm.Literate_01
Class map is
{   FieldInfo(annotation=str, required=True, init=False): <class 'utils.class_casing.TrainCase'>,
    'Annotation': <class 'ldm.Literate_01.Annotation'>,
    'AsValue': <class 'utils.class_pom_token.AsValue'>,
    'Attribute': <class 'ldm.Literate_01.Attribute'>,
    'AttributeName': <class 'ldm.Literate_01.AttributeName'>,
    'AttributeReference': <class 'ldm.Literate_01.AttributeReference'>,
    'AttributeSection': <class 'ldm.Literate_01.AttributeSection'>,
    'AttributeSectionName': <class 'ldm.Literate_01.AttributeSectionName'>,
    'BaseDataType': <class 'ldm.Literate_01.BaseDataType'>,
    'CamelCase': <class 'utils.class_casing.CamelCase'>,
    'Casing': <class 'utils.class_casing.Casing'>,
    'Class': <class 'ldm.Literate_01.Class'>,
    'ClassName': <class 'ldm.Literate_01.ClassName'>,
    'Class_': <class 'ldm.Literate_01.Class'>,
    'CodeBlock': <class 'ldm.Literate_01.CodeBlock'>,
    'CodeType': <class 'ldm.Literate_01.CodeType'>,
    'Component': <class 'ldm.Literate_01.Component'>,
    'Constraint': <class 'ldm.Literate_01.Constraint'>,
    'DataType': <class 'ldm.Literate_01.DataType'>,
    'DataTypeClause': <class 'ldm.Literate_01.DataTypeClause'>,
    'Default': <class 'ldm.Literate_01.Default'>,
    'Derivation': <class 'ldm.Literate_01.Derivation'>,
    'Diagnostic': <class 'ldm.Literate_01.Diagnostic'>,
    'DotCase': <class 'utils.class_casing.DotCase'>,
    'Emoji': <class 'utils.class_pom_token.Emoji'>,
    'Formula': <class 'ldm.Literate_01.Formula'>,
    'FormulaCoding': <class 'ldm.Literate_01.FormulaCoding'>,
    'IsExclusive': <class 'utils.class_pom_token.IsExclusive'>,
    'IsExhaustive': <class 'utils.class_pom_token.IsExhaustive'>,
    'IsOptional': <class 'utils.class_pom_token.IsOptional'>,
    'Kebab': <class 'utils.class_casing.Kebab'>,
    'Label': <class 'ldm.Literate_01.Label'>,
    'ListDataType': <class 'ldm.Literate_01.ListDataType'>,
    'LiterateModel': <class 'ldm.Literate_01.LiterateModel'>,
    'LowerCamel': <class 'utils.class_casing.LowerCamel'>,
    'MappingDataType': <class 'ldm.Literate_01.MappingDataType'>,
    'MinorComponent': <class 'ldm.Literate_01.MinorComponent'>,
    'ModelName': <class 'ldm.Literate_01.ModelName'>,
    'NTCase': <class 'utils.class_casing.SnakeCase'>,
    'Natural': <class 'ldm.Literate_01.Natural'>,
    'NormalCase': <class 'utils.class_casing.NormalCase'>,
    'OneLiner': <class 'ldm.Literate_01.OneLiner'>,
    'Paragraph': <class 'ldm.Literate_01.Paragraph'>,
    'PascalCase': <class 'utils.class_casing.PascalCase'>,
    'PomTemplate': <class 'utils.class_templates.PomTemplate'>,
    'PresentableBoolean': <class 'utils.class_pom_token.PresentableBoolean'>,
    'PresentableToken': <class 'utils.class_pom_token.PresentableToken'>,
    'ReferenceType': <class 'ldm.Literate_01.ReferenceType'>,
    'SetDataType': <class 'ldm.Literate_01.SetDataType'>,
    'SnakeCase': <class 'utils.class_casing.SnakeCase'>,
    'Subject': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectB': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectC': <class 'ldm.Literate_01.SubjectC'>,
    'SubjectD': <class 'ldm.Literate_01.SubjectD'>,
    'SubjectE': <class 'ldm.Literate_01.SubjectE'>,
    'SubjectName': <class 'ldm.Literate_01.SubjectName'>,
    'Subtyping': <class 'ldm.Literate_01.Subtyping'>,
    'SubtypingName': <class 'ldm.Literate_01.SubtypingName'>,
    'TokenCase': <class 'utils.class_casing.UpperSnake'>,
    'TrainCase': <class 'utils.class_casing.TrainCase'>,
    'UPPER_SNAKE_CASE': <class 'utils.class_casing.UpperSnake'>,
    'UpperCamel': <class 'utils.class_casing.UpperCamel'>,
    'UpperCamelCase': <class 'utils.class_casing.UpperCamel'>,
    'UpperSnake': <class 'utils.class_casing.UpperSnake'>,
    'ValueType': <class 'ldm.Literate_01.ValueType'>,
    'dot_case': <class 'utils.class_casing.DotCase'>,
    'kebab_case': <class 'utils.class_casing.Kebab'>,
    'lowerCamel': <class 'utils.class_casing.LowerCamel'>,
    'pascalCase': <class 'utils.class_casing.PascalCase'>,
    'snake_case': <class 'utils.class_casing.SnakeCase'>,
    'train_case': <class 'utils.class_casing.TrainCase'>}

Phase: Creating model from dictionary - with ObjectCreator: ldm/ldm_models/Literate/Literate_results/Literate_02.dict.yaml
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Derivation
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Derivation
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Derivation
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  AttributeSectionName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Modeling Configuration', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Modeling Configuration', _type='AttributeSectionName'), is_optional = 
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  Paragraph
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  AttributeSectionName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Implied Attributes', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Attribute
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Implied Attributes', _type='AttributeSectionName'), is_optional = 
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Implied Attributes', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Modeling Configuration', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Implied Attributes', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Default
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeSectionName
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Derivation
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Derivation
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  AttributeSectionName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Inverse Attributes', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Inverse Attributes', _type='AttributeSectionName'), is_optional = 
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
Pydantic assigning type:  Paragraph
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  AttributeSectionName
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Override Tracking', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Override Tracking', _type='AttributeSectionName'), is_optional = 
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  Class
!!	For Class: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Class
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  Class
!!	For Class: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Class
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Inverse Attributes', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Override Tracking', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
Pydantic assigning type:  Class
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
Pydantic assigning type:  Class
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
PostInit assigning type:  Class
!!	For Class: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Class
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  Class
!!	For Class: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Class
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  Class
!!	For Class: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Class
Pydantic assigning type:  Paragraph
Pydantic assigning type:  Class
Pydantic assigning type:  Class
Pydantic assigning type:  Class
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  Paragraph
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
Pydantic assigning type:  ClassName
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  AttributeName
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
Pydantic assigning type:  ClassName
Pydantic assigning type:  Paragraph
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
Pydantic assigning type:  Paragraph
Pydantic assigning type:  Paragraph
Pydantic assigning type:  CodeBlock
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  CodeBlock
Pydantic assigning type:  Paragraph
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  SubjectC
!!	For SubjectC: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectC
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  SubjectC
!!	For SubjectC: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectC
PostInit assigning type:  SubjectName
!!	For SubjectName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectName
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Modeling Configuration', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  ClassName
Pydantic assigning type:  AttributeName
PostInit assigning type:  AttributeReference
!!	For AttributeReference: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeReference
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Implied Attributes', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Default
!!	For Default: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Default
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
Pydantic assigning type:  OneLiner
PostInit assigning type:  Derivation
!!	For Derivation: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Derivation
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Inverse Attributes', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  AttributeSectionName
!!	For AttributeSectionName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSectionName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeSection
!!	For AttributeSection: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeSection
In AttSection post-init for AttributeSectionName(content='Override Tracking', _type='AttributeSectionName'), is_optional = None
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  Class
!!	For Class: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Class
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  Class
!!	For Class: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Class
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  Class
!!	For Class: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Class
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  Class
!!	For Class: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Class
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  Class
!!	For Class: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Class
PostInit assigning type:  SubjectC
!!	For SubjectC: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectC
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  Attribute
!!	For Attribute: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Attribute
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  AttributeName
!!	For AttributeName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  AttributeName
PostInit assigning type:  DataType
!!	For DataType: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataType
Data type type is  DataType
PostInit assigning type:  IsOptional
!!	For IsOptional: Using PYDANTIC, but post_init was called
Pydantic assigning type:  IsOptional
PostInit assigning type:  DataTypeClause
!!	For DataTypeClause: Using PYDANTIC, but post_init was called
Pydantic assigning type:  DataTypeClause
PostInit assigning type:  OneLiner
!!	For OneLiner: Using PYDANTIC, but post_init was called
Pydantic assigning type:  OneLiner
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  ClassName
!!	For ClassName: Using PYDANTIC, but post_init was called
Pydantic assigning type:  ClassName
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  SubjectD
!!	For SubjectD: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectD
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  SubjectD
!!	For SubjectD: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectD
PostInit assigning type:  SubjectC
!!	For SubjectC: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectC
PostInit assigning type:  Paragraph
!!	For Paragraph: Using PYDANTIC, but post_init was called
Pydantic assigning type:  Paragraph
PostInit assigning type:  CodeBlock
!!	For CodeBlock: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CodeBlock
PostInit assigning type:  CamelCase
!!	For CamelCase: Using PYDANTIC, but post_init was called
Pydantic assigning type:  CamelCase
PostInit assigning type:  SubjectC
!!	For SubjectC: Using PYDANTIC, but post_init was called
Pydantic assigning type:  SubjectC
Created model: <class 'dict'>

Phase: ldm model is merely a dict - stopping!
