Generate schema

Phase: Parsing model: ldm/ldm_models/Literate/Literate.md
PARSING ldm/ldm_models/Literate/Literate.md

Phase: Deriving dict for model
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  name

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  false

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributesections'
att_name_for_part is attributesections
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
adding name value. based on -. [ClassName(content='Literate Data Model', _type='ClassName', as_entered='')]
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  based on label

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
adding name value. based on -. [ClassName(content='Component', _type='ClassName', as_entered='')]
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  from annotationType

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  from annotation type

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  false

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributesections'
att_name_for_part is attributesections
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  subjectbs'
att_name_for_part is subjects
att_name is abbreviation for MinorClause(line_label='ABBREVIATION', priority=1, word='abbreviation', attribute_name='abbreviation', is_list=False, is_cum=False, special_pattern='', plural='abbreviation_s', handlers=ParseName(), kw_pattern='[_\\*]*abbreviation[_\\*:]*') is abbreviation
adding name value. abbreviation -. LDM
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  LiterateDataModels

att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

SubtypeOf result is  [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DERIVATION', priority=1, class_started='Derivation', word='Derivation', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Derivation[_\\*:]*') is one_liner
adding name value. one_liner -.  gathering s.allSubjects over s in subjectAreas

Using singular atttribute name:  Derivation
att_name_for_part is Derivation
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Subject names must be unique across the model.

Using plural atttribute name:  constraints'
att_name_for_part is constraints
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DERIVATION', priority=1, class_started='Derivation', word='Derivation', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Derivation[_\\*:]*') is one_liner
adding name value. one_liner -.  gathering s.allClasses over s in allSubjects.

Using singular atttribute name:  Derivation
att_name_for_part is Derivation
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Class names must be unique across the model.

Using plural atttribute name:  constraints'
att_name_for_part is constraints
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  OCL

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  Handlebars

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DERIVATION', priority=1, class_started='Derivation', word='Derivation', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Derivation[_\\*:]*') is one_liner
adding name value. one_liner -.  ['aiEnglishPlural()']

Using singular atttribute name:  Derivation
att_name_for_part is Derivation
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributesections'
att_name_for_part is attributesections
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Subjects

att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

SubtypeOf result is  [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is dependent of for MinorClause(line_label='DEPENDENT_OF', priority=1, word='dependent of', attribute_name='dependent of', is_list=True, is_cum=True, special_pattern='', plural='dependent of', handlers=ParseNameList(), kw_pattern='[_\\*]*dependent\\s?of[_\\*:]*') is dependent of
adding name value. dependent of -. [ClassName(content='LiterateDataModel', _type='ClassName', as_entered='')]
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is inverse for MinorClause(line_label='INVERSE', priority=1, word='inverse', attribute_name='inverse', is_list=False, is_cum=False, special_pattern='', plural='inverse_s', handlers=ParseAttributeReference(), kw_pattern='[_\\*]*inverse[_\\*:]*') is inverse
adding name value. inverse -. {'_type': 'AttributeReference', 'class_name': ClassName(content='Subject', _type='ClassName', as_entered=''), 'attribute_name': AttributeName(content='parentSubject.', _type='AttributeName', as_entered='')}
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  SubjectAreas

att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Subject

SubtypeOf result is  [[ClassName(content='Subject', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Subject', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is where for MinorClause(line_label='WHERE', priority=1, word='where', attribute_name='where', is_list=False, is_cum=False, special_pattern='', plural='where_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*where[_\\*:]*') is where
adding name value. where -.  parentSubject is absent

Using plural atttribute name:  classes
att_name_for_part is classes
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Classes

att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

SubtypeOf result is  [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Within each Class, attribute names must be unique.

Using plural atttribute name:  constraints'
att_name_for_part is constraints
Using plural atttribute name:  annotations'
att_name_for_part is annotations
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  the regular plural, formed by adding "s" or "es".

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is inverse for MinorClause(line_label='INVERSE', priority=1, word='inverse', attribute_name='inverse', is_list=False, is_cum=False, special_pattern='', plural='inverse_s', handlers=ParseAttributeReference(), kw_pattern='[_\\*]*inverse[_\\*:]*') is inverse
adding name value. inverse -. {'_type': 'AttributeReference', 'class_name': ClassName(content='Class', _type='ClassName', as_entered=''), 'attribute_name': AttributeName(content='basedOn', _type='AttributeName', as_entered='')}
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is inverse for MinorClause(line_label='INVERSE', priority=1, word='inverse', attribute_name='inverse', is_list=False, is_cum=False, special_pattern='', plural='inverse_s', handlers=ParseAttributeReference(), kw_pattern='[_\\*]*inverse[_\\*:]*') is inverse
adding name value. inverse -. {'_type': 'AttributeReference', 'class_name': ClassName(content='UniqueKey', _type='ClassName', as_entered=''), 'attribute_name': AttributeName(content='basedOn', _type='AttributeName', as_entered='')}
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributesections'
att_name_for_part is attributesections
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is dependent of for MinorClause(line_label='DEPENDENT_OF', priority=1, word='dependent of', attribute_name='dependent of', is_list=True, is_cum=True, special_pattern='', plural='dependent of', handlers=ParseNameList(), kw_pattern='[_\\*]*dependent\\s?of[_\\*:]*') is dependent of
adding name value. dependent of -. [ClassName(content='Class', _type='ClassName', as_entered='')]
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  true

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -.  true

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Class.

SubtypeOf result is  [[ClassName(content='Class.', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Class.', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Class.

SubtypeOf result is  [[ClassName(content='Class.', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Class.', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   ValueType.

SubtypeOf result is  [[ClassName(content='ValueType.', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='ValueType.', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

SubtypeOf result is  [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is dependent of for MinorClause(line_label='DEPENDENT_OF', priority=1, word='dependent of', attribute_name='dependent of', is_list=True, is_cum=True, special_pattern='', plural='dependent of', handlers=ParseNameList(), kw_pattern='[_\\*]*dependent\\s?of[_\\*:]*') is dependent of
adding name value. dependent of -. [ClassName(content='Class', _type='ClassName', as_entered='')]
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  each attribute must be a direct or inherited of the base class.

Using plural atttribute name:  constraints'
att_name_for_part is constraints
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  no repetitions allowed in keyAttributes
> 👍 **Issue**: introduce PureLists?
Using plural atttribute name:  constraints'
att_name_for_part is constraints
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Key

SubtypeOf result is  [[ClassName(content='Key', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Key', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  subjectcs'
att_name_for_part is subjects
Using plural atttribute name:  subjectbs'
att_name_for_part is subjects
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component.

SubtypeOf result is  [[ClassName(content='Component.', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Component.', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
adding name value. based on -. [ClassName(content='Class', _type='ClassName', as_entered='')]
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Attributes

att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

SubtypeOf result is  [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
adding name value. based on -. [ClassName(content='AttributeSection', _type='ClassName', as_entered='')]
att_name is overrides for MinorClause(line_label='OVERRIDES', priority=1, word='overrides', attribute_name='overrides', is_list=False, is_cum=False, special_pattern='', plural='overrides_s', handlers=ParseAttributeReference(), kw_pattern='[_\\*]*overrides[_\\*:]*') is overrides
adding name value. overrides -. {'_type': 'AttributeReference', 'class_name': 'CamelName', 'attribute_name': ''}
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -. *** False

Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DEFAULT', priority=1, class_started='Default', word='Default', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Default[_\\*:]*') is one_liner
adding name value. one_liner -. ***  For a singular attribute, the default cardinality is N:1. If the attribute is 1:1, it must be stated explicitly.
For a collective attribute, the default is 1:N. If the attribute is N:M, it must be stated explicitly.
Using singular atttribute name:  Default
att_name_for_part is Default
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Inventing name for:  1:1 Author
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Inventing name for:  N:M Set of Books
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributesections'
att_name_for_part is attributesections
att_name is one_liner for MajorClause(line_label='DERIVATION', priority=1, class_started='Derivation', word='Derivation', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Derivation[_\\*:]*') is one_liner
adding name value. one_liner -.  true if the data type is a class or a simple collection of members of a class.

Using singular atttribute name:  Derivation
att_name_for_part is Derivation
Using plural atttribute name:  attributes'
att_name_for_part is attributes
att_name is one_liner for MajorClause(line_label='DERIVATION', priority=1, class_started='Derivation', word='Derivation', attribute_name='one_liner', is_list=False, is_cum=False, special_pattern='', plural='one_liner_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*Derivation[_\\*:]*') is one_liner
adding name value. one_liner -.  from the data type. Null unless arrribute is invertible.

Using singular atttribute name:  Derivation
att_name_for_part is Derivation
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributesections'
att_name_for_part is attributesections
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributesections'
att_name_for_part is attributesections
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Derivations

Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Constraints

att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

SubtypeOf result is  [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Inventing name for:  e.g., OCL _(CodeExpression
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Constraint

SubtypeOf result is  [[ClassName(content='Constraint', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Constraint', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
adding name value. based on -. [ClassName(content='Class.', _type='ClassName', as_entered='')]
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Constraint

SubtypeOf result is  [[ClassName(content='Constraint', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Constraint', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is based on for MinorClause(line_label='BASED_ON', priority=1, word='based on', attribute_name='based on', is_list=True, is_cum=True, special_pattern='', plural='based on', handlers=ParseNameList(), kw_pattern='[_\\*]*based\\s?on[_\\*:]*') is based on
adding name value. based on -. [ClassName(content='Attribute', _type='ClassName', as_entered='')]
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  subjectbs'
att_name_for_part is subjects
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Methods

att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

SubtypeOf result is  [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is plural for MinorClause(line_label='PLURAL', priority=1, word='plural', attribute_name='plural', is_list=False, is_cum=False, special_pattern='', plural='plural_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*plural[_\\*:]*') is plural
adding name value. plural -.  Parameters

att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   Component

SubtypeOf result is  [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='Component', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Inventing name for:  e.g., optional, required
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  subjectbs'
att_name_for_part is subjects
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  subjectbs'
att_name_for_part is subjects
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   String

SubtypeOf result is  [[ClassName(content='String', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='String', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Must follow the camel case naming convention and not be empty.

Using plural atttribute name:  constraints'
att_name_for_part is constraints
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   CamelName

SubtypeOf result is  [[ClassName(content='CamelName', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='CamelName', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is where for MinorClause(line_label='WHERE', priority=1, word='where', attribute_name='where', is_list=False, is_cum=False, special_pattern='', plural='where_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*where[_\\*:]*') is where
adding name value. where -.  content begins with an upper case letter.

Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   CamelName

SubtypeOf result is  [[ClassName(content='CamelName', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='CamelName', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is where for MinorClause(line_label='WHERE', priority=1, word='where', attribute_name='where', is_list=False, is_cum=False, special_pattern='', plural='where_s', handlers=ParseTrivial(), kw_pattern='[_\\*]*where[_\\*:]*') is where
adding name value. where -.  content begins with a lower case letter.

Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   String

SubtypeOf result is  [[ClassName(content='String', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='String', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  content consists of CamelNames, separated by periods.  Each of the camel names must be Upper Camel except, possibly, the first.

Using plural atttribute name:  constraints'
att_name_for_part is constraints
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   String

SubtypeOf result is  [[ClassName(content='String', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='String', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   RichText

SubtypeOf result is  [[ClassName(content='RichText', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='RichText', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
att_name is constraint for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is constraint
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  must not containa line break or new line character

Using plural atttribute name:  constraints'
att_name_for_part is constraints
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  classes
att_name_for_part is classes
att_name is subtype of for MinorClause(line_label='SUBTYPE_OF', priority=1, word='subtype of', attribute_name='subtype of', is_list=True, is_cum=True, special_pattern='', plural='subtype of', handlers=ParseSubtypeOf(), kw_pattern='[_\\*]*subtype\\s?of[_\\*:]*') is subtype of
parsing subtypeOfs:   ValueType
A basic, built-in data type
SubtypeOf result is  [[ClassName(content='ValueType\nA basic', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')], [ClassName(content='built-in data type', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
adding name value. subtype of -. [[ClassName(content='ValueType\nA basic', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')], [ClassName(content='built-in data type', _type='ClassName', as_entered=''), SubtypingName(content='Subtypes', _type='SubtypingName', as_entered='')]]
Using plural atttribute name:  annotations'
att_name_for_part is annotations
Using plural atttribute name:  classes
att_name_for_part is classes
Using plural atttribute name:  subjectbs'
att_name_for_part is subjects
Using plural atttribute name:  subjectcs'
att_name_for_part is subjects
Using plural atttribute name:  subjectcs'
att_name_for_part is subjects
Using plural atttribute name:  subjectbs'
att_name_for_part is subjects
Using plural atttribute name:  subjectbs'
att_name_for_part is subjects
Using plural atttribute name:  literatemodels'
att_name_for_part is literatemodels
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
Using plural atttribute name:  attributes'
att_name_for_part is attributes
.. full dict saved  in ldm/ldm_models/Literate/Literate_results/Literate.dict.yaml
Building class map for module: ldm.Literate_01
Class map is
{   FieldInfo(annotation=str, required=False, default='PresentableToken', init=False): <class 'utils.class_pom_token.PresentableToken'>,
    FieldInfo(annotation=str, required=False, default='PresentableBoolean', init=False): <class 'utils.class_pom_token.PresentableBoolean'>,
    FieldInfo(annotation=str, required=False, default='IsOptional', init=False): <class 'utils.class_pom_token.IsOptional'>,
    FieldInfo(annotation=str, required=False, default='IsExclusive', init=False): <class 'utils.class_pom_token.IsExclusive'>,
    FieldInfo(annotation=str, required=False, default='IsExhaustive', init=False): <class 'utils.class_pom_token.IsExhaustive'>,
    FieldInfo(annotation=str, required=False, default='AsValue', init=False): <class 'utils.class_pom_token.AsValue'>,
    FieldInfo(annotation=str, required=False, default='Emoji', init=False): <class 'utils.class_pom_token.Emoji'>,
    'Annotation': <class 'ldm.Literate_01.Annotation'>,
    'AsValue': <class 'utils.class_pom_token.AsValue'>,
    'Attribute': <class 'ldm.Literate_01.Attribute'>,
    'AttributeName': <class 'ldm.Literate_01.AttributeName'>,
    'AttributeReference': <class 'ldm.Literate_01.AttributeReference'>,
    'AttributeSection': <class 'ldm.Literate_01.AttributeSection'>,
    'AttributeSectionName': <class 'ldm.Literate_01.AttributeSectionName'>,
    'BaseDataType': <class 'ldm.Literate_01.BaseDataType'>,
    'CamelCase': <class 'utils.class_casing.CamelCase'>,
    'Casing': <class 'utils.class_casing.Casing'>,
    'Class': <class 'ldm.Literate_01.Class'>,
    'ClassName': <class 'ldm.Literate_01.ClassName'>,
    'Class_': <class 'ldm.Literate_01.Class'>,
    'CodeBlock': <class 'ldm.Literate_01.CodeBlock'>,
    'CodeType': <class 'ldm.Literate_01.CodeType'>,
    'Component': <class 'ldm.Literate_01.Component'>,
    'Constraint': <class 'ldm.Literate_01.Constraint'>,
    'DataType': <class 'ldm.Literate_01.SetDataType'>,
    'DataTypeClause': <class 'ldm.Literate_01.DataTypeClause'>,
    'Default': <class 'ldm.Literate_01.Default'>,
    'Derivation': <class 'ldm.Literate_01.Derivation'>,
    'Diagnostic': <class 'ldm.Literate_01.Diagnostic'>,
    'DotCase': <class 'utils.class_casing.DotCase'>,
    'Emoji': <class 'utils.class_pom_token.Emoji'>,
    'Formula': <class 'ldm.Literate_01.Formula'>,
    'FormulaCoding': <class 'ldm.Literate_01.FormulaCoding'>,
    'IsExclusive': <class 'utils.class_pom_token.IsExclusive'>,
    'IsExhaustive': <class 'utils.class_pom_token.IsExhaustive'>,
    'IsOptional': <class 'utils.class_pom_token.IsOptional'>,
    'Kebab': <class 'utils.class_casing.Kebab'>,
    'Label': <class 'ldm.Literate_01.Label'>,
    'ListDataType': <class 'ldm.Literate_01.ListDataType'>,
    'LiterateModel': <class 'ldm.Literate_01.LiterateModel'>,
    'LowerCamel': <class 'utils.class_casing.LowerCamel'>,
    'MappingDataType': <class 'ldm.Literate_01.MappingDataType'>,
    'MinorComponent': <class 'ldm.Literate_01.MinorComponent'>,
    'ModelName': <class 'ldm.Literate_01.ModelName'>,
    'NTCase': <class 'utils.class_casing.SnakeCase'>,
    'Natural': <class 'ldm.Literate_01.OneLiner'>,
    'NormalCase': <class 'utils.class_casing.NormalCase'>,
    'OneLiner': <class 'ldm.Literate_01.OneLiner'>,
    'Paragraph': <class 'ldm.Literate_01.Paragraph'>,
    'PascalCase': <class 'utils.class_casing.PascalCase'>,
    'PomTemplate': <class 'utils.class_templates.PomTemplate'>,
    'PresentableBoolean': <class 'utils.class_pom_token.PresentableBoolean'>,
    'PresentableToken': <class 'utils.class_pom_token.PresentableToken'>,
    'ReferenceType': <class 'ldm.Literate_01.ReferenceType'>,
    'SetDataType': <class 'ldm.Literate_01.SetDataType'>,
    'SnakeCase': <class 'utils.class_casing.SnakeCase'>,
    'Subject': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectB': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectC': <class 'ldm.Literate_01.SubjectC'>,
    'SubjectD': <class 'ldm.Literate_01.SubjectD'>,
    'SubjectE': <class 'ldm.Literate_01.SubjectE'>,
    'SubjectName': <class 'ldm.Literate_01.SubjectName'>,
    'Subtyping': <class 'ldm.Literate_01.Subtyping'>,
    'SubtypingName': <class 'ldm.Literate_01.SubtypingName'>,
    'TokenCase': <class 'utils.class_casing.UpperSnake'>,
    'TrainCase': <class 'utils.class_casing.TrainCase'>,
    'UPPER_SNAKE_CASE': <class 'utils.class_casing.UpperSnake'>,
    'UpperCamel': <class 'utils.class_casing.UpperCamel'>,
    'UpperCamelCase': <class 'utils.class_casing.UpperCamel'>,
    'UpperSnake': <class 'utils.class_casing.UpperSnake'>,
    'ValueType': <class 'ldm.Literate_01.ValueType'>,
    'dot_case': <class 'utils.class_casing.DotCase'>,
    'kebab_case': <class 'utils.class_casing.Kebab'>,
    'lowerCamel': <class 'utils.class_casing.LowerCamel'>,
    'pascalCase': <class 'utils.class_casing.PascalCase'>,
    'snake_case': <class 'utils.class_casing.SnakeCase'>,
    'train_case': <class 'utils.class_casing.TrainCase'>}

Phase: Creating model from dictionary: ldm/ldm_models/Literate/Literate_results/Literate.dict.yaml
Created model: <class 'ldm.Literate_01.LiterateModel'>

Phase: Using pydantic to create model
Printing stack trace using traceback.print_exc():
Traceback (most recent call last):
  File "C:\Users\fmkat\OneDrive\AllFMKFIles\AllVSCode\FMKProjects\Presentable\ldm\do_build_ldm.py", line 375, in <module>
    build_dull_dsl(ldm_dull_specs)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^
  File "C:\Users\fmkat\OneDrive\AllFMKFIles\AllVSCode\FMKProjects\Presentable\dull_dsl\dull_build.py", line 96, in build_dull_dsl
    the_ldm_model_py = LiterateModel.model_validate(the_ldm_dict)
  File "C:\Users\fmkat\OneDrive\AllFMKFIles\AllVSCode\FMKProjects\Presentable\utils\util_pydantic.py", line 17, in model_validate
    return adapter.validate_python(data)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Users\fmkat\OneDrive\AllFMKFIles\AllVSCode\FMKProjects\Presentable\.venv\Lib\site-packages\pydantic\type_adapter.py", line 421, in validate_python
    return self.validator.validate_python(
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        object,
        ^^^^^^^
    ...<5 lines>...
        by_name=by_name,
        ^^^^^^^^^^^^^^^^
    )
    ^
  File "C:\Users\fmkat\OneDrive\AllFMKFIles\AllVSCode\FMKProjects\Presentable\utils\class_casing.py", line 75, in validate_and_process
    self.as_entered = self.content
                      ^^^^^^^^^^^^
AttributeError: 'CamelCase' object has no attribute 'content'. Did you mean: 'convert'?
