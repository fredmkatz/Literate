{
  "_type": "Document",
  "literate_models": [
    {
      "_type": "LiterateModel",
      "prefix": "#",
      "name": {
        "content": "Literate Tester",
        "_type": "SubjectName"
      },
      "parenthetical": "",
      "elaboration": [
        {
          "_type": "Paragraph",
          "content": "This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n"
        }
      ],
      "subjects": [
        {
          "_type": "SubjectB",
          "prefix": "##",
          "name": {
            "content": "Sample Classes",
            "_type": "SubjectName"
          },
          "one_liner": {
            "_type": "OneLiner",
            "content": "with a one liner for the subject, spanning\ntwo lines"
          },
          "parenthetical": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "And an elaboration, with a few paragraphs\n"
            },
            {
              "_type": "Paragraph",
              "content": "Paragraph 2\n"
            },
            {
              "_type": "Paragraph",
              "content": "Paragraph 3\n"
            }
          ],
          "subjects": [
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Header B",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "subjects": [
                {
                  "_type": "SubjectD",
                  "prefix": "####",
                  "name": {
                    "content": "Header C",
                    "_type": "SubjectName"
                  },
                  "parenthetical": ""
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Editions",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "classes": [
                {
                  "_type": "Class",
                  "prefix": "_",
                  "name": {
                    "content": "Edition",
                    "_type": "ClassName"
                  },
                  "one_liner": {
                    "_type": "OneLiner",
                    "content": "a manifestation of a literary work"
                  },
                  "parenthetical": "",
                  "based_on": [
                    {
                      "content": "LiteraryWork",
                      "_type": "ClassName"
                    },
                    {
                      "content": "OtherBase",
                      "_type": "ClassName"
                    }
                  ],
                  "attributes": [
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "title",
                        "_type": "AttributeName"
                      },
                      "one_liner": {
                        "_type": "OneLiner",
                        "content": "the title, as shown on the book's title page"
                      },
                      "parenthetical": "Full Title",
                      "data_type_clause": {
                        "data_type": {
                          "_type": "BaseDataType",
                          "class_name": {
                            "content": "FullTitle",
                            "_type": "ClassName"
                          },
                          "as_value_type": {
                            "t_value": false,
                            "_type": "AsValue"
                          }
                        },
                        "is_optional_lit": {
                          "t_value": false,
                          "_type": "IsOptional"
                        },
                        "_type": "DataTypeClause"
                      },
                      "default": {
                        "_type": "Default",
                        "one_liner": {
                          "_type": "OneLiner",
                          "content": " the title of the Work of which this is an edition\n"
                        },
                        "code": " baseWork.title\n"
                      }
                    },
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "author",
                        "_type": "AttributeName"
                      },
                      "one_liner": {
                        "_type": "OneLiner",
                        "content": "the writer"
                      },
                      "parenthetical": "Person",
                      "data_type_clause": {
                        "data_type": {
                          "_type": "BaseDataType",
                          "class_name": {
                            "content": "Person",
                            "_type": "ClassName"
                          },
                          "as_value_type": {
                            "t_value": false,
                            "_type": "AsValue"
                          }
                        },
                        "is_optional_lit": {
                          "t_value": false,
                          "_type": "IsOptional"
                        },
                        "_type": "DataTypeClause"
                      }
                    },
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "illustrators",
                        "_type": "AttributeName"
                      },
                      "one_liner": {
                        "_type": "OneLiner",
                        "content": "artists who supplied the pictures"
                      },
                      "parenthetical": "List of People",
                      "data_type_clause": {
                        "data_type": {
                          "_type": "ListDataType",
                          "element_type": {
                            "_type": "BaseDataType",
                            "class_name": {
                              "content": "People",
                              "_type": "ClassName"
                            },
                            "as_value_type": {
                              "t_value": false,
                              "_type": "AsValue"
                            }
                          }
                        },
                        "is_optional_lit": {
                          "t_value": false,
                          "_type": "IsOptional"
                        },
                        "_type": "DataTypeClause"
                      }
                    }
                  ],
                  "attribute_sections": [
                    {
                      "_type": "AttributeSection",
                      "prefix": "__",
                      "name": {
                        "content": "Optional Publication Details",
                        "_type": "AttributeSectionName"
                      },
                      "parenthetical": "",
                      "is_optional": {
                        "t_value": true,
                        "_type": "IsOptional"
                      },
                      "attributes": [
                        {
                          "_type": "Attribute",
                          "prefix": "-",
                          "name": {
                            "content": "datePublished",
                            "_type": "AttributeName"
                          },
                          "one_liner": {
                            "_type": "OneLiner",
                            "content": "when the edition was released to the public"
                          },
                          "parenthetical": "BiblioDate",
                          "data_type_clause": {
                            "data_type": {
                              "_type": "BaseDataType",
                              "class_name": {
                                "content": "BiblioDate",
                                "_type": "ClassName"
                              },
                              "as_value_type": {
                                "t_value": false,
                                "_type": "AsValue"
                              }
                            },
                            "is_optional_lit": {
                              "t_value": false,
                              "_type": "IsOptional"
                            },
                            "_type": "DataTypeClause"
                          }
                        }
                      ]
                    },
                    {
                      "_type": "AttributeSection",
                      "prefix": "__",
                      "name": {
                        "content": "Required Format Details",
                        "_type": "AttributeSectionName"
                      },
                      "parenthetical": "",
                      "is_optional": {
                        "t_value": false,
                        "_type": "IsOptional"
                      },
                      "attributes": [
                        {
                          "_type": "Attribute",
                          "prefix": "-",
                          "name": {
                            "content": "numberOfPages",
                            "_type": "AttributeName"
                          },
                          "one_liner": {
                            "_type": "OneLiner",
                            "content": "last page number"
                          },
                          "parenthetical": "optional Integer",
                          "data_type_clause": {
                            "data_type": {
                              "_type": "BaseDataType",
                              "class_name": {
                                "content": "Integer",
                                "_type": "ClassName"
                              },
                              "as_value_type": {
                                "t_value": false,
                                "_type": "AsValue"
                              }
                            },
                            "is_optional_lit": {
                              "t_value": false,
                              "_type": "IsOptional"
                            },
                            "_type": "DataTypeClause"
                          }
                        }
                      ]
                    },
                    {
                      "_type": "AttributeSection",
                      "prefix": "__",
                      "name": {
                        "content": "Unsaid Other Details",
                        "_type": "AttributeSectionName"
                      },
                      "parenthetical": "",
                      "attributes": [
                        {
                          "_type": "Attribute",
                          "prefix": "-",
                          "name": {
                            "content": "datePublished",
                            "_type": "AttributeName"
                          },
                          "one_liner": {
                            "_type": "OneLiner",
                            "content": "when the edition was released to the public"
                          },
                          "parenthetical": "BiblioDate",
                          "data_type_clause": {
                            "data_type": {
                              "_type": "BaseDataType",
                              "class_name": {
                                "content": "BiblioDate",
                                "_type": "ClassName"
                              },
                              "as_value_type": {
                                "t_value": false,
                                "_type": "AsValue"
                              }
                            },
                            "is_optional_lit": {
                              "t_value": false,
                              "_type": "IsOptional"
                            },
                            "_type": "DataTypeClause"
                          },
                          "elaboration": [
                            {
                              "_type": "Paragraph",
                              "content": "Just use Mermaid in code block\n"
                            },
                            {
                              "_type": "CodeBlock",
                              "content": "``` notmermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n\n```"
                            },
                            {
                              "_type": "Paragraph",
                              "content": "And here's the result\n"
                            },
                            {
                              "_type": "CodeBlock",
                              "content": "```mermaid\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```"
                            },
                            {
                              "_type": "CodeBlock",
                              "content": "``` mermaid\n\nerDiagram\nCAR {\nstring registrationNumber\nstring make\nstring model\n}\nPERSON {\nstring firstName\nstring lastName\nint age\n}\n\nstyle CAR fill:#f9f,stroke:#333,stroke-width:4px\n\n\n```"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "_type": "Class",
                  "prefix": "_",
                  "name": {
                    "content": "HardcoverEdition",
                    "_type": "ClassName"
                  },
                  "parenthetical": "",
                  "subtype_of": [
                    "UnserializablePiece",
                    "UnserializablePiece"
                  ],
                  "elaboration": [
                    {
                      "_type": "CodeBlock",
                      "content": "``` mermaid\nerDiagram\n\n\nclass Subject Component\nclass Section Component\nclass Attribute Component\nclass Class Component\n\nSUBJECT {\nstring name\n\n}\nSubject ||--|{ Subject : contains\nSubject ||--|{ Class : contains\nClass {\nstring name\n}\n\nClass ||--|{ Section : contains\nClass ||--|{ Attribute : contains\nAttribute {\n\nstring name\n}\nSection ||--|{ Attribute : contains\n\n\n\n```"
                    }
                  ]
                },
                {
                  "_type": "Class",
                  "prefix": "_",
                  "name": {
                    "content": "PaperbackEdition",
                    "_type": "ClassName"
                  },
                  "parenthetical": "",
                  "subtype_of": [
                    "UnserializablePiece",
                    "UnserializablePiece"
                  ],
                  "elaboration": [
                    {
                      "_type": "Paragraph",
                      "content": "And in the elaboration, a figure:\n"
                    },
                    {
                      "_type": "Paragraph",
                      "content": "<figure title=\"Title on the Figure tag\">\n \n+ <img src=\"../hard_assets/FMKNYIDFrontIMG_1141.jpg\" alt=\"Trulli\" style=\"width:30%\">\n \n+ <figcaption>Fig.1 - Trulli, Puglia, Italy.</figcaption>\n \n+ </figure>\n \n+ And the same figure with figure/caption markup\n"
                    },
                    {
                      "_type": "Paragraph",
                      "content": "<figure >\n \n+ <img src=\"../hard_assets/FMKNYIDFrontIMG_1141.jpg\" title=\"Title on Image\" style=\"width:20%\">\n \n+ <figcaption>My Non-Drivers License</figcaption>\n \n+ </figure>\n \n+ and a list of codes\n"
                    },
                    {
                      "_type": "CodeBlock",
                      "content": "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"
                    }
                  ]
                },
                {
                  "_type": "Class",
                  "prefix": "_",
                  "name": {
                    "content": "ElectronicEdition",
                    "_type": "ClassName"
                  },
                  "parenthetical": "",
                  "subtype_of": [
                    "UnserializablePiece"
                  ],
                  "attributes": [
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "eFormat",
                        "_type": "AttributeName"
                      },
                      "one_liner": {
                        "_type": "OneLiner",
                        "content": "the precise medium for the electronic edition"
                      },
                      "parenthetical": "Code",
                      "data_type_clause": {
                        "data_type": {
                          "_type": "BaseDataType",
                          "class_name": {
                            "content": "Code",
                            "_type": "ClassName"
                          },
                          "as_value_type": {
                            "t_value": false,
                            "_type": "AsValue"
                          }
                        },
                        "is_optional_lit": {
                          "t_value": false,
                          "_type": "IsOptional"
                        },
                        "_type": "DataTypeClause"
                      },
                      "elaboration": [
                        {
                          "_type": "CodeBlock",
                          "content": "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"
                        }
                      ]
                    }
                  ]
                },
                {
                  "_type": "CodeType",
                  "prefix": "Code Type:",
                  "name": {
                    "content": "EBookFormat",
                    "_type": "ClassName"
                  },
                  "one_liner": {
                    "_type": "OneLiner",
                    "content": "the precise medium for the electronic edition"
                  },
                  "parenthetical": "",
                  "elaboration": [
                    {
                      "_type": "CodeBlock",
                      "content": "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"
                    }
                  ]
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Addresses",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "classes": [
                {
                  "_type": "ValueType",
                  "prefix": "Value Type:",
                  "name": {
                    "content": "Address",
                    "_type": "ClassName"
                  },
                  "one_liner": {
                    "_type": "OneLiner",
                    "content": "a US Street address"
                  },
                  "parenthetical": "",
                  "attributes": [
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "streetAddress",
                        "_type": "AttributeName"
                      },
                      "one_liner": {
                        "_type": "OneLiner",
                        "content": "usually the street and number"
                      },
                      "parenthetical": "Text",
                      "data_type_clause": {
                        "data_type": {
                          "_type": "BaseDataType",
                          "class_name": {
                            "content": "Text",
                            "_type": "ClassName"
                          },
                          "as_value_type": {
                            "t_value": false,
                            "_type": "AsValue"
                          }
                        },
                        "is_optional_lit": {
                          "t_value": false,
                          "_type": "IsOptional"
                        },
                        "_type": "DataTypeClause"
                      }
                    },
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "streetAddress",
                        "_type": "AttributeName"
                      },
                      "one_liner": {
                        "_type": "OneLiner",
                        "content": "usually the apartment or unit number"
                      },
                      "parenthetical": "Text",
                      "data_type_clause": {
                        "data_type": {
                          "_type": "BaseDataType",
                          "class_name": {
                            "content": "Text",
                            "_type": "ClassName"
                          },
                          "as_value_type": {
                            "t_value": false,
                            "_type": "AsValue"
                          }
                        },
                        "is_optional_lit": {
                          "t_value": false,
                          "_type": "IsOptional"
                        },
                        "_type": "DataTypeClause"
                      }
                    },
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "city",
                        "_type": "AttributeName"
                      },
                      "parenthetical": "US City",
                      "data_type_clause": {
                        "data_type": {
                          "_type": "BaseDataType",
                          "class_name": {
                            "content": "UsCity",
                            "_type": "ClassName"
                          },
                          "as_value_type": {
                            "t_value": false,
                            "_type": "AsValue"
                          }
                        },
                        "is_optional_lit": {
                          "t_value": false,
                          "_type": "IsOptional"
                        },
                        "_type": "DataTypeClause"
                      }
                    },
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "state",
                        "_type": "AttributeName"
                      },
                      "parenthetical": "US State",
                      "data_type_clause": {
                        "data_type": {
                          "_type": "BaseDataType",
                          "class_name": {
                            "content": "UsState",
                            "_type": "ClassName"
                          },
                          "as_value_type": {
                            "t_value": false,
                            "_type": "AsValue"
                          }
                        },
                        "is_optional_lit": {
                          "t_value": false,
                          "_type": "IsOptional"
                        },
                        "_type": "DataTypeClause"
                      }
                    }
                  ],
                  "attribute_sections": [
                    {
                      "_type": "AttributeSection",
                      "prefix": "__",
                      "name": {
                        "content": "Full Zip Code",
                        "_type": "AttributeSectionName"
                      },
                      "parenthetical": "",
                      "is_optional": {
                        "t_value": false,
                        "_type": "IsOptional"
                      },
                      "attributes": [
                        {
                          "_type": "Attribute",
                          "prefix": "-",
                          "name": {
                            "content": "mainZipCode",
                            "_type": "AttributeName"
                          },
                          "parenthetical": "Required Number",
                          "data_type_clause": {
                            "data_type": {
                              "_type": "BaseDataType",
                              "class_name": {
                                "content": "RequiredNumber",
                                "_type": "ClassName"
                              },
                              "as_value_type": {
                                "t_value": false,
                                "_type": "AsValue"
                              }
                            },
                            "is_optional_lit": {
                              "t_value": false,
                              "_type": "IsOptional"
                            },
                            "_type": "DataTypeClause"
                          },
                          "annotations": [
                            {
                              "_type": "Annotation",
                              "emoji": "",
                              "label": "Must be",
                              "content": "5 digits"
                            }
                          ]
                        },
                        {
                          "_type": "Attribute",
                          "prefix": "-",
                          "name": {
                            "content": "preciseZipCode",
                            "_type": "AttributeName"
                          },
                          "parenthetical": "Optiona Numberl",
                          "data_type_clause": {
                            "data_type": {
                              "_type": "BaseDataType",
                              "class_name": {
                                "content": "OptionaNumberl",
                                "_type": "ClassName"
                              },
                              "as_value_type": {
                                "t_value": false,
                                "_type": "AsValue"
                              }
                            },
                            "is_optional_lit": {
                              "t_value": false,
                              "_type": "IsOptional"
                            },
                            "_type": "DataTypeClause"
                          },
                          "annotations": [
                            {
                              "_type": "Annotation",
                              "emoji": "",
                              "label": "Must be",
                              "content": "4 digits"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "_type": "SubjectB",
          "prefix": "##",
          "name": {
            "content": "Next steps",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "subjects": [
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Clean up",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Complete",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "* Code types\n \n+ * And data block\n"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Validation",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Flesh out",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Futures",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "* Diagrams\n"
                }
              ]
            }
          ]
        },
        {
          "_type": "SubjectB",
          "prefix": "##",
          "name": {
            "content": "Tests to include",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "subjects": [
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Headers",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Name tests Variations Styling Anchors",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "annotations": [
                {
                  "_type": "Annotation",
                  "emoji": "",
                  "label": "In",
                  "content": ""
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Class clauses",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Attribute clauses",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "Fleshed in\n \n+ * overrides\n \n+ * inverse of\n"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Constraints and derivations",
                "_type": "SubjectName"
              },
              "parenthetical": ""
            }
          ]
        },
        {
          "_type": "SubjectB",
          "prefix": "##",
          "name": {
            "content": "More Tests needed",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "subjects": [
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Formula Tester English OCL Message Severity",
                "_type": "SubjectName"
              },
              "parenthetical": ""
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Data types",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n"
                }
              ],
              "classes": [
                {
                  "_type": "Class",
                  "prefix": "_",
                  "name": {
                    "content": "LiteraryWork",
                    "_type": "ClassName"
                  },
                  "parenthetical": "",
                  "attributes": [
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "firstEdition",
                        "_type": "AttributeName"
                      },
                      "one_liner": {
                        "_type": "OneLiner",
                        "content": "a home for the data type clauses"
                      },
                      "parenthetical": "List of Edition",
                      "data_type_clause": {
                        "data_type": {
                          "_type": "ListDataType",
                          "element_type": {
                            "_type": "BaseDataType",
                            "class_name": {
                              "content": "Edition",
                              "_type": "ClassName"
                            },
                            "as_value_type": {
                              "t_value": false,
                              "_type": "AsValue"
                            }
                          }
                        },
                        "is_optional_lit": {
                          "t_value": false,
                          "_type": "IsOptional"
                        },
                        "_type": "DataTypeClause"
                      },
                      "data_type": " List of sets of Editions\n"
                    }
                  ]
                },
                {
                  "_type": "Class",
                  "prefix": "_",
                  "name": {
                    "content": "Edition",
                    "_type": "ClassName"
                  },
                  "one_liner": {
                    "_type": "OneLiner",
                    "content": "to try more complex data types"
                  },
                  "parenthetical": "",
                  "attributes": [
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "author",
                        "_type": "AttributeName"
                      },
                      "one_liner": {
                        "_type": "OneLiner",
                        "content": "assuming just one"
                      },
                      "parenthetical": "",
                      "data_type": " Person\n"
                    },
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "artists",
                        "_type": "AttributeName"
                      },
                      "one_liner": {
                        "_type": "OneLiner",
                        "content": "allowing for multiple"
                      },
                      "parenthetical": "",
                      "data_type": " list of People\n"
                    },
                    {
                      "_type": "Attribute",
                      "prefix": "-",
                      "name": {
                        "content": "contributors",
                        "_type": "AttributeName"
                      },
                      "parenthetical": "",
                      "data_type": " mapping of Role to List of People\n",
                      "constraints": [
                        {
                          "_type": "Constraint",
                          "one_liner": [
                            {
                              "_type": "OneLiner",
                              "content": " Must be several for each role\n"
                            }
                          ],
                          "code": " len(contributors[role]) > 1 for each role\n",
                          "message": " not enough contributors for role\n",
                          "severity": " Error\n"
                        }
                      ],
                      "annotations": [
                        {
                          "_type": "Annotation",
                          "emoji": "",
                          "label": "constrain note",
                          "content": "constraints take annotations which may span",
                          "elaboration": [
                            {
                              "_type": "Paragraph",
                              "content": "And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n"
                            },
                            {
                              "_type": "Paragraph",
                              "content": "Here's a second paragraph, followed by a code block\n"
                            },
                            {
                              "_type": "CodeBlock",
                              "content": "``` markdown\nThis is the code block for  the annotation\n```"
                            }
                          ]
                        },
                        {
                          "_type": "Annotation",
                          "emoji": "",
                          "label": "defaul note",
                          "content": "defaults take annotations"
                        },
                        {
                          "_type": "Annotation",
                          "emoji": "",
                          "label": "derivatio note",
                          "content": "derivations take annotations"
                        }
                      ],
                      "default": {
                        "_type": "Default",
                        "one_liner": {
                          "_type": "OneLiner",
                          "content": " {'author': [a, b, c] }\n"
                        }
                      },
                      "derivation": {
                        "_type": "Derivation",
                        "one_liner": {
                          "_type": "OneLiner",
                          "content": " {'author': [a, b, c] }\n"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Data type clauses",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "* Optionality\n \n+ * Cardinality\n"
                }
              ]
            }
          ]
        },
        {
          "_type": "SubjectB",
          "prefix": "##",
          "name": {
            "content": "Elaborations",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "subjects": [
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Paragraphs",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Lists indented lists",
                "_type": "SubjectName"
              },
              "parenthetical": ""
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Code blocks with language",
                "_type": "SubjectName"
              },
              "parenthetical": ""
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Block quotes",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "> parag with angles on every line\n \n+ > next line\n \n+ > next line\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "Nested block quotes\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Pseudo admonitions",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "annotations": [
                {
                  "_type": "Annotation",
                  "emoji": "",
                  "label": "This is a",
                  "content": "warning: Don't do that",
                  "elaboration": [
                    {
                      "_type": "Paragraph",
                      "content": "> :warning: **Warning:**\n \n+ > Do not push the big red button.\n"
                    },
                    {
                      "_type": "Paragraph",
                      "content": "> :memo: **Note:** Sunrises are beautiful.\n"
                    },
                    {
                      "_type": "Paragraph",
                      "content": "> :bulb: **Tip:** Remember to appreciate the little things in life.\n"
                    },
                    {
                      "_type": "Paragraph",
                      "content": "So, how do I insert an emoji?  \ud83d\udc1b\n \n+ In Obsidian the colon, after a space? \ud83d\udef0\n"
                    }
                  ]
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Markdown code blocks",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "CodeBlock",
                  "content": "```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Code Tables",
                "_type": "SubjectName"
              },
              "one_liner": {
                "_type": "OneLiner",
                "content": "CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "CodeBlock",
                  "content": "```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```"
                }
              ]
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "HTML code center This should be centered center",
                "_type": "SubjectName"
              },
              "parenthetical": ""
            },
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Comments",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "[This is a comment that will be hidden.]: #\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "[This is a comment] #\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "[This is a comment that will be hidden.]: #\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "And here's another paragraph that's visible.\n"
                }
              ]
            }
          ]
        },
        {
          "_type": "SubjectB",
          "prefix": "##",
          "name": {
            "content": "Diagrams",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "subjects": [
            {
              "_type": "SubjectC",
              "prefix": "###",
              "name": {
                "content": "Figures",
                "_type": "SubjectName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "1. First item\n"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "attributes": [
    {
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "aFmknyidFrontImJpg",
        "_type": "AttributeName"
      },
      "parenthetical": ""
    },
    {
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "b",
        "_type": "AttributeName"
      },
      "parenthetical": ""
    },
    {
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "cSecondItemFmknyidFrontImJpgThirdItemNowSomeParagraphsInsideOfNestedListItemFmknyidFrontImJpgItemAItemAItemAFmknyidFrontImJpg",
        "_type": "AttributeName"
      },
      "parenthetical": "",
      "elaboration": [
        {
          "_type": "Paragraph",
          "content": "** Item 1b\n \n+ * *\n \n+ ![[FMKNYIDFrontIMG_1141.jpg]]\n"
        },
        {
          "_type": "Paragraph",
          "content": "And now with a caption?\n"
        },
        {
          "_type": "Paragraph",
          "content": "![**Not visible in Editing mode**](FMKNYIDFrontIMG_1141.jpg)\n"
        },
        {
          "_type": "Paragraph",
          "content": "[[https://obsidian.md/logo.png]]\n \n+ just copy and paste into Obsidian page (or drag and drop)\n"
        },
        {
          "_type": "Paragraph",
          "content": "Captions are harder\n"
        },
        {
          "_type": "Paragraph",
          "content": "[Not visible in Editing mode](https://obsidian.md/logo.png)\n"
        }
      ]
    },
    {
      "_type": "Attribute",
      "prefix": "-",
      "one_liner": {
        "_type": "OneLiner",
        "content": "--"
      },
      "parenthetical": ""
    },
    {
      "_type": "Attribute",
      "prefix": "-",
      "one_liner": {
        "_type": "OneLiner",
        "content": "as list markers:"
      },
      "parenthetical": "",
      "elaboration": [
        {
          "_type": "Paragraph",
          "content": "*   Red\n \n+ *   Green\n \n+ *   Blue\n"
        }
      ],
      "annotations": [
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "is equivalent to",
          "content": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "+   Red\n \n+ +   Green\n \n+ +   Blue\n"
            }
          ]
        },
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "and",
          "content": ""
        }
      ]
    },
    {
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "red",
        "_type": "AttributeName"
      },
      "parenthetical": ""
    },
    {
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "green",
        "_type": "AttributeName"
      },
      "parenthetical": ""
    },
    {
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "blue",
        "_type": "AttributeName"
      },
      "parenthetical": "",
      "annotations": [
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "Ordered lists use numbers followed by periods",
          "content": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "1.  Bird\n \n+ 2.  McHale\n \n+ 3.  Parish\n"
            },
            {
              "_type": "Paragraph",
              "content": "It's important to note that the actual numbers you use to mark the\n \n+ list have no effect on the HTML output Markdown produces. The HTML\n"
            }
          ]
        },
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "Markdown produces from the above list is",
          "content": ""
        },
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "If you instead wrote the list in Markdown like this",
          "content": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "1.  Bird\n \n+ 1.  McHale\n \n+ 1.  Parish\n"
            }
          ]
        },
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "or even",
          "content": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "3. Bird\n \n+ 1. McHale\n \n+ 8. Parish\n"
            },
            {
              "_type": "Paragraph",
              "content": "you'd get the exact same HTML output. The point is, if you want to,\n \n+ you can use ordinal numbers in your ordered Markdown lists, so that\n \n+ the numbers in your source match the numbers in your published HTML.\n \n+ But if you want to be lazy, you don't have to.\n"
            },
            {
              "_type": "Paragraph",
              "content": "To make lists look nice, you can wrap items with hanging indents:\n"
            },
            {
              "_type": "Paragraph",
              "content": "*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n \n+ Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n \n+ viverra nec, fringilla in, laoreet vitae, risus.\n \n+ *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n \n+ Suspendisse id sem consectetuer libero luctus adipiscing.\n"
            },
            {
              "_type": "Paragraph",
              "content": "But if you want to be lazy, you don't have to:\n"
            },
            {
              "_type": "Paragraph",
              "content": "*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n \n+ Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n \n+ viverra nec, fringilla in, laoreet vitae, risus.\n \n+ *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n \n+ Suspendisse id sem consectetuer libero luctus adipiscing.\n"
            },
            {
              "_type": "Paragraph",
              "content": "List items may consist of multiple paragraphs. Each subsequent\n \n+ paragraph in a list item must be indented by either 4 spaces\n"
            }
          ]
        },
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "or one tab",
          "content": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "1.  This is a list item with two paragraphs. Lorem ipsum dolor\n \n+ sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n \n+ mi posuere lectus.\n"
            },
            {
              "_type": "Paragraph",
              "content": "Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n \n+ vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n \n+ sit amet velit.\n"
            },
            {
              "_type": "Paragraph",
              "content": "2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n"
            },
            {
              "_type": "Paragraph",
              "content": "It looks nice if you indent every line of the subsequent\n \n+ paragraphs, but here again, Markdown will allow you to be\n"
            }
          ]
        },
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "lazy",
          "content": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "*   This is a list item with two paragraphs.\n"
            },
            {
              "_type": "Paragraph",
              "content": "This is the second paragraph in the list item. You're\n \n+ only required to indent the first line. Lorem ipsum dolor\n \n+ sit amet, consectetuer adipiscing elit.\n"
            },
            {
              "_type": "Paragraph",
              "content": "*   Another item in the same list.\n"
            },
            {
              "_type": "Paragraph",
              "content": "To put a blockquote within a list item, the blockquote's `>`\n"
            }
          ]
        },
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "delimiters need to be indented",
          "content": ""
        },
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "A list item with a blockquote",
          "content": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "> This is a blockquote\n \n+ > inside a list item.\n"
            },
            {
              "_type": "Paragraph",
              "content": "To put a code block within a list item, the code block needs\n \n+ to be indented *twice* -- 8 spaces or two tabs:\n"
            }
          ]
        },
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "A list item with a code block",
          "content": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "<code goes here>\n"
            }
          ]
        }
      ]
    }
  ],
  "subjects": [
    {
      "_type": "SubjectC",
      "prefix": "###",
      "name": {
        "content": "Figure caption figure FMKNYID Front IM jpg figcaption This is the caption figcaption figure",
        "_type": "SubjectName"
      },
      "parenthetical": ""
    },
    {
      "_type": "SubjectB",
      "prefix": "##",
      "name": {
        "content": "Admonitions",
        "_type": "SubjectName"
      },
      "parenthetical": "",
      "elaboration": [
        {
          "_type": "CodeBlock",
          "content": "```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```"
        }
      ],
      "subjects": [
        {
          "_type": "SubjectC",
          "prefix": "###",
          "name": {
            "content": "Obsidian Callouts",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"
            },
            {
              "_type": "Paragraph",
              "content": "> [!note]\n \n+ > Lorem ipsum dolor sit amet\n"
            },
            {
              "_type": "Paragraph",
              "content": "> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n"
            },
            {
              "_type": "Paragraph",
              "content": "> [!question]\n \n+ > Lorem ipsum dolor sit amet\n"
            },
            {
              "_type": "Paragraph",
              "content": ">[!question]\n \n+ >Why is the sky blue?\n"
            }
          ]
        }
      ]
    },
    {
      "_type": "SubjectB",
      "prefix": "##",
      "name": {
        "content": "Capabilities",
        "_type": "SubjectName"
      },
      "parenthetical": "",
      "subjects": [
        {
          "_type": "SubjectC",
          "prefix": "###",
          "name": {
            "content": "To PDF",
            "_type": "SubjectName"
          },
          "parenthetical": ""
        },
        {
          "_type": "SubjectC",
          "prefix": "###",
          "name": {
            "content": "To HTML",
            "_type": "SubjectName"
          },
          "parenthetical": ""
        },
        {
          "_type": "SubjectC",
          "prefix": "###",
          "name": {
            "content": "Prettify",
            "_type": "SubjectName"
          },
          "parenthetical": ""
        },
        {
          "_type": "SubjectC",
          "prefix": "###",
          "name": {
            "content": "Edit in VS Code",
            "_type": "SubjectName"
          },
          "parenthetical": ""
        },
        {
          "_type": "SubjectC",
          "prefix": "###",
          "name": {
            "content": "TOC",
            "_type": "SubjectName"
          },
          "parenthetical": ""
        },
        {
          "_type": "SubjectC",
          "prefix": "###",
          "name": {
            "content": "Index",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "classes": [
            {
              "_type": "Class",
              "prefix": "_",
              "name": {
                "content": "NewClass",
                "_type": "ClassName"
              },
              "one_liner": {
                "_type": "OneLiner",
                "content": "just to see if it does that"
              },
              "parenthetical": ""
            }
          ]
        }
      ]
    },
    {
      "_type": "SubjectB",
      "prefix": "##",
      "name": {
        "content": "Markdown Syntax",
        "_type": "SubjectName"
      },
      "parenthetical": "",
      "elaboration": [
        {
          "_type": "Paragraph",
          "content": "*   [Overview](#overview)\n \n+ *   [Philosophy](#philosophy)\n \n+ *   [Inline HTML](#html)\n \n+ *   [Automatic Escaping for Special Characters](#autoescape)\n \n+ *   [Block Elements](#block)\n \n+ *   [Paragraphs and Line Breaks](#p)\n \n+ *   [Headers](#header)\n \n+ *   [Blockquotes](#blockquote)\n \n+ *   [Lists](#list)\n \n+ *   [Code Blocks](#precode)\n \n+ *   [Horizontal Rules](#hr)\n \n+ *   [Span Elements](#span)\n \n+ *   [Links](#link)\n \n+ *   [Emphasis](#em)\n \n+ *   [Code](#code)\n \n+ *   [Images](#img)\n \n+ *   [Miscellaneous](#misc)\n \n+ *   [Backslash Escapes](#backslash)\n \n+ *   [Automatic Links](#autolink)\n"
        }
      ],
      "annotations": [
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "Note",
          "content": "** This document is itself written using Markdown; you"
        }
      ]
    },
    {
      "_type": "SubjectC",
      "prefix": "###",
      "name": {
        "content": "Overview",
        "_type": "SubjectName"
      },
      "parenthetical": "",
      "subjects": [
        {
          "_type": "SubjectD",
          "prefix": "####",
          "name": {
            "content": "Philosophy",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "Markdown is intended to be as easy-to-read and easy-to-write as is feasible.\n"
            },
            {
              "_type": "Paragraph",
              "content": "Readability, however, is emphasized above all else. A Markdown-formatted\n \n+ document should be publishable as-is, as plain text, without looking\n \n+ like it's been marked up with tags or formatting instructions. While\n \n+ Markdown's syntax has been influenced by several existing text-to-HTML\n \n+ filters -- including [Setext](http://docutils.sourceforge.net/mirror/setext.html), [atx](http://www.aaronsw.com/2002/atx/), [Textile](http://textism.com/tools/textile/), [reStructuredText](http://docutils.sourceforge.net/rst.html),\n \n+ [Grutatext](http://www.triptico.com/software/grutatxt.html), and [EtText](http://ettext.taint.org/doc/) -- the single biggest source of\n \n+ inspiration for Markdown's syntax is the format of plain text email.\n"
            }
          ]
        }
      ]
    },
    {
      "_type": "SubjectC",
      "prefix": "###",
      "name": {
        "content": "Block Elements",
        "_type": "SubjectName"
      },
      "parenthetical": "",
      "subjects": [
        {
          "_type": "SubjectD",
          "prefix": "####",
          "name": {
            "content": "Paragraphs and Line Breaks",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "A paragraph is simply one or more consecutive lines of text, separated\n \n+ by one or more blank lines. (A blank line is any line that looks like a\n \n+ blank line -- a line containing nothing but spaces or tabs is considered\n \n+ blank.) Normal paragraphs should not be indented with spaces or tabs.\n"
            },
            {
              "_type": "Paragraph",
              "content": "The implication of the \"one or more consecutive lines of text\" rule is\n \n+ that Markdown supports \"hard-wrapped\" text paragraphs. This differs\n \n+ significantly from most other text-to-HTML formatters (including Movable\n \n+ Type's \"Convert Line Breaks\" option) which translate every line break\n \n+ character in a paragraph into a `<br />` tag.\n"
            },
            {
              "_type": "Paragraph",
              "content": "When you *do* want to insert a `<br />` break tag using Markdown, you\n \n+ end a line with two or more spaces, then type return.\n"
            }
          ]
        },
        {
          "_type": "SubjectD",
          "prefix": "####",
          "name": {
            "content": "Headers",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "Markdown supports two styles of headers, [Setext] [1] and [atx] [2].\n"
            },
            {
              "_type": "Paragraph",
              "content": "Optionally, you may \"close\" atx-style headers. This is purely\n \n+ cosmetic -- you can use this if you think it looks better. The\n \n+ closing hashes don't even need to match the number of hashes\n \n+ used to open the header. (The number of opening hashes\n \n+ determines the header level.)\n"
            }
          ]
        },
        {
          "_type": "SubjectD",
          "prefix": "####",
          "name": {
            "content": "Blockquotes",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "Markdown uses email-style `>` characters for blockquoting. If you're\n \n+ familiar with quoting passages of text in an email message, then you\n \n+ know how to create a blockquote in Markdown. It looks best if you hard\n \n+ wrap the text and put a `>` before every line:\n"
            },
            {
              "_type": "Paragraph",
              "content": "> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n \n+ > consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n \n+ > Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n \n+ >\n \n+ > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n \n+ > id sem consectetuer libero luctus adipiscing.\n"
            },
            {
              "_type": "Paragraph",
              "content": "Markdown allows you to be lazy and only put the `>` before the first\n \n+ line of a hard-wrapped paragraph:\n"
            },
            {
              "_type": "Paragraph",
              "content": "> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n \n+ consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n \n+ Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n"
            },
            {
              "_type": "Paragraph",
              "content": "> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n \n+ id sem consectetuer libero luctus adipiscing.\n"
            },
            {
              "_type": "Paragraph",
              "content": "Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\n \n+ adding additional levels of `>`:\n"
            },
            {
              "_type": "Paragraph",
              "content": "> This is the first level of quoting.\n \n+ >\n \n+ > > This is nested blockquote.\n \n+ >\n \n+ > Back to the first level.\n"
            },
            {
              "_type": "Paragraph",
              "content": "Blockquotes can contain other Markdown elements, including headers, lists,\n"
            }
          ],
          "annotations": [
            {
              "_type": "Annotation",
              "emoji": "",
              "label": "and code blocks",
              "content": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "> ## This is a header.\n \n+ >\n \n+ > 1.   This is the first list item.\n \n+ > 2.   This is the second list item.\n \n+ >\n \n+ > Here's some example code:\n \n+ >\n \n+ >     return shell_exec(\"echo $input | $markdown_script\");\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "Any decent text editor should make email-style quoting easy. For\n"
                }
              ]
            },
            {
              "_type": "Annotation"
            }
          ]
        },
        {
          "_type": "SubjectD",
          "prefix": "####",
          "name": {
            "content": "Lists",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "Markdown supports ordered (numbered) and unordered (bulleted) lists.\n"
            },
            {
              "_type": "Paragraph",
              "content": "Unordered lists use asterisks, pluses, and hyphens -- interchangably\n"
            }
          ]
        }
      ]
    },
    {
      "_type": "SubjectD",
      "prefix": "####",
      "name": {
        "content": "Code Blocks",
        "_type": "SubjectName"
      },
      "parenthetical": "",
      "elaboration": [
        {
          "_type": "Paragraph",
          "content": "Pre-formatted code blocks are used for writing about programming or\n \n+ markup source code. Rather than forming normal paragraphs, the lines\n \n+ of a code block are interpreted literally. Markdown wraps a code block\n \n+ in both `<pre>` and `<code>` tags.\n"
        },
        {
          "_type": "Paragraph",
          "content": "To produce a code block in Markdown, simply indent every line of the\n \n+ block by at least 4 spaces or 1 tab.\n"
        }
      ],
      "annotations": [
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "This is a normal paragraph",
          "content": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "This is a code block.\n"
            }
          ]
        },
        {
          "_type": "Annotation",
          "emoji": "",
          "label": "Here is an example of AppleScript",
          "content": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "tell application \"Foo\"\n \n+ beep\n \n+ end tell\n"
            },
            {
              "_type": "Paragraph",
              "content": "A code block continues until it reaches a line that is not indented\n \n+ (or the end of the article).\n"
            },
            {
              "_type": "Paragraph",
              "content": "Within a code block, ampersands (`&`) and angle brackets (`<` and `>`)\n \n+ are automatically converted into HTML entities. This makes it very\n \n+ easy to include example HTML source code using Markdown -- just paste\n \n+ it and indent it, and Markdown will handle the hassle of encoding the\n \n+ ampersands and angle brackets. For example, this:\n"
            },
            {
              "_type": "Paragraph",
              "content": "<div class=\"footer\">\n \n+ &copy; 2004 Foo Corporation\n \n+ </div>\n"
            },
            {
              "_type": "Paragraph",
              "content": "Regular Markdown syntax is not processed within code blocks. E.g.,\n \n+ asterisks are just literal asterisks within a code block. This means\n \n+ it's also easy to use Markdown to write about Markdown's own syntax.\n"
            },
            {
              "_type": "CodeBlock",
              "content": "```\ntell application \"Foo\"\nbeep\nend tell\n```"
            }
          ]
        }
      ]
    },
    {
      "_type": "SubjectC",
      "prefix": "###",
      "name": {
        "content": "Span Elements",
        "_type": "SubjectName"
      },
      "parenthetical": "",
      "subjects": [
        {
          "_type": "SubjectD",
          "prefix": "####",
          "name": {
            "content": "Links",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "annotations": [
            {
              "_type": "Annotation",
              "emoji": "",
              "label": "Markdown supports two style of links",
              "content": "*inline* and *reference*.",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "In both styles, the link text is delimited by [square brackets].\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "To create an inline link, use a set of regular parentheses immediately\n \n+ after the link text's closing square bracket. Inside the parentheses,\n \n+ put the URL where you want the link to point, along with an *optional*\n \n+ title for the link, surrounded in quotes. For example:\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "This is [an example](http://example.com/) inline link.\n"
                },
                {
                  "_type": "Paragraph",
                  "content": "[This link](http://example.net/) has no title attribute.\n"
                }
              ]
            }
          ]
        },
        {
          "_type": "SubjectD",
          "prefix": "####",
          "name": {
            "content": "Emphasis",
            "_type": "SubjectName"
          },
          "parenthetical": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "Markdown treats asterisks (`*`) and underscores (`_`) as indicators of\n \n+ emphasis. Text wrapped with one `*` or `_` will be wrapped with an\n \n+ HTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML\n \n+ `<strong>` tag. E.g., this input:\n"
            },
            {
              "_type": "Paragraph",
              "content": "*single asterisks*\n"
            }
          ],
          "classes": [
            {
              "_type": "Class",
              "prefix": "_",
              "name": {
                "content": "SingleUnderscores",
                "_type": "ClassName"
              },
              "parenthetical": "",
              "elaboration": [
                {
                  "_type": "Paragraph",
                  "content": "**double asterisks**\n"
                }
              ],
              "attribute_sections": [
                {
                  "_type": "AttributeSection",
                  "prefix": "__",
                  "name": {
                    "content": "double underscores",
                    "_type": "AttributeSectionName"
                  },
                  "parenthetical": ""
                }
              ]
            }
          ]
        },
        {
          "_type": "SubjectD",
          "prefix": "####",
          "name": {
            "content": "Code",
            "_type": "SubjectName"
          },
          "parenthetical": ""
        }
      ]
    }
  ]
}