Document - <class 'dull_dsl.dull_parser_core.DocPart'> 
. LiterateModel - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ LiterateModel_Head: # Literate Tester
_ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.', extra_text=[])], extra_text=[])]
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Sample Classes - with a one liner for the subject, spanningtwo lines
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='And an elaboration, with a few paragraphs', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Paragraph 2', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Paragraph 3', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### HeaderB
. . . . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ SubjectD_Head: #### HeaderC
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Editions
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: Class Edition - a manifestation of a literary work
_ _ _ _ _ BASED_ON: basedOn: Literary Work, Other Base
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - Title - the title, as shown on the book's title page (Full Title)
. . . . . . Default - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ DEFAULT: Default: the title of the Work of which this is an edition
_ _ _ _ _ _ _ CODE: Code: baseWork.title
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - Author - the writer (Person)
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - Illustrators - artists who supplied the pictures (List of People)Shows use of plural for class.
. . . . . AttributeSection - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ AttributeSection_Head: __ Optional Publication Details (Optional)
. . . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ Attribute_Head: - Date Published - when the edition was released to the public (BiblioDate)
. . . . . AttributeSection - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ AttributeSection_Head: __ Required Format Details (Required)
. . . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ Attribute_Head: - Number of pages  - last page number  (optional Integer)
. . . . . AttributeSection - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ AttributeSection_Head: __ Unsaid Other Details
. . . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ Attribute_Head: - Date Published - when the edition was released to the public (BiblioDate)
_ _ _ _ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Just use Mermaid in code block', extra_text=[])], extra_text=[]), TypedLine(type_label='CODE_FENCE', line_Type=None, content='``` notmermaid', extra_text=['', 'block-beta', 'columns 3', 'a:3', 'block:group1:2', 'columns 2', 'h i j k', 'end', 'g', 'block:group2:3', '%% columns auto (default)', 'l m n o p q r', 'end', '', '```']), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="And here's the result", extra_text=[])], extra_text=[]), TypedLine(type_label='CODE_FENCE', line_Type=None, content='```mermaid', extra_text=['block-beta', 'columns 3', 'a:3', 'block:group1:2', 'columns 2', 'h i j k', 'end', 'g', 'block:group2:3', '%% columns auto (default)', 'l m n o p q r', 'end', '```']), TypedLine(type_label='CODE_FENCE', line_Type=None, content='``` mermaid', extra_text=['', 'erDiagram', 'CAR {', 'string registrationNumber', 'string make', 'string model', '}', 'PERSON {', 'string firstName', 'string lastName', 'int age', '}', '', 'style CAR fill:#f9f,stroke:#333,stroke-width:4px', '', '', '```'])]
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: _ Hardcover Edition
_ _ _ _ _ SUBTYPE_OF: subtype of: Edition, Work
_ _ _ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='``` mermaid', extra_text=['erDiagram', '', '', 'class Subject Component', 'class Section Component', 'class Attribute Component', 'class Class Component', '', 'SUBJECT {', 'string name', '', '}', 'Subject ||--|{ Subject : contains', 'Subject ||--|{ Class : contains', 'Class {', 'string name', '}', '', 'Class ||--|{ Section : contains', 'Class ||--|{ Attribute : contains', 'Attribute {', '', 'string name', '}', 'Section ||--|{ Attribute : contains', '', '', '', '```'])]
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: _ Paperback Edition
_ _ _ _ _ SUBTYPE_OF: subtype of: Edition by Format, Work by Something Else
_ _ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='And in the elaboration, a figure:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='<figure title="Title on the Figure tag">', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='<img src="../hard_assets/FMKNYIDFrontIMG_1141.jpg" alt="Trulli" style="width:30%">', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='<figcaption>Fig.1 - Trulli, Puglia, Italy.</figcaption>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='</figure>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='And the same figure with figure/caption markup', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='<figure >', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='<img src="../hard_assets/FMKNYIDFrontIMG_1141.jpg" title="Title on Image" style="width:20%">', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='<figcaption>My Non-Drivers License</figcaption>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='</figure>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and a list of codes', extra_text=[])], extra_text=[]), TypedLine(type_label='CODE_FENCE', line_Type=None, content='```csv', extra_text=['eFormat, Description', "E-Book, 'Kindle or Apple books - etc'", 'PDF, formatted for printing and direct delivery', '', '```'])]
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: _ Electronic Edition
_ _ _ _ _ SUBTYPE_OF: subtype of: Edition
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - eFormat - the precise medium for the electronic edition (Code)
_ _ _ _ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```csv', extra_text=['eFormat, Description', "E-Book, 'Kindle or Apple books - etc'", 'PDF, formatted for printing and direct delivery', '', '```'])]
. . . . CodeType - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ CodeType_Head: Code Type: EBook Format - the precise medium for the electronic edition
_ _ _ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```csv', extra_text=['Format, Description', "E-Book, 'Kindle or Apple books - etc'", 'PDF, formatted for printing and direct delivery', '', '```'])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Addresses
. . . . ValueType - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ ValueType_Head: Value Type: Address - a US Street address
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - Street Address 1 - usually the street and number (Text)
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - Street Address 2 - usually the apartment or unit number (Text)
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - City (US City)
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - State (US State)
. . . . . AttributeSection - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ AttributeSection_Head: __ Full ZipCode (Required)
. . . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ Attribute_Head: - main zip code (Required Number)
. . . . . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ _ WILD: Must be: 5 digits
. . . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ Attribute_Head: - precise zip code (Optiona Numberl)
. . . . . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ _ WILD: Must be: 4 digits
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Next steps
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Clean up
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Name parsing', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* value types', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Rendering code blocks. capture language', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Subtypings - exclusive, exhaustive', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Data types with reference/value and cardinality', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Optional on Attribute Section', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Complete
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Code types', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* And data block', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Validation
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* cycles', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* references to classes, subtypings', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* references to attributes', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Flesh out
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Subtypes, subtypings', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* inverse attributes', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Overrides what', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* explicit for data type value/reference', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Futures
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Diagrams', extra_text=[])], extra_text=[])]
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Tests to include
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Headers
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes", extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Subject - w/ one-liner', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Class one-liner?, Value Type', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Attribute Section - optional?', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Attribute Header', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='**  with and without one-liners', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='** with and without data type expressions', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Formulas, derivation, default, constraint', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Annotations', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Name tests* Variations 
+ * Styling 
+ * Anchors
. . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ WILD: * In:* Headers 
+ * Class lists 
+ * subtyping lists 
+ *
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Class clauses
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Plural', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Abbreviation', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Subtype of', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Based on', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Where', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Diagnostics', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Annotations', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Fleshed in', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Subtypes, subtypings', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Dependents', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Ancestors', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Attribute clauses
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Data type', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Default', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Derivation', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Constraint', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Required/optional - if/unless', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Fleshed in', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* overrides', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* inverse of', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Constraints and derivations
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## More Tests needed
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Formula Tester* English 
+ * OCL 
+ * Message 
+ * Severity
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Data types
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Base Type. Reference vs Value', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* List, set, mapping types', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Nested operators', extra_text=[])], extra_text=[])]
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: _ Literary Work
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - first Edition - a home for the data type clauses (List of Edition)
_ _ _ _ _ _ DATA_TYPE: data type: Edition
_ _ _ _ _ _ DATA_TYPE: data type: Edition reference
_ _ _ _ _ _ DATA_TYPE: data type: Edition value
_ _ _ _ _ _ DATA_TYPE: data type: List of Editiontesting with singular for of class name
_ _ _ _ _ _ DATA_TYPE: data type: List of Editionstesting for plural form should be equivalent
_ _ _ _ _ _ DATA_TYPE: data type: List of set of Editions
_ _ _ _ _ _ DATA_TYPE: data type: List of sets of Editions
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: _ Edition - to try more complex data types
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - author - assuming just one
_ _ _ _ _ _ DATA_TYPE: data type: Person
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - artists - allowing for multiple
_ _ _ _ _ _ DATA_TYPE: data type: list of People
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - contributors
_ _ _ _ _ _ DATA_TYPE: data type: mapping of Roles to Lists of Person values
_ _ _ _ _ _ DATA_TYPE: data type: mapping of Role to List of People
. . . . . . Constraint - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ CONSTRAINT: constraint: Must be several for each role
_ _ _ _ _ _ _ CODE: code: len(contributors[role]) > 1 for each role
_ _ _ _ _ _ _ MESSAGE: message: not enough contributors for role
_ _ _ _ _ _ _ SEVERITY: severity: Error
. . . . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ WILD: constrain note: constraints take annotations which may spanmultiple lines.
_ _ _ _ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='And those annotations may have their own elaborations.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Which may contain more that one paragraph.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="Here's a second paragraph, followed by a code block", extra_text=[])], extra_text=[]), TypedLine(type_label='CODE_FENCE', line_Type=None, content='``` markdown', extra_text=['This is the code block for  the annotation', '```'])]
. . . . . . Default - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ DEFAULT: default: {'author': [a, b, c] }
. . . . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ WILD: defaul note: defaults take annotations
. . . . . . Derivation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ DERIVATION: derivation: {'author': [a, b, c] }
. . . . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ WILD: derivatio note: derivations take annotations
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Data type clauses
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Optionality', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Cardinality', extra_text=[])], extra_text=[])]
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Elaborations
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Paragraphs
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Unindented paragraph.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Indented paragraph.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Lists, indented lists
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Code blocks with language
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Block quotes
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> paragraph with angle before first line', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> parag with angles on every line', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> next line', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> next line', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Nested block quotes', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> paragraph with angle before first line', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>> Nested goes here', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Pseudo admonitions
. . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ WILD: This is a :warning: Don't do that
_ _ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> :warning: **Warning:**', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Do not push the big red button.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> :memo: **Note:** Sunrises are beautiful.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> :bulb: **Tip:** Remember to appreciate the little things in life.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='So, how do I insert an emoji?  🐛', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='In Obsidian the colon, after a space? 🛰', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Markdown code blocks?
_ _ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```markdown', extra_text=['This is some text, with indented lists', '- Item', '- Item2', '- Item 3', '- Item a', '- Item b', '- Item c', '```'])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Code Tables - CSV CodeblockSo. This is the **one to use to enter codes**, lists of annotations, etc
_ _ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```csv', extra_text=['Pos, Date, Name, Price', '1, 2023-09-28, Spices, 150$', '2, 2023-02-29, Shovel, 1.25$', '```'])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### HTML code<center> 
+ This should be centered 
+ </center>
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Comments
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="Here's a paragraph that will be visible.", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="(Hard to see what's required: blank lines?]", extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='[This is a comment that will be hidden.]: #', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='[This is a comment] #', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='[This is a comment that will be hidden.]: #', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="And here's another paragraph that's visible.", extra_text=[])], extra_text=[])]
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Diagrams
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Figures
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='1. First item', extra_text=[])], extra_text=[])]
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - A![[FMKNYIDFrontIMG_1141.jpg]]
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - B
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - C2. Second item 
+ ![[FMKNYIDFrontIMG_1141.jpg]] 
+ 3. Third item 
+ Now, some paragraphs inside of nested List 
+ * Item 1 
+ ![[FMKNYIDFrontIMG_1141.jpg]] 
+ ** Item 1a 
+ *** Item 1a 
+ **** Item 1a 
+ ![[FMKNYIDFrontIMG_1141.jpg]]
_ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='** Item 1b', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* *', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='![[FMKNYIDFrontIMG_1141.jpg]]', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='And now with a caption?', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='![**Not visible in Editing mode**](FMKNYIDFrontIMG_1141.jpg)', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='[[https://obsidian.md/logo.png]]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='just copy and paste into Obsidian page (or drag and drop)', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Captions are harder', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='[Not visible in Editing mode](https://obsidian.md/logo.png)', extra_text=[])], extra_text=[])]
. SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectC_Head: ### Figure caption<figure> 
+ ![[FMKNYIDFrontIMG_1141.jpg]] 
+ <figcaption> 
+ This is the caption 
+ </figcaption> 
+ </figure>
. SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectB_Head: ## Admonitions
_ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```ad-tip', extra_text=['title: This is a tip', 'This is the content of the admonition tip.', '```'])]
. . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectC_Head: ### Obsidian Callouts
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> [!info]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="> Here's a callout block.", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> ![[Engelbart.jpg]]', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> [!note]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Lorem ipsum dolor sit amet', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> [!abstract]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Lorem ipsum dolor sit amet', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> [!question]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Lorem ipsum dolor sit amet', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='>[!question]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>Why is the sky blue?', extra_text=[])], extra_text=[])]
. SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectB_Head: ## Capabilities
. . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectC_Head: ### To PDF
. . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectC_Head: ### To HTML
. . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectC_Head: ### Prettify
. . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectC_Head: ### Edit in VS Code
. . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectC_Head: ### TOC
. . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectC_Head: ### Index
. . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ Class_Head: _ NewClass - just to see if it does that
. SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectB_Head: ## Markdown: Syntax
_ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Overview](#overview)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Philosophy](#philosophy)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Inline HTML](#html)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Automatic Escaping for Special Characters](#autoescape)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Block Elements](#block)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Paragraphs and Line Breaks](#p)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Headers](#header)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Blockquotes](#blockquote)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Lists](#list)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Code Blocks](#precode)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Horizontal Rules](#hr)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Span Elements](#span)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Links](#link)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Emphasis](#em)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Code](#code)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Images](#img)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Miscellaneous](#misc)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Backslash Escapes](#backslash)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   [Automatic Links](#autolink)', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ NOTE: **Note:** This document is itself written using Markdown; youcan [see the source for it by adding '.text' to the URL](/projects/markdown/syntax.text).
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: ----
. SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectC_Head: ### Overview
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Philosophy
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Markdown is intended to be as easy-to-read and easy-to-write as is feasible.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Readability, however, is emphasized above all else. A Markdown-formatted', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='document should be publishable as-is, as plain text, without looking', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="like it's been marked up with tags or formatting instructions. While", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="Markdown's syntax has been influenced by several existing text-to-HTML", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='filters -- including [Setext](http://docutils.sourceforge.net/mirror/setext.html), [atx](http://www.aaronsw.com/2002/atx/), [Textile](http://textism.com/tools/textile/), [reStructuredText](http://docutils.sourceforge.net/rst.html),', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='[Grutatext](http://www.triptico.com/software/grutatxt.html), and [EtText](http://ettext.taint.org/doc/) -- the single biggest source of', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="inspiration for Markdown's syntax is the format of plain text email.", extra_text=[])], extra_text=[])]
. SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectC_Head: ### Block Elements
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Paragraphs and Line Breaks
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='A paragraph is simply one or more consecutive lines of text, separated', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='by one or more blank lines. (A blank line is any line that looks like a', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='blank line -- a line containing nothing but spaces or tabs is considered', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='blank.) Normal paragraphs should not be indented with spaces or tabs.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='The implication of the "one or more consecutive lines of text" rule is', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='that Markdown supports "hard-wrapped" text paragraphs. This differs', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='significantly from most other text-to-HTML formatters (including Movable', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Type\'s "Convert Line Breaks" option) which translate every line break', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='character in a paragraph into a `<br />` tag.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='When you *do* want to insert a `<br />` break tag using Markdown, you', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='end a line with two or more spaces, then type return.', extra_text=[])], extra_text=[])]
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Headers
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Markdown supports two styles of headers, [Setext] [1] and [atx] [2].', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Optionally, you may "close" atx-style headers. This is purely', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='cosmetic -- you can use this if you think it looks better. The', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="closing hashes don't even need to match the number of hashes", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='used to open the header. (The number of opening hashes', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='determines the header level.)', extra_text=[])], extra_text=[])]
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Blockquotes
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="Markdown uses email-style `>` characters for blockquoting. If you're", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='familiar with quoting passages of text in an email message, then you', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='know how to create a blockquote in Markdown. It looks best if you hard', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='wrap the text and put a `>` before every line:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> id sem consectetuer libero luctus adipiscing.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Markdown allows you to be lazy and only put the `>` before the first', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='line of a hard-wrapped paragraph:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='id sem consectetuer libero luctus adipiscing.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='adding additional levels of `>`:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> This is the first level of quoting.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> > This is nested blockquote.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Back to the first level.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Blockquotes can contain other Markdown elements, including headers, lists,', extra_text=[])], extra_text=[])]
. . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ WILD: and code blocks:
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> ## This is a header.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> 1.   This is the first list item.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> 2.   This is the second list item.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="> Here's some example code:", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>     return shell_exec("echo $input | $markdown_script");', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Any decent text editor should make email-style quoting easy. For', extra_text=[])], extra_text=[])]
. . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ EXAMPLE: example, with BBEdit, you can make a selection and choose IncreaseQuote Level from the Text menu.
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Lists
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Markdown supports ordered (numbered) and unordered (bulleted) lists.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Unordered lists use asterisks, pluses, and hyphens -- interchangably', extra_text=[])], extra_text=[])]
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: -- as list markers:
_ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Red', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Green', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Blue', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: is equivalent to:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='+   Red', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='+   Green', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='+   Blue', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: and:
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: -   Red
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: -   Green
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: -   Blue
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: Ordered lists use numbers followed by periods:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='1.  Bird', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='2.  McHale', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='3.  Parish', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="It's important to note that the actual numbers you use to mark the", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='list have no effect on the HTML output Markdown produces. The HTML', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: Markdown produces from the above list is:
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: If you instead wrote the list in Markdown like this:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='1.  Bird', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='1.  McHale', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='1.  Parish', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: or even:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='3. Bird', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='1. McHale', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='8. Parish', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="you'd get the exact same HTML output. The point is, if you want to,", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='you can use ordinal numbers in your ordered Markdown lists, so that', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='the numbers in your source match the numbers in your published HTML.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="But if you want to be lazy, you don't have to.", extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='To make lists look nice, you can wrap items with hanging indents:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='viverra nec, fringilla in, laoreet vitae, risus.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Suspendisse id sem consectetuer libero luctus adipiscing.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="But if you want to be lazy, you don't have to:", extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='viverra nec, fringilla in, laoreet vitae, risus.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Suspendisse id sem consectetuer libero luctus adipiscing.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='List items may consist of multiple paragraphs. Each subsequent', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='paragraph in a list item must be indented by either 4 spaces', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: or one tab:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='1.  This is a list item with two paragraphs. Lorem ipsum dolor', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='sit amet, consectetuer adipiscing elit. Aliquam hendrerit', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='mi posuere lectus.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Vestibulum enim wisi, viverra nec, fringilla in, laoreet', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='vitae, risus. Donec sit amet nisl. Aliquam semper ipsum', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='sit amet velit.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='2.  Suspendisse id sem consectetuer libero luctus adipiscing.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='It looks nice if you indent every line of the subsequent', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='paragraphs, but here again, Markdown will allow you to be', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: lazy:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   This is a list item with two paragraphs.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="This is the second paragraph in the list item. You're", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='only required to indent the first line. Lorem ipsum dolor', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='sit amet, consectetuer adipiscing elit.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Another item in the same list.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="To put a blockquote within a list item, the blockquote's `>`", extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: delimiters need to be indented:
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: *   A list item with a blockquote:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> This is a blockquote', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> inside a list item.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='To put a code block within a list item, the code block needs', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='to be indented *twice* -- 8 spaces or two tabs:', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: *   A list item with a code block:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='<code goes here>', extra_text=[])], extra_text=[])]
. SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectD_Head: #### Code Blocks
_ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Pre-formatted code blocks are used for writing about programming or', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='markup source code. Rather than forming normal paragraphs, the lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='of a code block are interpreted literally. Markdown wraps a code block', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='in both `<pre>` and `<code>` tags.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='To produce a code block in Markdown, simply indent every line of the', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='block by at least 4 spaces or 1 tab.', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: This is a normal paragraph:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='This is a code block.', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: Here is an example of AppleScript:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='tell application "Foo"', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='beep', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='end tell', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='A code block continues until it reaches a line that is not indented', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='(or the end of the article).', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Within a code block, ampersands (`&`) and angle brackets (`<` and `>`)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='are automatically converted into HTML entities. This makes it very', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='easy to include example HTML source code using Markdown -- just paste', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='it and indent it, and Markdown will handle the hassle of encoding the', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='ampersands and angle brackets. For example, this:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='<div class="footer">', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='&copy; 2004 Foo Corporation', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='</div>', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Regular Markdown syntax is not processed within code blocks. E.g.,', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='asterisks are just literal asterisks within a code block. This means', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="it's also easy to use Markdown to write about Markdown's own syntax.", extra_text=[])], extra_text=[]), TypedLine(type_label='CODE_FENCE', line_Type=None, content='```', extra_text=['tell application "Foo"', 'beep', 'end tell', '```'])]
. SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectC_Head: ### Span Elements
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Links
. . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ WILD: Markdown supports two style of links: *inline* and *reference*.
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='In both styles, the link text is delimited by [square brackets].', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='To create an inline link, use a set of regular parentheses immediately', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="after the link text's closing square bracket. Inside the parentheses,", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='put the URL where you want the link to point, along with an *optional*', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='title for the link, surrounded in quotes. For example:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='This is [an example](http://example.com/) inline link.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='[This link](http://example.net/) has no title attribute.', extra_text=[])], extra_text=[])]
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Emphasis
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Markdown treats asterisks (`*`) and underscores (`_`) as indicators of', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='emphasis. Text wrapped with one `*` or `_` will be wrapped with an', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="HTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='`<strong>` tag. E.g., this input:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*single asterisks*', extra_text=[])], extra_text=[])]
. . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ Class_Head: _single underscores_
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='**double asterisks**', extra_text=[])], extra_text=[])]
. . . . AttributeSection - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ AttributeSection_Head: __double underscores__
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Code
