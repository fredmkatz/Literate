
Phase: Parsing model: ldm/ldm_models/LiterateTester/LiterateTester.md
PARSING ldm/ldm_models/LiterateTester/LiterateTester.md

Phase: Deriving dict for model
adding name value. based_on -. [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')]
adding name value. one_liner -.  the title of the Work of which this is an edition

adding name value. code -.  baseWork.title

parsing subtypeOfs:   Edition, Work

SubtypeOf result is  [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
adding name value. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
parsing subtypeOfs:   Edition by Format, Work by Something Else

SubtypeOf result is  [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]
adding name value. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]
parsing subtypeOfs:   Edition

SubtypeOf result is  [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
adding name value. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
raw name = Address, deep = None
adding name value. data_type -.  Edition

adding name value. data_type -.  Edition reference

adding name value. data_type -.  Edition value

adding name value. data_type -.  List of Edition
testing with singular for of class name
adding name value. data_type -.  List of Editions
testing for plural form should be equivalent
adding name value. data_type -.  List of set of Editions

adding name value. data_type -.  List of sets of Editions

adding name value. data_type -.  Person

adding name value. data_type -.  list of People

adding name value. data_type -.  mapping of Roles to Lists of Person values

adding name value. data_type -.  mapping of Role to List of People

Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Must be several for each role

adding name value. code -.  len(contributors[role]) > 1 for each role

adding name value. message -.  not enough contributors for role

adding name value. severity -.  Error

adding name value. one_liner -.  {'author': [a, b, c] }

adding name value. one_liner -.  {'author': [a, b, c] }

.. full dict saved  in ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.dict.yaml and ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.dict.json
Building class map for module: ldm.Literate_01
Class map is
{   'Annotation': <class 'ldm.Literate_01.Annotation'>,
    'AsValue': <class 'utils.class_pom_token.AsValue'>,
    'Attribute': <class 'ldm.Literate_01.Attribute'>,
    'AttributeName': <class 'ldm.Literate_01.AttributeName'>,
    'AttributeReference': <class 'ldm.Literate_01.AttributeReference'>,
    'AttributeSection': <class 'ldm.Literate_01.AttributeSection'>,
    'AttributeSectionName': <class 'ldm.Literate_01.AttributeSectionName'>,
    'BaseDataType': <class 'ldm.Literate_01.BaseDataType'>,
    'CamelCase': <class 'utils.class_casing.CamelCase'>,
    'Class': <class 'ldm.Literate_01.Class'>,
    'ClassName': <class 'ldm.Literate_01.ClassName'>,
    'Class_': <class 'ldm.Literate_01.Class'>,
    'CodeBlock': <class 'ldm.Literate_01.CodeBlock'>,
    'CodeType': <class 'ldm.Literate_01.CodeType'>,
    'Component': <class 'ldm.Literate_01.Component'>,
    'Constraint': <class 'ldm.Literate_01.Constraint'>,
    'DataType': <class 'ldm.Literate_01.SetDataType'>,
    'DataTypeClause': <class 'ldm.Literate_01.DataTypeClause'>,
    'Default': <class 'ldm.Literate_01.Default'>,
    'Derivation': <class 'ldm.Literate_01.Derivation'>,
    'Diagnostic': <class 'ldm.Literate_01.Diagnostic'>,
    'Emoji': <class 'utils.class_pom_token.Emoji'>,
    'Formula': <class 'ldm.Literate_01.Formula'>,
    'FormulaCoding': <class 'ldm.Literate_01.FormulaCoding'>,
    'IsExclusive': <class 'utils.class_pom_token.IsExclusive'>,
    'IsExhaustive': <class 'utils.class_pom_token.IsExhaustive'>,
    'IsOptional': <class 'utils.class_pom_token.IsOptional'>,
    'Label': <class 'ldm.Literate_01.Label'>,
    'ListDataType': <class 'ldm.Literate_01.ListDataType'>,
    'LiterateModel': <class 'ldm.Literate_01.LiterateModel'>,
    'LowerCamel': <class 'utils.class_casing.LowerCamel'>,
    'MappingDataType': <class 'ldm.Literate_01.MappingDataType'>,
    'MinorComponent': <class 'ldm.Literate_01.MinorComponent'>,
    'ModelName': <class 'ldm.Literate_01.ModelName'>,
    'Natural': <class 'ldm.Literate_01.OneLiner'>,
    'NormalCase': <class 'utils.class_casing.NormalCase'>,
    'OneLiner': <class 'ldm.Literate_01.OneLiner'>,
    'Paragraph': <class 'ldm.Literate_01.Paragraph'>,
    'PresentableBoolean': <class 'utils.class_pom_token.PresentableBoolean'>,
    'ReferenceType': <class 'ldm.Literate_01.ReferenceType'>,
    'SetDataType': <class 'ldm.Literate_01.SetDataType'>,
    'Subject': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectB': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectC': <class 'ldm.Literate_01.SubjectC'>,
    'SubjectD': <class 'ldm.Literate_01.SubjectD'>,
    'SubjectE': <class 'ldm.Literate_01.SubjectE'>,
    'SubjectName': <class 'ldm.Literate_01.SubjectName'>,
    'Subtyping': <class 'ldm.Literate_01.Subtyping'>,
    'SubtypingName': <class 'ldm.Literate_01.SubtypingName'>,
    'UpperCamel': <class 'utils.class_casing.UpperCamel'>,
    'ValueType': <class 'ldm.Literate_01.ValueType'>}

Phase: Creating model from dictionary: ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.dict.yaml
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'Paragraph', 'content': 'Just use Mermaid in code block\n'}, {'_type': 'CodeBlock', 'content': '``` notmermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'CodeBlock', 'content': '``` mermaid\n\nerDiagram\nCAR {\nstring registrationNumber\nstring make\nstring model\n}\nPERSON {\nstring firstName\nstring lastName\nint age\n}\n\nstyle CAR fill:#f9f,stroke:#333,stroke-width:4px\n\n\n```'}]}]}]} 
In AttSection post-init for Optional Publication Details, is_optional = Optional
In AttSection post-init for Required Format Details, is_optional = 
In AttSection post-init for Unsaid Other Details, is_optional = None
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'elaboration': [{'_type': 'CodeBlock', 'content': '``` mermaid\nerDiagram\n\n\nclass Subject Component\nclass Section Component\nclass Attribute Component\nclass Class Component\n\nSUBJECT {\nstring name\n\n}\nSubject ||--|{ Subject : contains\nSubject ||--|{ Class : contains\nClass {\nstring name\n}\n\nClass ||--|{ Section : contains\nClass ||--|{ Attribute : contains\nAttribute {\n\nstring name\n}\nSection ||--|{ Attribute : contains\n\n\n\n```'}]} 
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))], 'elaboration': [{'_type': 'Paragraph', 'content': 'And in the elaboration, a figure:\n'}, {'_type': 'Paragraph', 'content': '<figure title="Title on the Figure tag">\n \n+ <img src="../hard_assets/FMKNYIDFrontIMG_1141.jpg" alt="Trulli" style="width:30%">\n \n+ <figcaption>Fig.1 - Trulli, Puglia, Italy.</figcaption>\n \n+ </figure>\n \n+ And the same figure with figure/caption markup\n'}, {'_type': 'Paragraph', 'content': '<figure >\n \n+ <img src="../hard_assets/FMKNYIDFrontIMG_1141.jpg" title="Title on Image" style="width:20%">\n \n+ <figcaption>My Non-Drivers License</figcaption>\n \n+ </figure>\n \n+ and a list of codes\n'}, {'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]} 
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]} 
Tracing CodeType - type is <class 'dict'> to <class 'ldm.Literate_01.CodeType'>, dict = {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]} 
Tracing ValueType - type is <class 'dict'> to <class 'ldm.Literate_01.ValueType'>, dict = {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]} 
In AttSection post-init for Full Zip Code, is_optional = 
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]} 
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'constrain note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'defaul note', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'derivatio note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]} 
Created model: <class 'ldm.Literate_01.LiterateModel'>

Phase: Validating model
Validating references...
Validation errors: 57

Phase: counting errors
{"Validation Error in Attribute: Required field 'data_type_clause' is missing": 16, "Validation Error in Class: For field 'based_on' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>": 6, "Validation Error in SubjectB: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>": 14, "Validation Error in Constraint: For field 'one_liner' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'list'>": 5, "Validation Error in Class: For field 'abbreviation' - expected typing.Optional[utils.class_casing.CamelCase], but got <class 'str'>": 1, "Validation Error in Class: For field 'subtype_of' - expected typing.Optional[typing.Dict[ldm.Literate_01.ClassName, ldm.Literate_01.SubtypingName]], but got <class 'list'>": 17, "Validation Error in Class: For field 'dependent_of' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>": 1, "Validation Error in Class: For field 'where' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'str'>": 3, "Validation Error in SubjectC: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>": 28, "Validation Error in Attribute: Required field 'name' is missing": 7}
16 	 Validation Error in Attribute: Required field 'data_type_clause' is missing
6 	 Validation Error in Class: For field 'based_on' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>
14 	 Validation Error in SubjectB: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>
5 	 Validation Error in Constraint: For field 'one_liner' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'list'>
1 	 Validation Error in Class: For field 'abbreviation' - expected typing.Optional[utils.class_casing.CamelCase], but got <class 'str'>
17 	 Validation Error in Class: For field 'subtype_of' - expected typing.Optional[typing.Dict[ldm.Literate_01.ClassName, ldm.Literate_01.SubtypingName]], but got <class 'list'>
1 	 Validation Error in Class: For field 'dependent_of' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>
3 	 Validation Error in Class: For field 'where' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'str'>
28 	 Validation Error in SubjectC: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>
7 	 Validation Error in Attribute: Required field 'name' is missing

Phase: Serialing model ...
Model serialized to ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.model.json
Model serialized to ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.model.yaml
..Created model files: ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.model.json and ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.model.yaml

Phase: Rendering back to markdown
6  subjects coming in model
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'utils.class_pom_token.IsOptional'>
WARNING: No render for type <class 'utils.class_pom_token.IsOptional'>
WARNING: No render for type <class 'utils.class_pom_token.IsOptional'>
WARNING: No render for type <class 'utils.class_pom_token.IsOptional'>

Phase: Creating HTML from model dict
All keys are: 
	 message
	 default
	 _type
	 label
	 data_type_clause
	 t_value
	 one_liner
	 parenthetical
	 name
	 based_on
	 content
	 subtype_of
	 annotations
	 constraints
	 as_value_type
	 emoji
	 class_name
	 attribute_sections
	 prefix
	 subjects
	 code
	 is_optional
	 is_optional_lit
	 severity
	 elaboration
	 data_type
	 derivation
	 attributes
	 element_type
	 classes
Orphaned list:  [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')]
Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   the title of the Work of which this is an edition

Starting codeblock
<code class="language-notmermaid">
 block-beta
columns 3
a:3
block:group1:2
columns 2
h i j k
end
g
block:group2:3
%% columns auto (default)
l m n o p q r
end
</code>

and Starting codeblock parent for
<function FluentTag.__getattr__.<locals>.wrapped at 0x0000016BD058ECA0>
Starting codeblock
<code class="language-mermaid">
 block-beta
columns 3
a:3
block:group1:2
columns 2
h i j k
end
g
block:group2:3
%% columns auto (default)
l m n o p q r
end
</code>

and Starting codeblock parent for
<function FluentTag.__getattr__.<locals>.wrapped at 0x0000016BD058F600>
Starting codeblock
<code class="language-mermaid">
 erDiagram
CAR {
string registrationNumber
string make
string model
}
PERSON {
string firstName
string lastName
int age
}

style CAR fill:#f9f,stroke:#333,stroke-width:4px
</code>

and Starting codeblock parent for
<function FluentTag.__getattr__.<locals>.wrapped at 0x0000016BD058F7E0>
Starting codeblock
<code class="language-mermaid">
 erDiagram


class Subject Component
class Section Component
class Attribute Component
class Class Component

SUBJECT {
string name

}
Subject ||--|{ Subject : contains
Subject ||--|{ Class : contains
Class {
string name
}

Class ||--|{ Section : contains
Class ||--|{ Attribute : contains
Attribute {

string name
}
Section ||--|{ Attribute : contains
</code>

and Starting codeblock parent for
<function FluentTag.__getattr__.<locals>.wrapped at 0x0000016BD058ECA0>
Starting codeblock
<code class="language-csv">
 eFormat, Description
E-Book, 'Kindle or Apple books - etc'
PDF, formatted for printing and direct delivery
</code>

and Starting codeblock parent for
<function FluentTag.__getattr__.<locals>.wrapped at 0x0000016BD058E520>
failed on simple content: obj type is CodeBlock, content is...
```csv
eFormat, Description
E-Book, 'Kindle or Apple books - etc'
PDF, formatted for printing and direct delivery

```
Traceback (most recent call last):
  File "C:\Users\fmkat\Dropbox\AllFMKFiles\AllVSCode\FMKProjects\Presentable\ldm\ldm_to_html.py", line 478, in add_html_simple_content
    content_h = as_prose_html(content)
  File "C:\Users\fmkat\Dropbox\AllFMKFiles\AllVSCode\FMKProjects\Presentable\ldm\do_md_parse.py", line 42, in as_prose_html
    codeblock.parent.insert_after(table_soup)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'function' object has no attribute 'insert_after'
Starting codeblock
<code class="language-csv">
 eFormat, Description
E-Book, 'Kindle or Apple books - etc'
PDF, formatted for printing and direct delivery
</code>

and Starting codeblock parent for
<function FluentTag.__getattr__.<locals>.wrapped at 0x0000016BD058E7A0>
failed on simple content: obj type is CodeBlock, content is...
```csv
eFormat, Description
E-Book, 'Kindle or Apple books - etc'
PDF, formatted for printing and direct delivery

```
Traceback (most recent call last):
  File "C:\Users\fmkat\Dropbox\AllFMKFiles\AllVSCode\FMKProjects\Presentable\ldm\ldm_to_html.py", line 478, in add_html_simple_content
    content_h = as_prose_html(content)
  File "C:\Users\fmkat\Dropbox\AllFMKFiles\AllVSCode\FMKProjects\Presentable\ldm\do_md_parse.py", line 42, in as_prose_html
    codeblock.parent.insert_after(table_soup)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'function' object has no attribute 'insert_after'
Starting codeblock
<code class="language-csv">
 Format, Description
E-Book, 'Kindle or Apple books - etc'
PDF, formatted for printing and direct delivery
</code>

and Starting codeblock parent for
<function FluentTag.__getattr__.<locals>.wrapped at 0x0000016BD058EE80>
failed on simple content: obj type is CodeBlock, content is...
```csv
Format, Description
E-Book, 'Kindle or Apple books - etc'
PDF, formatted for printing and direct delivery

```
Traceback (most recent call last):
  File "C:\Users\fmkat\Dropbox\AllFMKFiles\AllVSCode\FMKProjects\Presentable\ldm\ldm_to_html.py", line 478, in add_html_simple_content
    content_h = as_prose_html(content)
  File "C:\Users\fmkat\Dropbox\AllFMKFiles\AllVSCode\FMKProjects\Presentable\ldm\do_md_parse.py", line 42, in as_prose_html
    codeblock.parent.insert_after(table_soup)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'function' object has no attribute 'insert_after'
Orphaned list:  [OneLiner(_type='OneLiner', content=' Must be several for each role\n')]
Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   Must be several for each role

Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   {'author': [a, b, c] }

Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   {'author': [a, b, c] }

Starting codeblock
<code class="language-markdown">
 This is some text, with indented lists
- Item
- Item2
- Item 3
- Item a
- Item b
- Item c
</code>

and Starting codeblock parent for
<function FluentTag.__getattr__.<locals>.wrapped at 0x0000016BD058E980>
Starting codeblock
<code class="language-csv">
 Pos, Date, Name, Price
1, 2023-09-28, Spices, 150$
2, 2023-02-29, Shovel, 1.25$
</code>

and Starting codeblock parent for
<function FluentTag.__getattr__.<locals>.wrapped at 0x0000016BD058DA80>
failed on simple content: obj type is CodeBlock, content is...
```csv
Pos, Date, Name, Price
1, 2023-09-28, Spices, 150$
2, 2023-02-29, Shovel, 1.25$
```
Traceback (most recent call last):
  File "C:\Users\fmkat\Dropbox\AllFMKFiles\AllVSCode\FMKProjects\Presentable\ldm\ldm_to_html.py", line 478, in add_html_simple_content
    content_h = as_prose_html(content)
  File "C:\Users\fmkat\Dropbox\AllFMKFiles\AllVSCode\FMKProjects\Presentable\ldm\do_md_parse.py", line 42, in as_prose_html
    codeblock.parent.insert_after(table_soup)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'function' object has no attribute 'insert_after'
Body classes are None
Saved styled dictionary to ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.html
Body classes are ['reviewing']
Saved styled dictionary (for review) to ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.review.html

Phase: Skipping PDF creation
Directory 'ldm/ldm_models/Markdown/Markdown_results' and its contents have been removed.

Phase: Warming up
Model dir:  ldm/ldm_models/Markdown
Model name:  Markdown
Model doc:  Markdown.md
Model name:  Markdown
Model doc path:  ldm/ldm_models/Markdown/Markdown.md
Results dir:  ldm/ldm_models/Markdown/Markdown_results
Trace path:  ldm/ldm_models/Markdown/Markdown_results/Markdown_trace.txt
Rediirecting to:  ldm/ldm_models/Markdown/Markdown_results/Markdown_trace.txt
