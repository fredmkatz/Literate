
Phase: Parsing model: ldm/ldm_models/LiterateTester/LiterateTester.md
PARSING ldm/ldm_models/LiterateTester/LiterateTester.md

Phase: Deriving dict for model
adding name value. based_on -. [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')]
adding name value. one_liner -.  the title of the Work of which this is an edition

adding name value. code -.  baseWork.title

parsing subtypeOfs:   Edition, Work

SubtypeOf result is  [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
adding name value. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
parsing subtypeOfs:   Edition by Format, Work by Something Else

SubtypeOf result is  [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]
adding name value. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]
parsing subtypeOfs:   Edition

SubtypeOf result is  [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
adding name value. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
raw name = Address, deep = None
adding name value. data_type -.  Edition

adding name value. data_type -.  Edition reference

adding name value. data_type -.  Edition value

adding name value. data_type -.  List of Edition
testing with singular for of class name
adding name value. data_type -.  List of Editions
testing for plural form should be equivalent
adding name value. data_type -.  List of set of Editions

adding name value. data_type -.  List of sets of Editions

adding name value. data_type -.  Person

adding name value. data_type -.  list of People

adding name value. data_type -.  mapping of Roles to Lists of Person values

adding name value. data_type -.  mapping of Role to List of People

Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Must be several for each role

adding name value. code -.  len(contributors[role]) > 1 for each role

adding name value. message -.  not enough contributors for role

adding name value. severity -.  Error

adding name value. one_liner -.  {'author': [a, b, c] }

adding name value. one_liner -.  {'author': [a, b, c] }

.. full dict saved  in ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.dict.yaml and ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.dict.json
Building class map for module: ldm.Literate_01
Class map is
{   'Annotation': <class 'ldm.Literate_01.Annotation'>,
    'AsValue': <class 'class_pom_token.AsValue'>,
    'Attribute': <class 'ldm.Literate_01.Attribute'>,
    'AttributeName': <class 'ldm.Literate_01.AttributeName'>,
    'AttributeReference': <class 'ldm.Literate_01.AttributeReference'>,
    'AttributeSection': <class 'ldm.Literate_01.AttributeSection'>,
    'AttributeSectionName': <class 'ldm.Literate_01.AttributeSectionName'>,
    'BaseDataType': <class 'ldm.Literate_01.BaseDataType'>,
    'CamelCase': <class 'class_casing.CamelCase'>,
    'Class': <class 'ldm.Literate_01.Class'>,
    'ClassName': <class 'ldm.Literate_01.ClassName'>,
    'Class_': <class 'ldm.Literate_01.Class'>,
    'CodeBlock': <class 'ldm.Literate_01.CodeBlock'>,
    'CodeType': <class 'ldm.Literate_01.CodeType'>,
    'Component': <class 'ldm.Literate_01.Component'>,
    'Constraint': <class 'ldm.Literate_01.Constraint'>,
    'DataType': <class 'ldm.Literate_01.SetDataType'>,
    'DataTypeClause': <class 'ldm.Literate_01.DataTypeClause'>,
    'Default': <class 'ldm.Literate_01.Default'>,
    'Derivation': <class 'ldm.Literate_01.Derivation'>,
    'Diagnostic': <class 'ldm.Literate_01.Diagnostic'>,
    'Emoji': <class 'class_pom_token.Emoji'>,
    'Formula': <class 'ldm.Literate_01.Formula'>,
    'FormulaCoding': <class 'ldm.Literate_01.FormulaCoding'>,
    'IsExclusive': <class 'class_pom_token.IsExclusive'>,
    'IsExhaustive': <class 'class_pom_token.IsExhaustive'>,
    'IsOptional': <class 'class_pom_token.IsOptional'>,
    'Label': <class 'ldm.Literate_01.Label'>,
    'ListDataType': <class 'ldm.Literate_01.ListDataType'>,
    'LiterateModel': <class 'ldm.Literate_01.LiterateModel'>,
    'LowerCamel': <class 'class_casing.LowerCamel'>,
    'MappingDataType': <class 'ldm.Literate_01.MappingDataType'>,
    'MinorComponent': <class 'ldm.Literate_01.MinorComponent'>,
    'ModelName': <class 'ldm.Literate_01.ModelName'>,
    'Natural': <class 'ldm.Literate_01.OneLiner'>,
    'NormalCase': <class 'class_casing.NormalCase'>,
    'OneLiner': <class 'ldm.Literate_01.OneLiner'>,
    'Paragraph': <class 'ldm.Literate_01.Paragraph'>,
    'PresentableBoolean': <class 'class_pom_token.PresentableBoolean'>,
    'ReferenceType': <class 'ldm.Literate_01.ReferenceType'>,
    'SetDataType': <class 'ldm.Literate_01.SetDataType'>,
    'Subject': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectB': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectC': <class 'ldm.Literate_01.SubjectC'>,
    'SubjectD': <class 'ldm.Literate_01.SubjectD'>,
    'SubjectE': <class 'ldm.Literate_01.SubjectE'>,
    'SubjectName': <class 'ldm.Literate_01.SubjectName'>,
    'Subtyping': <class 'ldm.Literate_01.Subtyping'>,
    'SubtypingName': <class 'ldm.Literate_01.SubtypingName'>,
    'UpperCamel': <class 'class_casing.UpperCamel'>,
    'ValueType': <class 'ldm.Literate_01.ValueType'>}

Phase: Creating model from dictionary: ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.dict.yaml
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'Paragraph', 'content': 'Just use Mermaid in code block\n'}, {'_type': 'CodeBlock', 'content': '``` notmermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'CodeBlock', 'content': '``` mermaid\n\nerDiagram\nCAR {\nstring registrationNumber\nstring make\nstring model\n}\nPERSON {\nstring firstName\nstring lastName\nint age\n}\n\nstyle CAR fill:#f9f,stroke:#333,stroke-width:4px\n\n\n```'}]}]}]} 
In AttSection post-init for Optional Publication Details, is_optional = Optional
In AttSection post-init for Required Format Details, is_optional = 
In AttSection post-init for Unsaid Other Details, is_optional = None
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'elaboration': [{'_type': 'CodeBlock', 'content': '``` mermaid\nerDiagram\n\n\nclass Subject Component\nclass Section Component\nclass Attribute Component\nclass Class Component\n\nSUBJECT {\nstring name\n\n}\nSubject ||--|{ Subject : contains\nSubject ||--|{ Class : contains\nClass {\nstring name\n}\n\nClass ||--|{ Section : contains\nClass ||--|{ Attribute : contains\nAttribute {\n\nstring name\n}\nSection ||--|{ Attribute : contains\n\n\n\n```'}]} 
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))], 'elaboration': [{'_type': 'Paragraph', 'content': 'And in the elaboration, a figure:\n'}, {'_type': 'Paragraph', 'content': '<figure title="Title on the Figure tag">\n \n+ <img src="../hard_assets/FMKNYIDFrontIMG_1141.jpg" alt="Trulli" style="width:30%">\n \n+ <figcaption>Fig.1 - Trulli, Puglia, Italy.</figcaption>\n \n+ </figure>\n \n+ And the same figure with figure/caption markup\n'}, {'_type': 'Paragraph', 'content': '<figure >\n \n+ <img src="../hard_assets/FMKNYIDFrontIMG_1141.jpg" title="Title on Image" style="width:20%">\n \n+ <figcaption>My Non-Drivers License</figcaption>\n \n+ </figure>\n \n+ and a list of codes\n'}, {'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]} 
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]} 
Tracing CodeType - type is <class 'dict'> to <class 'ldm.Literate_01.CodeType'>, dict = {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]} 
Tracing ValueType - type is <class 'dict'> to <class 'ldm.Literate_01.ValueType'>, dict = {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]} 
In AttSection post-init for Full Zip Code, is_optional = 
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]} 
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'constrain note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'defaul note', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'derivatio note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]} 
Created model: <class 'ldm.Literate_01.LiterateModel'>

Phase: Validating model
Validating references...
Validation errors: 1

Phase: counting errors
{"Validation Error in SubjectC: For field 'name' - expected <class 'class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>": 26, "Validation Error in SubjectB: For field 'name' - expected <class 'class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>": 6}
26 	 Validation Error in SubjectC: For field 'name' - expected <class 'class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>
6 	 Validation Error in SubjectB: For field 'name' - expected <class 'class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>

Phase: Serialing model ...
Model serialized to ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.model.json
Model serialized to ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.model.yaml
..Created model files: ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.model.json and ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.model.yaml

Phase: Rendering back to markdown
6  subjects coming in model
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'class_pom_token.IsOptional'>
WARNING: No render for type <class 'class_pom_token.IsOptional'>
WARNING: No render for type <class 'class_pom_token.IsOptional'>
WARNING: No render for type <class 'class_pom_token.IsOptional'>

Phase: Creating HTML from model dict
All keys are: 
	 data_type_clause
	 _type
	 is_optional_lit
	 as_value_type
	 derivation
	 label
	 is_optional
	 elaboration
	 classes
	 severity
	 class_name
	 attributes
	 parenthetical
	 emoji
	 prefix
	 attribute_sections
	 default
	 element_type
	 subjects
	 subtype_of
	 code
	 based_on
	 annotations
	 message
	 one_liner
	 t_value
	 content
	 data_type
	 name
	 constraints
Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Sample Classes">
  Sample Classes
 </a>
 <div class="OneLiner mdhtml">
  <p>
   with a one liner for the subject, spanning
two lines
  </p>
 </div>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Header B">
  Header B
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ####
 </span>
 <a class="SubjectName name" id="Header C">
  Header C
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Editions">
  Editions
 </a>
</div>

Class header is <div class="Class_header header">
 <span class="prefix value">
  _
 </span>
 <a class="ClassName name" id="Edition">
  Edition
 </a>
 <div class="OneLiner mdhtml">
  <p>
   a manifestation of a literary work
  </p>
 </div>
</div>

Orphaned list:  [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')]
Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="title">
  title
 </a>
 <div class="OneLiner mdhtml">
  <p>
   the title, as shown on the book's title page
  </p>
 </div>
 <span class="parenthetical value">
  Full Title
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#FullTitle">
    FullTitle
   </a>
   value
  </span>
 </span>
</div>

Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   the title of the Work of which this is an edition

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="author">
  author
 </a>
 <div class="OneLiner mdhtml">
  <p>
   the writer
  </p>
 </div>
 <span class="parenthetical value">
  Person
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#Person">
    Person
   </a>
   value
  </span>
 </span>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="illustrators">
  illustrators
 </a>
 <div class="OneLiner mdhtml">
  <p>
   artists who supplied the pictures
  </p>
 </div>
 <span class="parenthetical value">
  List of People
 </span>
 <span class="data_type_clause value">
  <span class="list_data_type">
   List of
   <span class="base_data_type">
    <a class="base_class" href="#People">
     People-es
    </a>
    value_es
   </span>
  </span>
 </span>
</div>

AttributeSection header is <div class="AttributeSection_header header">
 <span class="prefix value">
  __
 </span>
 <a class="AttributeSectionName name" id="Optional Publication Details">
  Optional Publication Details
 </a>
 <span class="is_optional value">
  <span class="is_optional">
   Optional
  </span>
 </span>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="datePublished">
  datePublished
 </a>
 <div class="OneLiner mdhtml">
  <p>
   when the edition was released to the public
  </p>
 </div>
 <span class="parenthetical value">
  BiblioDate
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#BiblioDate">
    BiblioDate
   </a>
   value
  </span>
 </span>
</div>

AttributeSection header is <div class="AttributeSection_header header">
 <span class="prefix value">
  __
 </span>
 <a class="AttributeSectionName name" id="Required Format Details">
  Required Format Details
 </a>
 <span class="is_optional value">
 </span>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="numberOfPages">
  numberOfPages
 </a>
 <div class="OneLiner mdhtml">
  <p>
   last page number
  </p>
 </div>
 <span class="parenthetical value">
  optional Integer
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#Integer">
    Integer
   </a>
   value
  </span>
 </span>
</div>

AttributeSection header is <div class="AttributeSection_header header">
 <span class="prefix value">
  __
 </span>
 <a class="AttributeSectionName name" id="Unsaid Other Details">
  Unsaid Other Details
 </a>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="datePublished">
  datePublished
 </a>
 <div class="OneLiner mdhtml">
  <p>
   when the edition was released to the public
  </p>
 </div>
 <span class="parenthetical value">
  BiblioDate
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#BiblioDate">
    BiblioDate
   </a>
   value
  </span>
 </span>
</div>

Class header is <div class="Class_header header">
 <span class="prefix value">
  _
 </span>
 <a class="ClassName name" id="HardcoverEdition">
  HardcoverEdition
 </a>
</div>

Class header is <div class="Class_header header">
 <span class="prefix value">
  _
 </span>
 <a class="ClassName name" id="PaperbackEdition">
  PaperbackEdition
 </a>
</div>

table follows <table border="1" class="dataframe">
 <thead>
  <tr style="text-align: right;">
   <th>
   </th>
   <th>
    eFormat
   </th>
   <th>
    Description
   </th>
  </tr>
 </thead>
 <tbody>
  <tr>
   <th>
    0
   </th>
   <td>
    E-Book
   </td>
   <td>
    'Kindle or Apple books - etc'
   </td>
  </tr>
  <tr>
   <th>
    1
   </th>
   <td>
    PDF
   </td>
   <td>
    formatted for printing and direct delivery
   </td>
  </tr>
 </tbody>
</table>

Class header is <div class="Class_header header">
 <span class="prefix value">
  _
 </span>
 <a class="ClassName name" id="ElectronicEdition">
  ElectronicEdition
 </a>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="eFormat">
  eFormat
 </a>
 <div class="OneLiner mdhtml">
  <p>
   the precise medium for the electronic edition
  </p>
 </div>
 <span class="parenthetical value">
  Code
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#Code">
    Code
   </a>
   value
  </span>
 </span>
</div>

table follows <table border="1" class="dataframe">
 <thead>
  <tr style="text-align: right;">
   <th>
   </th>
   <th>
    eFormat
   </th>
   <th>
    Description
   </th>
  </tr>
 </thead>
 <tbody>
  <tr>
   <th>
    0
   </th>
   <td>
    E-Book
   </td>
   <td>
    'Kindle or Apple books - etc'
   </td>
  </tr>
  <tr>
   <th>
    1
   </th>
   <td>
    PDF
   </td>
   <td>
    formatted for printing and direct delivery
   </td>
  </tr>
 </tbody>
</table>

table follows <table border="1" class="dataframe">
 <thead>
  <tr style="text-align: right;">
   <th>
   </th>
   <th>
    Format
   </th>
   <th>
    Description
   </th>
  </tr>
 </thead>
 <tbody>
  <tr>
   <th>
    0
   </th>
   <td>
    E-Book
   </td>
   <td>
    'Kindle or Apple books - etc'
   </td>
  </tr>
  <tr>
   <th>
    1
   </th>
   <td>
    PDF
   </td>
   <td>
    formatted for printing and direct delivery
   </td>
  </tr>
 </tbody>
</table>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Addresses">
  Addresses
 </a>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="streetAddress">
  streetAddress
 </a>
 <div class="OneLiner mdhtml">
  <p>
   usually the street and number
  </p>
 </div>
 <span class="parenthetical value">
  Text
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#Text">
    Text
   </a>
   value
  </span>
 </span>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="streetAddress">
  streetAddress
 </a>
 <div class="OneLiner mdhtml">
  <p>
   usually the apartment or unit number
  </p>
 </div>
 <span class="parenthetical value">
  Text
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#Text">
    Text
   </a>
   value
  </span>
 </span>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="city">
  city
 </a>
 <span class="parenthetical value">
  US City
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#UsCity">
    UsCity
   </a>
   value
  </span>
 </span>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="state">
  state
 </a>
 <span class="parenthetical value">
  US State
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#UsState">
    UsState
   </a>
   value
  </span>
 </span>
</div>

AttributeSection header is <div class="AttributeSection_header header">
 <span class="prefix value">
  __
 </span>
 <a class="AttributeSectionName name" id="Full Zip Code">
  Full Zip Code
 </a>
 <span class="is_optional value">
 </span>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="mainZipCode">
  mainZipCode
 </a>
 <span class="parenthetical value">
  Required Number
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#RequiredNumber">
    RequiredNumber
   </a>
   value
  </span>
 </span>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="preciseZipCode">
  preciseZipCode
 </a>
 <span class="parenthetical value">
  Optiona Numberl
 </span>
 <span class="data_type_clause value">
  <span class="base_data_type">
   <a class="base_class" href="#OptionaNumberl">
    OptionaNumberl
   </a>
   value
  </span>
 </span>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Next steps">
  Next steps
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Clean up">
  Clean up
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Complete">
  Complete
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Validation">
  Validation
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Flesh out">
  Flesh out
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Futures">
  Futures
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Tests to include">
  Tests to include
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Headers">
  Headers
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Name tests Variations Styling Anchors">
  Name tests Variations Styling Anchors
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Class clauses">
  Class clauses
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Attribute clauses">
  Attribute clauses
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Constraints and derivations">
  Constraints and derivations
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="More Tests needed">
  More Tests needed
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Formula Tester English OCL Message Severity">
  Formula Tester English OCL Message Severity
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Data types">
  Data types
 </a>
</div>

Class header is <div class="Class_header header">
 <span class="prefix value">
  _
 </span>
 <a class="ClassName name" id="LiteraryWork">
  LiteraryWork
 </a>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="firstEdition">
  firstEdition
 </a>
 <div class="OneLiner mdhtml">
  <p>
   a home for the data type clauses
  </p>
 </div>
 <span class="parenthetical value">
  List of Edition
 </span>
 <span class="data_type_clause value">
  <span class="list_data_type">
   List of
   <span class="base_data_type">
    <a class="base_class" href="#Edition">
     Edition-es
    </a>
    value_es
   </span>
  </span>
 </span>
</div>

Class header is <div class="Class_header header">
 <span class="prefix value">
  _
 </span>
 <a class="ClassName name" id="Edition">
  Edition
 </a>
 <div class="OneLiner mdhtml">
  <p>
   to try more complex data types
  </p>
 </div>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="author">
  author
 </a>
 <div class="OneLiner mdhtml">
  <p>
   assuming just one
  </p>
 </div>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="artists">
  artists
 </a>
 <div class="OneLiner mdhtml">
  <p>
   allowing for multiple
  </p>
 </div>
</div>

Attribute header is <div class="Attribute_header header">
 <span class="prefix value">
  -
 </span>
 <a class="AttributeName name" id="contributors">
  contributors
 </a>
</div>

Orphaned list:  [OneLiner(_type='OneLiner', content=' Must be several for each role\n')]
Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   Must be several for each role

Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   {'author': [a, b, c] }

Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   {'author': [a, b, c] }

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Data type clauses">
  Data type clauses
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Elaborations">
  Elaborations
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Paragraphs">
  Paragraphs
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Lists indented lists">
  Lists indented lists
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Code blocks with language">
  Code blocks with language
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Block quotes">
  Block quotes
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Pseudo admonitions">
  Pseudo admonitions
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Markdown code blocks">
  Markdown code blocks
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Code Tables">
  Code Tables
 </a>
 <div class="OneLiner mdhtml">
  <p>
   CSV Codeblock
So. This is the
   <strong>
    one to use to enter codes
   </strong>
   , lists of annotations, etc
  </p>
 </div>
</div>

table follows <table border="1" class="dataframe">
 <thead>
  <tr style="text-align: right;">
   <th>
   </th>
   <th>
    Pos
   </th>
   <th>
    Date
   </th>
   <th>
    Name
   </th>
   <th>
    Price
   </th>
  </tr>
 </thead>
 <tbody>
  <tr>
   <th>
    0
   </th>
   <td>
    1
   </td>
   <td>
    2023-09-28
   </td>
   <td>
    Spices
   </td>
   <td>
    150$
   </td>
  </tr>
  <tr>
   <th>
    1
   </th>
   <td>
    2
   </td>
   <td>
    2023-02-29
   </td>
   <td>
    Shovel
   </td>
   <td>
    1.25$
   </td>
  </tr>
 </tbody>
</table>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="HTML code center This should be centered center">
  HTML code center This should be centered center
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Comments">
  Comments
 </a>
</div>

failed on simple content: obj type is Paragraph, content is...
[This is a comment that will be hidden.]: #

failed on simple content: obj type is Paragraph, content is...
[This is a comment that will be hidden.]: #

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Diagrams">
  Diagrams
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ###
 </span>
 <a class="SubjectName name" id="Figures">
  Figures
 </a>
</div>

Saved styled dictionary to ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.html
Saved styled dictionary (for review) to ldm/ldm_models/LiterateTester/LiterateTester_results/LiterateTester.review.html

Phase: Skipping PDF creation
