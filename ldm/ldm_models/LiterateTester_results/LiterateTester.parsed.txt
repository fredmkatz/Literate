Document - <class 'dull_dsl.dull_parser_core.DocPart'> 
. LiterateModel - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ LiterateModel_Head: # Literate Tester
_ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.', extra_text=[])], extra_text=[])]
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Sample Classes - with a one liner for the subject, spanningtwo lines
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='And an elaboration, with a few paragraphs', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Paragraph 2', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Paragraph 3', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Editions
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: Class Edition - a manifestation of a literary work
_ _ _ _ _ BASED_ON: basedOn: Literary Work, Other Base
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - Title - the title, as shown on the book's title page (Full Title)
. . . . . . Default - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ DEFAULT: Default: the title of the Work of which this is an edition
_ _ _ _ _ _ _ CODE: Code: baseWork.title
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - Author - the writer (Person)
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - Illustrators - artists who supplied the pictures (List of People)Shows use of plural for class.
. . . . . AttributeSection - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ AttributeSection_Head: __ Optional Publication Details (Optional)
. . . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ Attribute_Head: - Date Published - when the edition was released to the public (BiblioDate)
. . . . . AttributeSection - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ AttributeSection_Head: __ Required Format Details (Required)
. . . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ Attribute_Head: - Number of pages  - last page number  (optional Integer)
. . . . . AttributeSection - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ AttributeSection_Head: __ Unsaid Other Details
. . . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ Attribute_Head: - Date Published - when the edition was released to the public (BiblioDate)
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: _ Hardcover Edition
_ _ _ _ _ SUBTYPE_OF: subtype of: Edition, Work
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: _ Paperback Edition
_ _ _ _ _ SUBTYPE_OF: subtype of: Edition by Format, Work by Something Else
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: _ Electronic Edition
_ _ _ _ _ SUBTYPE_OF: subtype of: Edition
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - eFormat - the precise medium for the electronic edition (Code)
_ _ _ _ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```csv', extra_text=['eFormat, Description', "E-Book, 'Kindle or Apple books - etc'", 'PDF, formatted for printing and direct delivery', '', '```'])]
. . . . CodeType - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ CodeType_Head: Code Type: EBook Format - the precise medium for the electronic edition
_ _ _ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```csv', extra_text=['Format, Description', "E-Book, 'Kindle or Apple books - etc'", 'PDF, formatted for printing and direct delivery', '', '```'])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Addresses
. . . . ValueType - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ ValueType_Head: Value Type: Address - a US Street address
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - Street Address 1 - usually the street and number (Text)
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - Street Address 2 - usually the apartment or unit number (Text)
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - City (US City)
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - State (US State)
. . . . . AttributeSection - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ AttributeSection_Head: __ Full ZipCode (Required)
. . . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ Attribute_Head: - main zip code (Required Number)
. . . . . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ _ WILD: Must be: 5 digits
. . . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ Attribute_Head: - precise zip code (Optiona Numberl)
. . . . . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ _ WILD: Must be: 4 digits
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Next steps
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Clean up
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Name parsing', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* value types', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Rendering code blocks. capture language', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Subtypings - exclusive, exhaustive', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Data types with reference/value and cardinality', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Optional on Attribute Section', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Complete
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Code types', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* And data block', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Validation
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* cycles', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* references to classes, subtypings', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* references to attributes', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Flesh out
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Subtypes, subtypings', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* inverse attributes', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Overrides what', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* explicit for data type value/reference', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Futures
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Diagrams', extra_text=[])], extra_text=[])]
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Tests to include
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Headers
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes", extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Subject - w/ one-liner', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Class one-liner?, Value Type', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Attribute Section - optional?', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Attribute Header', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='**  with and without one-liners', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='** with and without data type expressions', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Formulas, derivation, default, constraint', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Annotations', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Name tests* Variations 
+ * Styling 
+ * Anchors
. . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ WILD: * In:* Headers 
+ * Class lists 
+ * subtyping lists 
+ *
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Class clauses
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Plural', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Abbreviation', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Subtype of', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Based on', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Where', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Diagnostics', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Annotations', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Fleshed in', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Subtypes, subtypings', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Dependents', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Ancestors', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Attribute clauses
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Data type', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Default', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Derivation', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Constraint', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Required/optional - if/unless', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Fleshed in', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* overrides', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* inverse of', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Constraints and derivations
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## More Tests needed
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Formula Tester* English 
+ * OCL 
+ * Message 
+ * Severity
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Data types
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Base Type. Reference vs Value', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* List, set, mapping types', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Nested operators', extra_text=[])], extra_text=[])]
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: _ Literary Work
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - first Edition - a home for the data type clauses (List of Edition)
_ _ _ _ _ _ DATA_TYPE: data type: Edition
_ _ _ _ _ _ DATA_TYPE: data type: Edition reference
_ _ _ _ _ _ DATA_TYPE: data type: Edition value
_ _ _ _ _ _ DATA_TYPE: data type: List of Editiontesting with singular for of class name
_ _ _ _ _ _ DATA_TYPE: data type: List of Editionstesting for plural form should be equivalent
_ _ _ _ _ _ DATA_TYPE: data type: List of set of Editions
_ _ _ _ _ _ DATA_TYPE: data type: List of sets of Editions
. . . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ Class_Head: _ Edition - to try more complex data types
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - author - assuming just one
_ _ _ _ _ _ DATA_TYPE: data type: Person
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - artists - allowing for multiple
_ _ _ _ _ _ DATA_TYPE: data type: list of People
. . . . . Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ Attribute_Head: - contributors
_ _ _ _ _ _ DATA_TYPE: data type: mapping of Roles to Lists of Person values
_ _ _ _ _ _ DATA_TYPE: data type: mapping of Role to List of People
. . . . . . Constraint - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ CONSTRAINT: constraint: Must be several for each role
_ _ _ _ _ _ _ CODE: code: len(contributors[role]) > 1 for each role
_ _ _ _ _ _ _ MESSAGE: message: not enough contributors for role
_ _ _ _ _ _ _ SEVERITY: severity: Error
. . . . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ WILD: con note: constraints take annotations which may spanmultiple lines.
_ _ _ _ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='And those annotations may have their own elaborations.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Which may contain more that one paragraph.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="Here's a second paragraph, followed by a code block", extra_text=[])], extra_text=[]), TypedLine(type_label='CODE_FENCE', line_Type=None, content='``` markdown', extra_text=['This is the code block for  the annotation', '```'])]
. . . . . . Default - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ DEFAULT: default: {'author': [a, b, c] }
. . . . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ WILD: def ote: defaults take annotations
. . . . . . Derivation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ DERIVATION: derivation: {'author': [a, b, c] }
. . . . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ _ _ WILD: der note: derivations take annotations
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Data type clauses
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Optionality', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='* Cardinality', extra_text=[])], extra_text=[])]
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Elaborations
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Paragraphs
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Unindented paragraph.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Indented paragraph.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Lists, indented lists
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Code blocks with language
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Block quotes
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> paragraph with angle before first line', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> parag with angles on every line', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> next line', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> next line', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Nested block quotes', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> paragraph with angle before first line', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>> Nested goes here', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='and not on next line and many subsequent lines', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Pseudo admonitions
. . . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ WILD: This is a :warning: Don't do that
_ _ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> :warning: **Warning:**', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Do not push the big red button.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> :memo: **Note:** Sunrises are beautiful.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> :bulb: **Tip:** Remember to appreciate the little things in life.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='So, how do I insert an emoji?  🐛', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='In Obsidian the colon, after a space? 🛰', extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Markdown code blocks?
_ _ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```markdown', extra_text=['This is some text, with indented lists', '- Item', '- Item2', '- Item 3', '- Item a', '- Item b', '- Item c', '```'])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Code Tables - CSV CodeblockSo. This is the **one to use to enter codes**, lists of annotations, etc
_ _ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```csv', extra_text=['Pos, Date, Name, Price', '1, 2023-09-28, Spices, 150$', '2, 2023-02-29, Shovel, 1.25$', '```'])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### HTML code<center> 
+ This should be centered 
+ </center>
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Comments
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="Here's a paragraph that will be visible.", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="(Hard to see what's required: blank lines?]", extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='[This is a comment that will be hidden.]: #', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='[This is a comment] #', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='[This is a comment that will be hidden.]: #', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="And here's another paragraph that's visible.", extra_text=[])], extra_text=[])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Figures![[DSC00273 Copy.jpg]]
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='just copy and paste into Obsidian page (or drag and drop)', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Captions are harder', extra_text=[])], extra_text=[])]
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## DiagramsJust use Mermaid in code block
_ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='``` (mermaid)', extra_text=['', 'block-beta', 'columns 3', 'a:3', 'block:group1:2', 'columns 2', 'h i j k', 'end', 'g', 'block:group2:3', '%% columns auto (default)', 'l m n o p q r', 'end', '```']), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="And here's the result", extra_text=[])], extra_text=[]), TypedLine(type_label='CODE_FENCE', line_Type=None, content='```mermaid', extra_text=['', 'block-beta', 'columns 3', 'a:3', 'block:group1:2', 'columns 2', 'h i j k', 'end', 'g', 'block:group2:3', '%% columns auto (default)', 'l m n o p q r', 'end', '```'])]
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Admonitions
_ _ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```ad-tip', extra_text=['title: This is a tip', 'This is the content of the admonition tip.', '```'])]
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Obsidian Callouts
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> [!info]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="> Here's a callout block.", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> ![[Engelbart.jpg]]', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> [!note]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Lorem ipsum dolor sit amet', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> [!abstract]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Lorem ipsum dolor sit amet', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> [!question]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Lorem ipsum dolor sit amet', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='>[!question]', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>Why is the sky blue?', extra_text=[])], extra_text=[])]
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Capabilities
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### To PDF
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### To HTML
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Prettify
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Edit in VS Code
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### TOC
. . . SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ SubjectC_Head: ### Index
