
Phase: Warming up
Model dir:  ldm/ldm_models
Model doc:  LiterateTester.md
Model name:  LiterateTester
Model doc path:  ldm/ldm_models/LiterateTester.md
Model module:  Literate01.py
Model module path:  ldm/ldm_models/Literate01.py
Results dir:  ldm/ldm_models/LiterateTester_results

Phase: Parsing model: {model_doc_path}
PARSING ldm/ldm_models/LiterateTester.md
Found LiterateModel_Head: # Literate Tester
For LiterateModel_Head: # Literate Tester
  new: LiterateModel
Found BLANK_LINE: 
Found TEXT_LINE: This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.
Found SubjectB_Head: ## Sample Classes - with a one liner for the subject, spanning
For SubjectB_Head: ## Sample Classes - with a one liner for the subject, spanningtwo lines
  new: SubjectB
Found BLANK_LINE: 
Found TEXT_LINE: And an elaboration, with a few paragraphs
Found BLANK_LINE: 
Found TEXT_LINE: Paragraph 2
Found BLANK_LINE: 
Found BLANK_LINE: 
Found TEXT_LINE: Paragraph 3
Found BLANK_LINE: 
Found BLANK_LINE: 
Found SubjectC_Head: ### Editions
For SubjectC_Head: ### Editions
  new: SubjectC
Found Class_Head: Class Edition - a manifestation of a literary work
For Class_Head: Class Edition - a manifestation of a literary work
  new: Class
Found BASED_ON: basedOn: Literary Work, Other Base
Found Attribute_Head: - Title - the title, as shown on the book's title page (Full Title)
For Attribute_Head: - Title - the title, as shown on the book's title page (Full Title)
  new: Attribute
Found DEFAULT: Default: the title of the Work of which this is an edition
For DEFAULT: Default: the title of the Work of which this is an edition
  new: Default
Found CODE: Code: baseWork.title
Found Attribute_Head: - Author - the writer (Person)
For Attribute_Head: - Author - the writer (Person)
  new: Attribute
Found Attribute_Head: - Illustrators - artists who supplied the pictures (List of People)
For Attribute_Head: - Illustrators - artists who supplied the pictures (List of People)Shows use of plural for class.
  new: Attribute
Found AttributeSection_Head: __ Optional Publication Details (Optional)
For AttributeSection_Head: __ Optional Publication Details (Optional)
  new: AttributeSection
Found Attribute_Head: - Date Published - when the edition was released to the public (BiblioDate)
For Attribute_Head: - Date Published - when the edition was released to the public (BiblioDate)
  new: Attribute
Found AttributeSection_Head: __ Required Format Details (Required)
For AttributeSection_Head: __ Required Format Details (Required)
  new: AttributeSection
Found Attribute_Head: - Number of pages  - last page number  (optional Integer)
For Attribute_Head: - Number of pages  - last page number  (optional Integer)
  new: Attribute
Found AttributeSection_Head: __ Unsaid Other Details
For AttributeSection_Head: __ Unsaid Other Details
  new: AttributeSection
Found Attribute_Head: - Date Published - when the edition was released to the public (BiblioDate)
For Attribute_Head: - Date Published - when the edition was released to the public (BiblioDate)
  new: Attribute
Found BLANK_LINE: 
Found Class_Head: _ Hardcover Edition
For Class_Head: _ Hardcover Edition
  new: Class
Found SUBTYPE_OF: subtype of: Edition, Work
Found BLANK_LINE: 
Found Class_Head: _ Paperback Edition
For Class_Head: _ Paperback Edition
  new: Class
Found SUBTYPE_OF: subtype of: Edition by Format, Work by Something Else
Found BLANK_LINE: 
Found Class_Head: _ Electronic Edition
For Class_Head: _ Electronic Edition
  new: Class
Found SUBTYPE_OF: subtype of: Edition
Found Attribute_Head: - eFormat - the precise medium for the electronic edition (Code)
For Attribute_Head: - eFormat - the precise medium for the electronic edition (Code)
  new: Attribute
Found CODE_FENCE: ```csv
Found BLANK_LINE: 
Found CodeType_Head: Code Type: EBook Format - the precise medium for the electronic edition
For CodeType_Head: Code Type: EBook Format - the precise medium for the electronic edition
  new: CodeType
Found CODE_FENCE: ```csv
Found SubjectC_Head: ### Addresses
For SubjectC_Head: ### Addresses
  new: SubjectC
Found ValueType_Head: Value Type: Address - a US Street address
For ValueType_Head: Value Type: Address - a US Street address
  new: ValueType
Found Attribute_Head: - Street Address 1 - usually the street and number (Text)
For Attribute_Head: - Street Address 1 - usually the street and number (Text)
  new: Attribute
Found Attribute_Head: - Street Address 2 - usually the apartment or unit number (Text)
For Attribute_Head: - Street Address 2 - usually the apartment or unit number (Text)
  new: Attribute
Found Attribute_Head: - City (US City)
For Attribute_Head: - City (US City)
  new: Attribute
Found Attribute_Head: - State (US State)
For Attribute_Head: - State (US State)
  new: Attribute
Found AttributeSection_Head: __ Full ZipCode (Required)
For AttributeSection_Head: __ Full ZipCode (Required)
  new: AttributeSection
Found Attribute_Head: - main zip code (Required Number)
For Attribute_Head: - main zip code (Required Number)
  new: Attribute
Found WILD: Must be: 5 digits
For WILD: Must be: 5 digits
  new: Annotation
Found Attribute_Head: - precise zip code (Optiona Numberl)
For Attribute_Head: - precise zip code (Optiona Numberl)
  new: Attribute
Found WILD: Must be: 4 digits
For WILD: Must be: 4 digits
  new: Annotation
Found BLANK_LINE: 
Found SubjectB_Head: ## Next steps
For SubjectB_Head: ## Next steps
  new: SubjectB
Found SubjectC_Head: ### Clean up
For SubjectC_Head: ### Clean up
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: * Name parsing
Found TEXT_LINE: * value types
Found TEXT_LINE: * Rendering code blocks. capture language
Found TEXT_LINE: * Subtypings - exclusive, exhaustive
Found TEXT_LINE: * Data types with reference/value and cardinality
Found TEXT_LINE: * Optional on Attribute Section
Found SubjectC_Head: ### Complete
For SubjectC_Head: ### Complete
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: * Code types
Found TEXT_LINE: * And data block
Found SubjectC_Head: ### Validation
For SubjectC_Head: ### Validation
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: * cycles
Found TEXT_LINE: * references to classes, subtypings
Found TEXT_LINE: * references to attributes
Found SubjectC_Head: ### Flesh out
For SubjectC_Head: ### Flesh out
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: * Subtypes, subtypings
Found TEXT_LINE: * inverse attributes
Found TEXT_LINE: * Overrides what
Found TEXT_LINE: * explicit for data type value/reference
Found BLANK_LINE: 
Found SubjectC_Head: ### Futures
For SubjectC_Head: ### Futures
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: * Diagrams
Found SubjectB_Head: ## Tests to include
For SubjectB_Head: ## Tests to include
  new: SubjectB
Found SubjectC_Head: ### Headers
For SubjectC_Head: ### Headers
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes
Found BLANK_LINE: 
Found TEXT_LINE: * Subject - w/ one-liner
Found TEXT_LINE: * Class one-liner?, Value Type
Found TEXT_LINE: * Attribute Section - optional?
Found TEXT_LINE: * Attribute Header
Found TEXT_LINE: **  with and without one-liners
Found TEXT_LINE: ** with and without data type expressions
Found TEXT_LINE: * Formulas, derivation, default, constraint
Found TEXT_LINE: * Annotations
Found BLANK_LINE: 
Found SubjectC_Head: ### Name tests
For SubjectC_Head: ### Name tests* Variations 
+ * Styling 
+ * Anchors
  new: SubjectC
Found WILD: * In:
For WILD: * In:* Headers 
+ * Class lists 
+ * subtyping lists 
+ *
  new: Annotation
Found BLANK_LINE: 
Found SubjectC_Head: ### Class clauses
For SubjectC_Head: ### Class clauses
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: * Plural
Found TEXT_LINE: * Abbreviation
Found TEXT_LINE: * Subtype of
Found TEXT_LINE: * Based on
Found TEXT_LINE: * Where
Found TEXT_LINE: * Diagnostics
Found TEXT_LINE: * Annotations
Found BLANK_LINE: 
Found TEXT_LINE: Fleshed in
Found TEXT_LINE: * Subtypes, subtypings
Found TEXT_LINE: * Dependents
Found TEXT_LINE: * Ancestors
Found TEXT_LINE: *
Found SubjectC_Head: ### Attribute clauses
For SubjectC_Head: ### Attribute clauses
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: * Data type
Found TEXT_LINE: * Default
Found TEXT_LINE: * Derivation
Found TEXT_LINE: * Constraint
Found TEXT_LINE: * Required/optional - if/unless
Found BLANK_LINE: 
Found TEXT_LINE: Fleshed in
Found TEXT_LINE: * overrides
Found TEXT_LINE: * inverse of
Found SubjectC_Head: ### Constraints and derivations
For SubjectC_Head: ### Constraints and derivations
  new: SubjectC
Found BLANK_LINE: 
Found SubjectB_Head: ## More Tests needed
For SubjectB_Head: ## More Tests needed
  new: SubjectB
Found SubjectC_Head: ### Formula Tester
For SubjectC_Head: ### Formula Tester* English 
+ * OCL 
+ * Message 
+ * Severity
  new: SubjectC
Found BLANK_LINE: 
Found SubjectC_Head: ### Data types
For SubjectC_Head: ### Data types
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: * Base Type. Reference vs Value
Found TEXT_LINE: * List, set, mapping types
Found TEXT_LINE: * Nested operators
Found BLANK_LINE: 
Found Class_Head: _ Literary Work
For Class_Head: _ Literary Work
  new: Class
Found Attribute_Head: - first Edition - a home for the data type clauses (List of Edition)
For Attribute_Head: - first Edition - a home for the data type clauses (List of Edition)
  new: Attribute
Found BLANK_LINE: 
Found DATA_TYPE: data type: Edition
Found DATA_TYPE: data type: Edition reference
Found DATA_TYPE: data type: Edition value
Found DATA_TYPE: data type: List of Edition
Found BLANK_LINE: 
Found DATA_TYPE: data type: List of Editions
Found DATA_TYPE: data type: List of set of Editions
Found DATA_TYPE: data type: List of sets of Editions
Found BLANK_LINE: 
Found Class_Head: _ Edition - to try more complex data types
For Class_Head: _ Edition - to try more complex data types
  new: Class
Found Attribute_Head: - author - assuming just one
For Attribute_Head: - author - assuming just one
  new: Attribute
Found DATA_TYPE: data type: Person
Found Attribute_Head: - artists - allowing for multiple
For Attribute_Head: - artists - allowing for multiple
  new: Attribute
Found DATA_TYPE: data type: list of People
Found Attribute_Head: - contributors
For Attribute_Head: - contributors
  new: Attribute
Found DATA_TYPE: data type: mapping of Roles to Lists of Person values
Found DATA_TYPE: data type: mapping of Role to List of People
Found BLANK_LINE: 
Found CONSTRAINT: constraint: Must be several for each role
For CONSTRAINT: constraint: Must be several for each role
  new: Constraint
Found CODE: code: len(contributors[role]) > 1 for each role
Found MESSAGE: message: not enough contributors for role
Found SEVERITY: severity: Error
Found WILD: con note: constraints take annotations which may span
For WILD: con note: constraints take annotations which may spanmultiple lines.
  new: Annotation
Found BLANK_LINE: 
Found TEXT_LINE: And those annotations may have their own elaborations.
Found TEXT_LINE: Which may contain more that one paragraph.
Found BLANK_LINE: 
Found TEXT_LINE: Here's a second paragraph, followed by a code block
Found CODE_FENCE: ``` markdown
Found BLANK_LINE: 
Found BLANK_LINE: 
Found BLANK_LINE: 
Found DEFAULT: default: {'author': [a, b, c] }
For DEFAULT: default: {'author': [a, b, c] }
  new: Default
Found WILD: def ote: defaults take annotations
For WILD: def ote: defaults take annotations
  new: Annotation
Found BLANK_LINE: 
Found DERIVATION: derivation: {'author': [a, b, c] }
For DERIVATION: derivation: {'author': [a, b, c] }
  new: Derivation
Found WILD: der note: derivations take annotations
For WILD: der note: derivations take annotations
  new: Annotation
Found BLANK_LINE: 
Found SubjectC_Head: ### Data type clauses
For SubjectC_Head: ### Data type clauses
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: * Optionality
Found TEXT_LINE: * Cardinality
Found SubjectB_Head: ## Elaborations
For SubjectB_Head: ## Elaborations
  new: SubjectB
Found SubjectC_Head: ### Paragraphs
For SubjectC_Head: ### Paragraphs
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: Unindented paragraph.
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found BLANK_LINE: 
Found TEXT_LINE: Indented paragraph.
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found BLANK_LINE: 
Found SubjectC_Head: ### Lists, indented lists
For SubjectC_Head: ### Lists, indented lists
  new: SubjectC
Found SubjectC_Head: ### Code blocks with language
For SubjectC_Head: ### Code blocks with language
  new: SubjectC
Found SubjectC_Head: ### Block quotes
For SubjectC_Head: ### Block quotes
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: > paragraph with angle before first line
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found BLANK_LINE: 
Found TEXT_LINE: > parag with angles on every line
Found TEXT_LINE: > next line
Found TEXT_LINE: > next line
Found BLANK_LINE: 
Found TEXT_LINE: Nested block quotes
Found BLANK_LINE: 
Found TEXT_LINE: > paragraph with angle before first line
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: >> Nested goes here
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found TEXT_LINE: and not on next line and many subsequent lines
Found SubjectC_Head: ### Pseudo admonitions
For SubjectC_Head: ### Pseudo admonitions
  new: SubjectC
Found BLANK_LINE: 
Found WILD: This is a :warning: Don't do that
For WILD: This is a :warning: Don't do that
  new: Annotation
Found BLANK_LINE: 
Found TEXT_LINE: > :warning: **Warning:**
Found TEXT_LINE: > Do not push the big red button.
Found BLANK_LINE: 
Found TEXT_LINE: > :memo: **Note:** Sunrises are beautiful.
Found BLANK_LINE: 
Found TEXT_LINE: > :bulb: **Tip:** Remember to appreciate the little things in life.
Found BLANK_LINE: 
Found TEXT_LINE: So, how do I insert an emoji?  🐛
Found TEXT_LINE: In Obsidian the colon, after a space? 🛰
Found BLANK_LINE: 
Found SubjectC_Head: ### Markdown code blocks?
For SubjectC_Head: ### Markdown code blocks?
  new: SubjectC
Found CODE_FENCE: ```markdown
Found BLANK_LINE: 
Found BLANK_LINE: 
Found BLANK_LINE: 
Found BLANK_LINE: 
Found SubjectC_Head: ### Code Tables - CSV Codeblock
For SubjectC_Head: ### Code Tables - CSV CodeblockSo. This is the **one to use to enter codes**, lists of annotations, etc
  new: SubjectC
Found BLANK_LINE: 
Found BLANK_LINE: 
Found CODE_FENCE: ```csv
Found BLANK_LINE: 
Found BLANK_LINE: 
Found SubjectC_Head: ### HTML code
For SubjectC_Head: ### HTML code<center> 
+ This should be centered 
+ </center>
  new: SubjectC
Found SubjectC_Head: ### Comments
For SubjectC_Head: ### Comments
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: Here's a paragraph that will be visible.
Found TEXT_LINE: (Hard to see what's required: blank lines?]
Found BLANK_LINE: 
Found TEXT_LINE: [This is a comment that will be hidden.]: #
Found BLANK_LINE: 
Found BLANK_LINE: 
Found TEXT_LINE: [This is a comment] #
Found BLANK_LINE: 
Found BLANK_LINE: 
Found TEXT_LINE: [This is a comment that will be hidden.]: #
Found BLANK_LINE: 
Found TEXT_LINE: And here's another paragraph that's visible.
Found BLANK_LINE: 
Found BLANK_LINE: 
Found SubjectC_Head: ### Figures
For SubjectC_Head: ### Figures![[DSC00273 Copy.jpg]]
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: just copy and paste into Obsidian page (or drag and drop)
Found BLANK_LINE: 
Found TEXT_LINE: Captions are harder
Found BLANK_LINE: 
Found SubjectB_Head: ## Diagrams
For SubjectB_Head: ## DiagramsJust use Mermaid in code block
  new: SubjectB
Found CODE_FENCE: ``` (mermaid)
Found BLANK_LINE: 
Found TEXT_LINE: And here's the result
Found CODE_FENCE: ```mermaid
Found BLANK_LINE: 
Found BLANK_LINE: 
Found SubjectB_Head: ## Admonitions
For SubjectB_Head: ## Admonitions
  new: SubjectB
Found CODE_FENCE: ```ad-tip
Found SubjectC_Head: ### Obsidian Callouts
For SubjectC_Head: ### Obsidian Callouts
  new: SubjectC
Found BLANK_LINE: 
Found TEXT_LINE: > [!info]
Found TEXT_LINE: > Here's a callout block.
Found TEXT_LINE: > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!
Found TEXT_LINE: > ![[Engelbart.jpg]]
Found BLANK_LINE: 
Found TEXT_LINE: > [!note]
Found TEXT_LINE: > Lorem ipsum dolor sit amet
Found BLANK_LINE: 
Found BLANK_LINE: 
Found TEXT_LINE: > [!abstract]
Found TEXT_LINE: > Lorem ipsum dolor sit amet
Found BLANK_LINE: 
Found TEXT_LINE: > [!question]
Found TEXT_LINE: > Lorem ipsum dolor sit amet
Found BLANK_LINE: 
Found BLANK_LINE: 
Found TEXT_LINE: >[!question]
Found TEXT_LINE: >Why is the sky blue?
Found BLANK_LINE: 
Found BLANK_LINE: 
Found SubjectB_Head: ## Capabilities
For SubjectB_Head: ## Capabilities
  new: SubjectB
Found SubjectC_Head: ### To PDF
For SubjectC_Head: ### To PDF
  new: SubjectC
Found SubjectC_Head: ### To HTML
For SubjectC_Head: ### To HTML
  new: SubjectC
Found SubjectC_Head: ### Prettify
For SubjectC_Head: ### Prettify
  new: SubjectC
Found SubjectC_Head: ### Edit in VS Code
For SubjectC_Head: ### Edit in VS Code
  new: SubjectC
Found SubjectC_Head: ### TOC
For SubjectC_Head: ### TOC
  new: SubjectC
Found SubjectC_Head: ### Index
For SubjectC_Head: ### Index
  new: SubjectC
Found BLANK_LINE: 
Found BLANK_LINE: 

Phase: Deriving dict for model
DerivingDict for Part:  Document
DerivingDict for Part:  LiterateModel
		Full header is: # Literate Tester



===
ParsingHeader header: # Literate Tester

ParsingHeader result: {'prefix': '#', 'name': SubjectName(content='Literate Tester', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  SubjectB
		Full header is: ## Sample Classes - with a one liner for the subject, spanning
two lines


===
ParsingHeader header: ## Sample Classes - with a one liner for the subject, spanning
two lines
ParsingHeader result: {'prefix': '##', 'name': SubjectName(content='Sample Classes', _type='SubjectName'), 'one_liner': OneLiner(_type='OneLiner', content='with a one liner for the subject, spanning\ntwo lines'), 'parenthetical': ''}
===

DerivingDict for Part:  SubjectC
		Full header is: ### Editions



===
ParsingHeader header: ### Editions

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Editions', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  Class
		Full header is: Class Edition - a manifestation of a literary work



===
ParsingHeader header: Class Edition - a manifestation of a literary work

Casing: UpperCamel for ['Edition'] = Edition
ParsingHeader result: {'prefix': '_', 'name': ClassName(content='Edition', _type='ClassName'), 'one_liner': OneLiner(_type='OneLiner', content='a manifestation of a literary work'), 'parenthetical': ''}
===

[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for BASED_ON: basedOn: Literary Work, Other Base
Casing: UpperCamel for ['Literary', 'Work'] = LiteraryWork
Casing: UpperCamel for ['Other', 'Base'] = OtherBase
adding name value. based_on -. [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')]
[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')]}
Using ATT_NAME  based_on for based_on
Adding value in ddforpart. based_on -. [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')]
Absorbing to based_on [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')] into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': ''}
Extend [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')] to based_on
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')]}
And the dict has;;;
{
  "_type": "Class",
  "prefix": "_",
  "name": {
    "content": "Edition",
    "_type": "ClassName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a manifestation of a literary work"
  },
  "parenthetical": "",
  "based_on": [
    {
      "content": "LiteraryWork",
      "_type": "ClassName"
    },
    {
      "content": "OtherBase",
      "_type": "ClassName"
    }
  ]
}
DerivingDict for Part:  Attribute
		Full header is: - Title - the title, as shown on the book's title page (Full Title)



===
ParsingHeader header: - Title - the title, as shown on the book's title page (Full Title)

Casing: LowerCamel for ['Title'] = title
Casing: UpperCamel for ['Full', 'Title'] = FullTitle
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='title', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content="the title, as shown on the book's title page"), 'parenthetical': 'Full Title', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='FullTitle', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

DerivingDict for Part:  Default
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DEFAULT: Default: the title of the Work of which this is an edition
adding name value. one_liner -.  the title of the Work of which this is an edition

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n')}
Using ATT_NAME  one_liner for one_liner
Adding value in ddforpart. one_liner -.  the title of the Work of which this is an edition

Absorbing to one_liner  the title of the Work of which this is an edition
 into {'_type': 'Default'}
after absorb, dict has:  {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n')}
And the dict has;;;
{
  "_type": "Default",
  "one_liner": {
    "_type": "OneLiner",
    "content": " the title of the Work of which this is an edition\n"
  }
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for CODE: Code: baseWork.title
adding name value. code -.  baseWork.title

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'code': ' baseWork.title\n'}
Using ATT_NAME  code for code
Adding value in ddforpart. code -.  baseWork.title

Absorbing to code  baseWork.title
 into {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n')}
after absorb, dict has:  {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}
And the dict has;;;
{
  "_type": "Default",
  "one_liner": {
    "_type": "OneLiner",
    "content": " the title of the Work of which this is an edition\n"
  },
  "code": " baseWork.title\n"
}
Re-display for Part:  Default
. Default - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ DEFAULT: Default: the title of the Work of which this is an edition
_ _ CODE: Code: baseWork.title

DerivedDict for Part:  Default
{
  "_type": "Default",
  "one_liner": {
    "_type": "OneLiner",
    "content": " the title of the Work of which this is an edition\n"
  },
  "code": " baseWork.title\n"
}
Absorbing to default {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'} into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}
Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - Title - the title, as shown on the book's title page (Full Title)
. . Default - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ DEFAULT: Default: the title of the Work of which this is an edition
_ _ _ CODE: Code: baseWork.title

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "title",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "the title, as shown on the book's title page"
  },
  "parenthetical": "Full Title",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "FullTitle",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "default": {
    "_type": "Default",
    "one_liner": {
      "_type": "OneLiner",
      "content": " the title of the Work of which this is an edition\n"
    },
    "code": " baseWork.title\n"
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')]}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}} to attributes
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}]}
DerivingDict for Part:  Attribute
		Full header is: - Author - the writer (Person)



===
ParsingHeader header: - Author - the writer (Person)

Casing: LowerCamel for ['Author'] = author
Casing: UpperCamel for ['Person'] = Person
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='author', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='the writer'), 'parenthetical': 'Person', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Person', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - Author - the writer (Person)

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "author",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "the writer"
  },
  "parenthetical": "Person",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "Person",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}]}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} to attributes
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
DerivingDict for Part:  Attribute
		Full header is: - Illustrators - artists who supplied the pictures (List of People)
Shows use of plural for class.


===
ParsingHeader header: - Illustrators - artists who supplied the pictures (List of People)
Shows use of plural for class.
Casing: LowerCamel for ['Illustrators'] = illustrators
Casing: UpperCamel for ['People'] = People
Created list dt:  List of reference People
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='illustrators', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='artists who supplied the pictures'), 'parenthetical': 'List of People', 'data_type_clause': DataTypeClause(data_type=ListDataType(_type='ListDataType', element_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='People', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue'))), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - Illustrators - artists who supplied the pictures (List of People)Shows use of plural for class.

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "illustrators",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "artists who supplied the pictures"
  },
  "parenthetical": "List of People",
  "data_type_clause": {
    "data_type": {
      "_type": "ListDataType",
      "element_type": {
        "_type": "BaseDataType",
        "class_name": {
          "content": "People",
          "_type": "ClassName"
        },
        "as_value_type": {
          "t_value": false,
          "_type": "AsValue"
        }
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} to attributes
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
DerivingDict for Part:  AttributeSection
		Full header is: __ Optional Publication Details (Optional)



===
ParsingHeader header: __ Optional Publication Details (Optional)

AttSection: Optional Result is {'prefix': '__', 'name': AttributeSectionName(content='Optional Publication Details', _type='AttributeSectionName'), 'one_liner': None, 'parenthetical': '', 'is_optional': IsOptional(t_value=True, _type='IsOptional')}
ParsingHeader result: {'prefix': '__', 'name': AttributeSectionName(content='Optional Publication Details', _type='AttributeSectionName'), 'one_liner': None, 'parenthetical': '', 'is_optional': IsOptional(t_value=True, _type='IsOptional')}
===

DerivingDict for Part:  Attribute
		Full header is: - Date Published - when the edition was released to the public (BiblioDate)



===
ParsingHeader header: - Date Published - when the edition was released to the public (BiblioDate)

Casing: LowerCamel for ['Date', 'Published'] = datePublished
Casing: UpperCamel for ['Biblio', 'Date'] = BiblioDate
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='datePublished', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='when the edition was released to the public'), 'parenthetical': 'BiblioDate', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='BiblioDate', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - Date Published - when the edition was released to the public (BiblioDate)

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "datePublished",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "when the edition was released to the public"
  },
  "parenthetical": "BiblioDate",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "BiblioDate",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} into {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} to attributes
after absorb, dict has:  {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
Absorbing to attribute_sections {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
Append {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]} to attribute_sections
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}
DerivingDict for Part:  AttributeSection
		Full header is: __ Required Format Details (Required)



===
ParsingHeader header: __ Required Format Details (Required)

AttSection:  Result is {'prefix': '__', 'name': AttributeSectionName(content='Required Format Details', _type='AttributeSectionName'), 'one_liner': None, 'parenthetical': '', 'is_optional': IsOptional(t_value=False, _type='IsOptional')}
ParsingHeader result: {'prefix': '__', 'name': AttributeSectionName(content='Required Format Details', _type='AttributeSectionName'), 'one_liner': None, 'parenthetical': '', 'is_optional': IsOptional(t_value=False, _type='IsOptional')}
===

DerivingDict for Part:  Attribute
		Full header is: - Number of pages  - last page number  (optional Integer)



===
ParsingHeader header: - Number of pages  - last page number  (optional Integer)

Casing: LowerCamel for ['Number', 'of', 'pages'] = numberOfPages
Casing: UpperCamel for ['Integer'] = Integer
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='numberOfPages', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='last page number'), 'parenthetical': 'optional Integer', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Integer', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - Number of pages  - last page number  (optional Integer)

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "numberOfPages",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "last page number"
  },
  "parenthetical": "optional Integer",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "Integer",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} into {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} to attributes
after absorb, dict has:  {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
Absorbing to attribute_sections {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}
Append {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]} to attribute_sections
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}
DerivingDict for Part:  AttributeSection
		Full header is: __ Unsaid Other Details



===
ParsingHeader header: __ Unsaid Other Details

ParsingHeader result: {'prefix': '__', 'name': AttributeSectionName(content='Unsaid Other Details', _type='AttributeSectionName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  Attribute
		Full header is: - Date Published - when the edition was released to the public (BiblioDate)



===
ParsingHeader header: - Date Published - when the edition was released to the public (BiblioDate)

Casing: LowerCamel for ['Date', 'Published'] = datePublished
Casing: UpperCamel for ['Biblio', 'Date'] = BiblioDate
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='datePublished', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='when the edition was released to the public'), 'parenthetical': 'BiblioDate', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='BiblioDate', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - Date Published - when the edition was released to the public (BiblioDate)

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "datePublished",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "when the edition was released to the public"
  },
  "parenthetical": "BiblioDate",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "BiblioDate",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} into {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': ''}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} to attributes
after absorb, dict has:  {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
Absorbing to attribute_sections {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}
Append {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]} to attribute_sections
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}
Absorbing to classes {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]} into {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': ''}
Append {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]} to classes
after absorb, dict has:  {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}]}
DerivingDict for Part:  Class
		Full header is: _ Hardcover Edition



===
ParsingHeader header: _ Hardcover Edition

Casing: UpperCamel for ['Hardcover', 'Edition'] = HardcoverEdition
ParsingHeader result: {'prefix': '_', 'name': ClassName(content='HardcoverEdition', _type='ClassName'), 'one_liner': None, 'parenthetical': ''}
===

[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for SUBTYPE_OF: subtype of: Edition, Work
parsing subtypeOfs:   Edition, Work

Casing: UpperCamel for ['Edition'] = Edition
Casing: LowerCamel for ['Subtypes'] = subtypes
Casing: UpperCamel for ['Work'] = Work
Casing: LowerCamel for ['Subtypes'] = subtypes
SubtypeOf result is  [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
adding name value. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}
Using ATT_NAME  subtype_of for subtype_of
Adding value in ddforpart. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
Absorbing to subtype_of [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))] into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': ''}
Extend [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))] to subtype_of
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}
And the dict has;;;
{
  "_type": "Class",
  "prefix": "_",
  "name": {
    "content": "HardcoverEdition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "subtype_of": [
    "UnserializablePiece",
    "UnserializablePiece"
  ]
}
Absorbing to classes {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]} into {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}]}
Append {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]} to classes
after absorb, dict has:  {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}]}
DerivingDict for Part:  Class
		Full header is: _ Paperback Edition



===
ParsingHeader header: _ Paperback Edition

Casing: UpperCamel for ['Paperback', 'Edition'] = PaperbackEdition
ParsingHeader result: {'prefix': '_', 'name': ClassName(content='PaperbackEdition', _type='ClassName'), 'one_liner': None, 'parenthetical': ''}
===

[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for SUBTYPE_OF: subtype of: Edition by Format, Work by Something Else
parsing subtypeOfs:   Edition by Format, Work by Something Else

Casing: UpperCamel for ['Edition'] = Edition
Casing: LowerCamel for ['by', 'Format'] = byFormat
Casing: UpperCamel for ['Work'] = Work
Casing: LowerCamel for ['by', 'Something', 'Else'] = bySomethingElse
SubtypeOf result is  [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]
adding name value. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]
[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}
Using ATT_NAME  subtype_of for subtype_of
Adding value in ddforpart. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]
Absorbing to subtype_of [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))] into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': ''}
Extend [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))] to subtype_of
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}
And the dict has;;;
{
  "_type": "Class",
  "prefix": "_",
  "name": {
    "content": "PaperbackEdition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "subtype_of": [
    "UnserializablePiece",
    "UnserializablePiece"
  ]
}
Absorbing to classes {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]} into {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}]}
Append {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]} to classes
after absorb, dict has:  {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}]}
DerivingDict for Part:  Class
		Full header is: _ Electronic Edition



===
ParsingHeader header: _ Electronic Edition

Casing: UpperCamel for ['Electronic', 'Edition'] = ElectronicEdition
ParsingHeader result: {'prefix': '_', 'name': ClassName(content='ElectronicEdition', _type='ClassName'), 'one_liner': None, 'parenthetical': ''}
===

[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for SUBTYPE_OF: subtype of: Edition
parsing subtypeOfs:   Edition

Casing: UpperCamel for ['Edition'] = Edition
Casing: LowerCamel for ['Subtypes'] = subtypes
SubtypeOf result is  [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
adding name value. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}
Using ATT_NAME  subtype_of for subtype_of
Adding value in ddforpart. subtype_of -. [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]
Absorbing to subtype_of [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))] into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': ''}
Extend [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))] to subtype_of
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}
And the dict has;;;
{
  "_type": "Class",
  "prefix": "_",
  "name": {
    "content": "ElectronicEdition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "subtype_of": [
    "UnserializablePiece"
  ]
}
DerivingDict for Part:  Attribute
		Full header is: - eFormat - the precise medium for the electronic edition (Code)



===
ParsingHeader header: - eFormat - the precise medium for the electronic edition (Code)

Casing: LowerCamel for ['e', 'Format'] = eFormat
Casing: UpperCamel for ['Code'] = Code
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='eFormat', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='the precise medium for the electronic edition'), 'parenthetical': 'Code', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - eFormat - the precise medium for the electronic edition (Code)
_ _ ELABORATION: [TypedLine(type_label='CODE_FENCE', line_Type=None, content='```csv', extra_text=['eFormat, Description', "E-Book, 'Kindle or Apple books - etc'", 'PDF, formatted for printing and direct delivery', '', '```'])]

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "eFormat",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "the precise medium for the electronic edition"
  },
  "parenthetical": "Code",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "Code",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "elaboration": [
    {
      "_type": "CodeBlock",
      "content": "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"
    }
  ]
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]} to attributes
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}
Absorbing to classes {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]} into {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}]}
Append {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]} to classes
after absorb, dict has:  {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}]}
DerivingDict for Part:  CodeType
		Full header is: Code Type: EBook Format - the precise medium for the electronic edition



===
ParsingHeader header: Code Type: EBook Format - the precise medium for the electronic edition

Casing: UpperCamel for ['E', 'Book', 'Format'] = EBookFormat
ParsingHeader result: {'prefix': 'Code Type:', 'name': ClassName(content='EBookFormat', _type='ClassName'), 'one_liner': OneLiner(_type='OneLiner', content='the precise medium for the electronic edition'), 'parenthetical': ''}
===

Absorbing to classes {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]} into {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}]}
Append {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]} to classes
after absorb, dict has:  {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}
Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Addresses



===
ParsingHeader header: ### Addresses

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Addresses', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  ValueType
		Full header is: Value Type: Address - a US Street address



===
ParsingHeader header: Value Type: Address - a US Street address

raw name = Address, deep = None
Casing: UpperCamel for ['Address'] = Address
ParsingHeader result: {'prefix': 'Value Type:', 'name': ClassName(content='Address', _type='ClassName'), 'one_liner': OneLiner(_type='OneLiner', content='a US Street address'), 'parenthetical': ''}
===

DerivingDict for Part:  Attribute
		Full header is: - Street Address 1 - usually the street and number (Text)



===
ParsingHeader header: - Street Address 1 - usually the street and number (Text)

Casing: LowerCamel for ['Street', 'Address'] = streetAddress
Casing: UpperCamel for ['Text'] = Text
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='streetAddress', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='usually the street and number'), 'parenthetical': 'Text', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Text', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - Street Address 1 - usually the street and number (Text)

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "streetAddress",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "usually the street and number"
  },
  "parenthetical": "Text",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "Text",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} into {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': ''}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} to attributes
after absorb, dict has:  {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
DerivingDict for Part:  Attribute
		Full header is: - Street Address 2 - usually the apartment or unit number (Text)



===
ParsingHeader header: - Street Address 2 - usually the apartment or unit number (Text)

Casing: LowerCamel for ['Street', 'Address'] = streetAddress
Casing: UpperCamel for ['Text'] = Text
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='streetAddress', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='usually the apartment or unit number'), 'parenthetical': 'Text', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Text', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - Street Address 2 - usually the apartment or unit number (Text)

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "streetAddress",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "usually the apartment or unit number"
  },
  "parenthetical": "Text",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "Text",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} into {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} to attributes
after absorb, dict has:  {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
DerivingDict for Part:  Attribute
		Full header is: - City (US City)



===
ParsingHeader header: - City (US City)

Casing: LowerCamel for ['City'] = city
Casing: UpperCamel for ['US', 'City'] = UsCity
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='city', _type='AttributeName'), 'one_liner': None, 'parenthetical': 'US City', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='UsCity', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - City (US City)

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "city",
    "_type": "AttributeName"
  },
  "parenthetical": "US City",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "UsCity",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} into {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} to attributes
after absorb, dict has:  {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
DerivingDict for Part:  Attribute
		Full header is: - State (US State)



===
ParsingHeader header: - State (US State)

Casing: LowerCamel for ['State'] = state
Casing: UpperCamel for ['US', 'State'] = UsState
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='state', _type='AttributeName'), 'one_liner': None, 'parenthetical': 'US State', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='UsState', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - State (US State)

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "state",
    "_type": "AttributeName"
  },
  "parenthetical": "US State",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "UsState",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} into {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}} to attributes
after absorb, dict has:  {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
DerivingDict for Part:  AttributeSection
		Full header is: __ Full ZipCode (Required)



===
ParsingHeader header: __ Full ZipCode (Required)

AttSection:  Result is {'prefix': '__', 'name': AttributeSectionName(content='Full Zip Code', _type='AttributeSectionName'), 'one_liner': None, 'parenthetical': '', 'is_optional': IsOptional(t_value=False, _type='IsOptional')}
ParsingHeader result: {'prefix': '__', 'name': AttributeSectionName(content='Full Zip Code', _type='AttributeSectionName'), 'one_liner': None, 'parenthetical': '', 'is_optional': IsOptional(t_value=False, _type='IsOptional')}
===

DerivingDict for Part:  Attribute
		Full header is: - main zip code (Required Number)



===
ParsingHeader header: - main zip code (Required Number)

Casing: LowerCamel for ['main', 'zip', 'code'] = mainZipCode
Casing: UpperCamel for ['Required', 'Number'] = RequiredNumber
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='mainZipCode', _type='AttributeName'), 'one_liner': None, 'parenthetical': 'Required Number', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='RequiredNumber', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

DerivingDict for Part:  Annotation
Absorbing to annotations {'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'} into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}
Append {'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'} to annotations
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}
Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - main zip code (Required Number)
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: Must be: 5 digits

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "mainZipCode",
    "_type": "AttributeName"
  },
  "parenthetical": "Required Number",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "RequiredNumber",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "annotations": [
    {
      "_type": "Annotation",
      "emoji": "",
      "label": "Must be",
      "content": "5 digits"
    }
  ]
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]} into {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]} to attributes
after absorb, dict has:  {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}]}
DerivingDict for Part:  Attribute
		Full header is: - precise zip code (Optiona Numberl)



===
ParsingHeader header: - precise zip code (Optiona Numberl)

Casing: LowerCamel for ['precise', 'zip', 'code'] = preciseZipCode
Casing: UpperCamel for ['Optiona', 'Numberl'] = OptionaNumberl
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='preciseZipCode', _type='AttributeName'), 'one_liner': None, 'parenthetical': 'Optiona Numberl', 'data_type_clause': DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='OptionaNumberl', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

DerivingDict for Part:  Annotation
Absorbing to annotations {'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'} into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}
Append {'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'} to annotations
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}
Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - precise zip code (Optiona Numberl)
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: Must be: 4 digits

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "preciseZipCode",
    "_type": "AttributeName"
  },
  "parenthetical": "Optiona Numberl",
  "data_type_clause": {
    "data_type": {
      "_type": "BaseDataType",
      "class_name": {
        "content": "OptionaNumberl",
        "_type": "ClassName"
      },
      "as_value_type": {
        "t_value": false,
        "_type": "AsValue"
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "annotations": [
    {
      "_type": "Annotation",
      "emoji": "",
      "label": "Must be",
      "content": "4 digits"
    }
  ]
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]} into {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}]}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]} to attributes
after absorb, dict has:  {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}
Absorbing to attribute_sections {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]} into {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}
Append {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]} to attribute_sections
after absorb, dict has:  {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}
Absorbing to classes {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]} into {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': ''}
Append {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]} to classes
after absorb, dict has:  {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}
Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}
Absorbing to subjects {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]} into {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}]}
Append {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]} to subjects
after absorb, dict has:  {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}]}
DerivingDict for Part:  SubjectB
		Full header is: ## Next steps



===
ParsingHeader header: ## Next steps

ParsingHeader result: {'prefix': '##', 'name': SubjectName(content='Next steps', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  SubjectC
		Full header is: ### Clean up



===
ParsingHeader header: ### Clean up

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Clean up', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': ''}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Complete



===
ParsingHeader header: ### Complete

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Complete', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Validation



===
ParsingHeader header: ### Validation

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Validation', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Flesh out



===
ParsingHeader header: ### Flesh out

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Flesh out', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Futures



===
ParsingHeader header: ### Futures

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Futures', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}
Absorbing to subjects {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]} into {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}]}
Append {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]} to subjects
after absorb, dict has:  {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}]}
DerivingDict for Part:  SubjectB
		Full header is: ## Tests to include



===
ParsingHeader header: ## Tests to include

ParsingHeader result: {'prefix': '##', 'name': SubjectName(content='Tests to include', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  SubjectC
		Full header is: ### Headers



===
ParsingHeader header: ### Headers

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Headers', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': ''}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Name tests
* Variations
* Styling
* Anchors


===
ParsingHeader header: ### Name tests
* Variations
* Styling
* Anchors
ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Name tests Variations Styling Anchors', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  Annotation
Absorbing to annotations {'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''} into {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': ''}
Append {'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''} to annotations
after absorb, dict has:  {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}
Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Class clauses



===
ParsingHeader header: ### Class clauses

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Class clauses', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Attribute clauses



===
ParsingHeader header: ### Attribute clauses

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Attribute clauses', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Constraints and derivations



===
ParsingHeader header: ### Constraints and derivations

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Constraints and derivations', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Absorbing to subjects {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]} into {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}]}
Append {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]} to subjects
after absorb, dict has:  {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}]}
DerivingDict for Part:  SubjectB
		Full header is: ## More Tests needed



===
ParsingHeader header: ## More Tests needed

ParsingHeader result: {'prefix': '##', 'name': SubjectName(content='More Tests needed', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  SubjectC
		Full header is: ### Formula Tester
* English
* OCL
* Message
* Severity


===
ParsingHeader header: ### Formula Tester
* English
* OCL
* Message
* Severity
ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Formula Tester English OCL Message Severity', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': ''}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Data types



===
ParsingHeader header: ### Data types

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Data types', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  Class
		Full header is: _ Literary Work



===
ParsingHeader header: _ Literary Work

Casing: UpperCamel for ['Literary', 'Work'] = LiteraryWork
ParsingHeader result: {'prefix': '_', 'name': ClassName(content='LiteraryWork', _type='ClassName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  Attribute
		Full header is: - first Edition - a home for the data type clauses (List of Edition)



===
ParsingHeader header: - first Edition - a home for the data type clauses (List of Edition)

Casing: LowerCamel for ['first', 'Edition'] = firstEdition
Casing: UpperCamel for ['Edition'] = Edition
Created list dt:  List of reference Edition
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='firstEdition', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='a home for the data type clauses'), 'parenthetical': 'List of Edition', 'data_type_clause': DataTypeClause(data_type=ListDataType(_type='ListDataType', element_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Edition', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue'))), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause')}
===

[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: Edition
adding name value. data_type -.  Edition

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' Edition\n'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  Edition

Absorbing to data_type  Edition
 into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' Edition\n'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "firstEdition",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a home for the data type clauses"
  },
  "parenthetical": "List of Edition",
  "data_type_clause": {
    "data_type": {
      "_type": "ListDataType",
      "element_type": {
        "_type": "BaseDataType",
        "class_name": {
          "content": "Edition",
          "_type": "ClassName"
        },
        "as_value_type": {
          "t_value": false,
          "_type": "AsValue"
        }
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "data_type": " Edition\n"
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: Edition reference
adding name value. data_type -.  Edition reference

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' Edition reference\n'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  Edition reference

Absorbing to data_type  Edition reference
 into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' Edition\n'}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' Edition reference\n'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "firstEdition",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a home for the data type clauses"
  },
  "parenthetical": "List of Edition",
  "data_type_clause": {
    "data_type": {
      "_type": "ListDataType",
      "element_type": {
        "_type": "BaseDataType",
        "class_name": {
          "content": "Edition",
          "_type": "ClassName"
        },
        "as_value_type": {
          "t_value": false,
          "_type": "AsValue"
        }
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "data_type": " Edition reference\n"
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: Edition value
adding name value. data_type -.  Edition value

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' Edition value\n'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  Edition value

Absorbing to data_type  Edition value
 into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' Edition reference\n'}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' Edition value\n'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "firstEdition",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a home for the data type clauses"
  },
  "parenthetical": "List of Edition",
  "data_type_clause": {
    "data_type": {
      "_type": "ListDataType",
      "element_type": {
        "_type": "BaseDataType",
        "class_name": {
          "content": "Edition",
          "_type": "ClassName"
        },
        "as_value_type": {
          "t_value": false,
          "_type": "AsValue"
        }
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "data_type": " Edition value\n"
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: List of Editiontesting with singular for of class name
adding name value. data_type -.  List of Edition
testing with singular for of class name
[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' List of Edition\ntesting with singular for of class name'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  List of Edition
testing with singular for of class name
Absorbing to data_type  List of Edition
testing with singular for of class name into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' Edition value\n'}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of Edition\ntesting with singular for of class name'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "firstEdition",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a home for the data type clauses"
  },
  "parenthetical": "List of Edition",
  "data_type_clause": {
    "data_type": {
      "_type": "ListDataType",
      "element_type": {
        "_type": "BaseDataType",
        "class_name": {
          "content": "Edition",
          "_type": "ClassName"
        },
        "as_value_type": {
          "t_value": false,
          "_type": "AsValue"
        }
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "data_type": " List of Edition\ntesting with singular for of class name"
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: List of Editionstesting for plural form should be equivalent
adding name value. data_type -.  List of Editions
testing for plural form should be equivalent
[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' List of Editions\ntesting for plural form should be equivalent'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  List of Editions
testing for plural form should be equivalent
Absorbing to data_type  List of Editions
testing for plural form should be equivalent into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of Edition\ntesting with singular for of class name'}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of Editions\ntesting for plural form should be equivalent'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "firstEdition",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a home for the data type clauses"
  },
  "parenthetical": "List of Edition",
  "data_type_clause": {
    "data_type": {
      "_type": "ListDataType",
      "element_type": {
        "_type": "BaseDataType",
        "class_name": {
          "content": "Edition",
          "_type": "ClassName"
        },
        "as_value_type": {
          "t_value": false,
          "_type": "AsValue"
        }
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "data_type": " List of Editions\ntesting for plural form should be equivalent"
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: List of set of Editions
adding name value. data_type -.  List of set of Editions

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' List of set of Editions\n'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  List of set of Editions

Absorbing to data_type  List of set of Editions
 into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of Editions\ntesting for plural form should be equivalent'}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of set of Editions\n'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "firstEdition",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a home for the data type clauses"
  },
  "parenthetical": "List of Edition",
  "data_type_clause": {
    "data_type": {
      "_type": "ListDataType",
      "element_type": {
        "_type": "BaseDataType",
        "class_name": {
          "content": "Edition",
          "_type": "ClassName"
        },
        "as_value_type": {
          "t_value": false,
          "_type": "AsValue"
        }
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "data_type": " List of set of Editions\n"
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: List of sets of Editions
adding name value. data_type -.  List of sets of Editions

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' List of sets of Editions\n'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  List of sets of Editions

Absorbing to data_type  List of sets of Editions
 into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of set of Editions\n'}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "firstEdition",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a home for the data type clauses"
  },
  "parenthetical": "List of Edition",
  "data_type_clause": {
    "data_type": {
      "_type": "ListDataType",
      "element_type": {
        "_type": "BaseDataType",
        "class_name": {
          "content": "Edition",
          "_type": "ClassName"
        },
        "as_value_type": {
          "t_value": false,
          "_type": "AsValue"
        }
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "data_type": " List of sets of Editions\n"
}
Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - first Edition - a home for the data type clauses (List of Edition)
_ _ DATA_TYPE: data type: Edition
_ _ DATA_TYPE: data type: Edition reference
_ _ DATA_TYPE: data type: Edition value
_ _ DATA_TYPE: data type: List of Editiontesting with singular for of class name
_ _ DATA_TYPE: data type: List of Editionstesting for plural form should be equivalent
_ _ DATA_TYPE: data type: List of set of Editions
_ _ DATA_TYPE: data type: List of sets of Editions

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "firstEdition",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a home for the data type clauses"
  },
  "parenthetical": "List of Edition",
  "data_type_clause": {
    "data_type": {
      "_type": "ListDataType",
      "element_type": {
        "_type": "BaseDataType",
        "class_name": {
          "content": "Edition",
          "_type": "ClassName"
        },
        "as_value_type": {
          "t_value": false,
          "_type": "AsValue"
        }
      }
    },
    "is_optional_lit": {
      "t_value": false,
      "_type": "IsOptional"
    },
    "_type": "DataTypeClause"
  },
  "data_type": " List of sets of Editions\n"
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': ''}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'} to attributes
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}
Absorbing to classes {'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]} into {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}]}
Append {'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]} to classes
after absorb, dict has:  {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}]}
DerivingDict for Part:  Class
		Full header is: _ Edition - to try more complex data types



===
ParsingHeader header: _ Edition - to try more complex data types

Casing: UpperCamel for ['Edition'] = Edition
ParsingHeader result: {'prefix': '_', 'name': ClassName(content='Edition', _type='ClassName'), 'one_liner': OneLiner(_type='OneLiner', content='to try more complex data types'), 'parenthetical': ''}
===

DerivingDict for Part:  Attribute
		Full header is: - author - assuming just one



===
ParsingHeader header: - author - assuming just one

Casing: LowerCamel for ['author'] = author
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='author', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='assuming just one'), 'parenthetical': ''}
===

[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: Person
adding name value. data_type -.  Person

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' Person\n'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  Person

Absorbing to data_type  Person
 into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': ''}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "author",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "assuming just one"
  },
  "parenthetical": "",
  "data_type": " Person\n"
}
Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - author - assuming just one
_ _ DATA_TYPE: data type: Person

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "author",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "assuming just one"
  },
  "parenthetical": "",
  "data_type": " Person\n"
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': ''}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'} to attributes
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}]}
DerivingDict for Part:  Attribute
		Full header is: - artists - allowing for multiple



===
ParsingHeader header: - artists - allowing for multiple

Casing: LowerCamel for ['artists'] = artists
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='artists', _type='AttributeName'), 'one_liner': OneLiner(_type='OneLiner', content='allowing for multiple'), 'parenthetical': ''}
===

[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: list of People
adding name value. data_type -.  list of People

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' list of People\n'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  list of People

Absorbing to data_type  list of People
 into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': ''}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "artists",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "allowing for multiple"
  },
  "parenthetical": "",
  "data_type": " list of People\n"
}
Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - artists - allowing for multiple
_ _ DATA_TYPE: data type: list of People

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "artists",
    "_type": "AttributeName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "allowing for multiple"
  },
  "parenthetical": "",
  "data_type": " list of People\n"
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}]}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'} to attributes
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}]}
DerivingDict for Part:  Attribute
		Full header is: - contributors



===
ParsingHeader header: - contributors

Casing: LowerCamel for ['contributors'] = contributors
ParsingHeader result: {'prefix': '-', 'name': AttributeName(content='contributors', _type='AttributeName'), 'one_liner': None, 'parenthetical': ''}
===

[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: mapping of Roles to Lists of Person values
adding name value. data_type -.  mapping of Roles to Lists of Person values

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' mapping of Roles to Lists of Person values\n'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  mapping of Roles to Lists of Person values

Absorbing to data_type  mapping of Roles to Lists of Person values
 into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': ''}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Roles to Lists of Person values\n'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "contributors",
    "_type": "AttributeName"
  },
  "parenthetical": "",
  "data_type": " mapping of Roles to Lists of Person values\n"
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DATA_TYPE: data type: mapping of Role to List of People
adding name value. data_type -.  mapping of Role to List of People

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'data_type': ' mapping of Role to List of People\n'}
Using ATT_NAME  data_type for data_type
Adding value in ddforpart. data_type -.  mapping of Role to List of People

Absorbing to data_type  mapping of Role to List of People
 into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Roles to Lists of Person values\n'}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n'}
And the dict has;;;
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "contributors",
    "_type": "AttributeName"
  },
  "parenthetical": "",
  "data_type": " mapping of Role to List of People\n"
}
DerivingDict for Part:  Constraint
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for CONSTRAINT: constraint: Must be several for each role
Patched att_name is one_liner for MajorClause(line_label='CONSTRAINT', priority=1, class_started='Constraint', word='constraint', attribute_name='constraint', is_list=False, is_cum=True, special_pattern='', plural='constraintes', handlers=ParseTrivial(), kw_pattern='[_\\*]*constraint[_\\*:]*') is one_liner
adding name value. one_liner -.  Must be several for each role

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'one_liner': OneLiner(_type='OneLiner', content=' Must be several for each role\n')}
Using ATT_NAME  one_liner for one_liner
Adding value in ddforpart. one_liner -.  Must be several for each role

Absorbing to one_liner  Must be several for each role
 into {'_type': 'Constraint'}
Append  Must be several for each role
 to one_liner
after absorb, dict has:  {'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')]}
And the dict has;;;
{
  "_type": "Constraint",
  "one_liner": [
    {
      "_type": "OneLiner",
      "content": " Must be several for each role\n"
    }
  ]
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for CODE: code: len(contributors[role]) > 1 for each role
adding name value. code -.  len(contributors[role]) > 1 for each role

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'code': ' len(contributors[role]) > 1 for each role\n'}
Using ATT_NAME  code for code
Adding value in ddforpart. code -.  len(contributors[role]) > 1 for each role

Absorbing to code  len(contributors[role]) > 1 for each role
 into {'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')]}
after absorb, dict has:  {'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n'}
And the dict has;;;
{
  "_type": "Constraint",
  "one_liner": [
    {
      "_type": "OneLiner",
      "content": " Must be several for each role\n"
    }
  ],
  "code": " len(contributors[role]) > 1 for each role\n"
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for MESSAGE: message: not enough contributors for role
adding name value. message -.  not enough contributors for role

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'message': ' not enough contributors for role\n'}
Using ATT_NAME  message for message
Adding value in ddforpart. message -.  not enough contributors for role

Absorbing to message  not enough contributors for role
 into {'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n'}
after absorb, dict has:  {'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n'}
And the dict has;;;
{
  "_type": "Constraint",
  "one_liner": [
    {
      "_type": "OneLiner",
      "content": " Must be several for each role\n"
    }
  ],
  "code": " len(contributors[role]) > 1 for each role\n",
  "message": " not enough contributors for role\n"
}
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for SEVERITY: severity: Error
adding name value. severity -.  Error

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'severity': ' Error\n'}
Using ATT_NAME  severity for severity
Adding value in ddforpart. severity -.  Error

Absorbing to severity  Error
 into {'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n'}
after absorb, dict has:  {'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}
And the dict has;;;
{
  "_type": "Constraint",
  "one_liner": [
    {
      "_type": "OneLiner",
      "content": " Must be several for each role\n"
    }
  ],
  "code": " len(contributors[role]) > 1 for each role\n",
  "message": " not enough contributors for role\n",
  "severity": " Error\n"
}
Absorbing to constraints {'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'} into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n'}
Append {'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'} to constraints
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}]}
DerivingDict for Part:  Annotation
Absorbing to annotations {'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]} into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}]}
Append {'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]} to annotations
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}]}
DerivingDict for Part:  Default
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DEFAULT: default: {'author': [a, b, c] }
adding name value. one_liner -.  {'author': [a, b, c] }

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}
Using ATT_NAME  one_liner for one_liner
Adding value in ddforpart. one_liner -.  {'author': [a, b, c] }

Absorbing to one_liner  {'author': [a, b, c] }
 into {'_type': 'Default'}
after absorb, dict has:  {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}
And the dict has;;;
{
  "_type": "Default",
  "one_liner": {
    "_type": "OneLiner",
    "content": " {'author': [a, b, c] }\n"
  }
}
Re-display for Part:  Default
. Default - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ DEFAULT: default: {'author': [a, b, c] }

DerivedDict for Part:  Default
{
  "_type": "Default",
  "one_liner": {
    "_type": "OneLiner",
    "content": " {'author': [a, b, c] }\n"
  }
}
Absorbing to default {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")} into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}]}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}
DerivingDict for Part:  Annotation
Absorbing to annotations {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'} into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}
Append {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'} to annotations
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}
DerivingDict for Part:  Derivation
[dull_parser_core.py:180 -                  derive_clause_dict()] <  Called by derive_dict_for_part with args (0,) {}
derive_clause_dict for DERIVATION: derivation: {'author': [a, b, c] }
adding name value. one_liner -.  {'author': [a, b, c] }

[dull_parser_core.py:180 -                  derive_clause_dict()] >  Returned {'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}
Using ATT_NAME  one_liner for one_liner
Adding value in ddforpart. one_liner -.  {'author': [a, b, c] }

Absorbing to one_liner  {'author': [a, b, c] }
 into {'_type': 'Derivation'}
after absorb, dict has:  {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}
And the dict has;;;
{
  "_type": "Derivation",
  "one_liner": {
    "_type": "OneLiner",
    "content": " {'author': [a, b, c] }\n"
  }
}
Re-display for Part:  Derivation
. Derivation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ DERIVATION: derivation: {'author': [a, b, c] }

DerivedDict for Part:  Derivation
{
  "_type": "Derivation",
  "one_liner": {
    "_type": "OneLiner",
    "content": " {'author': [a, b, c] }\n"
  }
}
Absorbing to derivation {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")} into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}
DerivingDict for Part:  Annotation
Absorbing to annotations {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'} into {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}
Append {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'} to annotations
after absorb, dict has:  {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}
Re-display for Part:  Attribute
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - contributors
_ _ DATA_TYPE: data type: mapping of Roles to Lists of Person values
_ _ DATA_TYPE: data type: mapping of Role to List of People
. . Constraint - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ CONSTRAINT: constraint: Must be several for each role
_ _ _ CODE: code: len(contributors[role]) > 1 for each role
_ _ _ MESSAGE: message: not enough contributors for role
_ _ _ SEVERITY: severity: Error
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: con note: constraints take annotations which may spanmultiple lines.
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='And those annotations may have their own elaborations.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Which may contain more that one paragraph.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="Here's a second paragraph, followed by a code block", extra_text=[])], extra_text=[]), TypedLine(type_label='CODE_FENCE', line_Type=None, content='``` markdown', extra_text=['This is the code block for  the annotation', '```'])]
. . Default - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ DEFAULT: default: {'author': [a, b, c] }
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: def ote: defaults take annotations
. . Derivation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ DERIVATION: derivation: {'author': [a, b, c] }
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: der note: derivations take annotations

DerivedDict for Part:  Attribute
{
  "_type": "Attribute",
  "prefix": "-",
  "name": {
    "content": "contributors",
    "_type": "AttributeName"
  },
  "parenthetical": "",
  "data_type": " mapping of Role to List of People\n",
  "constraints": [
    {
      "_type": "Constraint",
      "one_liner": [
        {
          "_type": "OneLiner",
          "content": " Must be several for each role\n"
        }
      ],
      "code": " len(contributors[role]) > 1 for each role\n",
      "message": " not enough contributors for role\n",
      "severity": " Error\n"
    }
  ],
  "annotations": [
    {
      "_type": "Annotation",
      "emoji": "",
      "label": "con note",
      "content": "constraints take annotations which may span",
      "elaboration": [
        {
          "_type": "Paragraph",
          "content": "And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n"
        },
        {
          "_type": "Paragraph",
          "content": "Here's a second paragraph, followed by a code block\n"
        },
        {
          "_type": "CodeBlock",
          "content": "``` markdown\nThis is the code block for  the annotation\n```"
        }
      ]
    },
    {
      "_type": "Annotation",
      "emoji": "",
      "label": "def ote",
      "content": "defaults take annotations"
    },
    {
      "_type": "Annotation",
      "emoji": "",
      "label": "der note",
      "content": "derivations take annotations"
    }
  ],
  "default": {
    "_type": "Default",
    "one_liner": {
      "_type": "OneLiner",
      "content": " {'author': [a, b, c] }\n"
    }
  },
  "derivation": {
    "_type": "Derivation",
    "one_liner": {
      "_type": "OneLiner",
      "content": " {'author': [a, b, c] }\n"
    }
  }
}
Absorbing to attributes {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}} into {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}]}
Append {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}} to attributes
after absorb, dict has:  {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}
Absorbing to classes {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]} into {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}]}
Append {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]} to classes
after absorb, dict has:  {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}
Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Data type clauses



===
ParsingHeader header: ### Data type clauses

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Data type clauses', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}
Absorbing to subjects {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]} into {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}]}
Append {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]} to subjects
after absorb, dict has:  {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}]}
DerivingDict for Part:  SubjectB
		Full header is: ## Elaborations



===
ParsingHeader header: ## Elaborations

ParsingHeader result: {'prefix': '##', 'name': SubjectName(content='Elaborations', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  SubjectC
		Full header is: ### Paragraphs



===
ParsingHeader header: ### Paragraphs

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Paragraphs', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': ''}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Lists, indented lists



===
ParsingHeader header: ### Lists, indented lists

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Lists indented lists', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Code blocks with language



===
ParsingHeader header: ### Code blocks with language

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Code blocks with language', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Block quotes



===
ParsingHeader header: ### Block quotes

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Block quotes', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Pseudo admonitions



===
ParsingHeader header: ### Pseudo admonitions

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Pseudo admonitions', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  Annotation
Absorbing to annotations {'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]} into {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': ''}
Append {'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]} to annotations
after absorb, dict has:  {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}
Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Markdown code blocks?



===
ParsingHeader header: ### Markdown code blocks?

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Markdown code blocks', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Code Tables - CSV Codeblock
So. This is the **one to use to enter codes**, lists of annotations, etc


===
ParsingHeader header: ### Code Tables - CSV Codeblock
So. This is the **one to use to enter codes**, lists of annotations, etc
ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Code Tables', _type='SubjectName'), 'one_liner': OneLiner(_type='OneLiner', content='CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'), 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### HTML code
<center>
This should be centered
</center>


===
ParsingHeader header: ### HTML code
<center>
This should be centered
</center>
ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='HTML code center This should be centered center', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Comments



===
ParsingHeader header: ### Comments

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Comments', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Figures
![[DSC00273 Copy.jpg]]


===
ParsingHeader header: ### Figures
![[DSC00273 Copy.jpg]]
ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Figures DS Copy jpg', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}
Absorbing to subjects {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]} into {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}]}
Append {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]} to subjects
after absorb, dict has:  {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}]}
DerivingDict for Part:  SubjectB
		Full header is: ## Diagrams
Just use Mermaid in code block


===
ParsingHeader header: ## Diagrams
Just use Mermaid in code block
ParsingHeader result: {'prefix': '##', 'name': SubjectName(content='Diagrams Just use Mermaid in code block', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '``` (mermaid)\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}]} into {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}]}
Append {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '``` (mermaid)\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}]} to subjects
after absorb, dict has:  {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '``` (mermaid)\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}]}]}
DerivingDict for Part:  SubjectB
		Full header is: ## Admonitions



===
ParsingHeader header: ## Admonitions

ParsingHeader result: {'prefix': '##', 'name': SubjectName(content='Admonitions', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  SubjectC
		Full header is: ### Obsidian Callouts



===
ParsingHeader header: ### Obsidian Callouts

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Obsidian Callouts', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```'}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]}]}
Absorbing to subjects {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]}]} into {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '``` (mermaid)\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}]}]}
Append {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]}]} to subjects
after absorb, dict has:  {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '``` (mermaid)\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]}]}]}
DerivingDict for Part:  SubjectB
		Full header is: ## Capabilities



===
ParsingHeader header: ## Capabilities

ParsingHeader result: {'prefix': '##', 'name': SubjectName(content='Capabilities', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

DerivingDict for Part:  SubjectC
		Full header is: ### To PDF



===
ParsingHeader header: ### To PDF

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='To PDF', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': ''}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}]}
DerivingDict for Part:  SubjectC
		Full header is: ### To HTML



===
ParsingHeader header: ### To HTML

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='To HTML', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Prettify



===
ParsingHeader header: ### Prettify

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Prettify', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Edit in VS Code



===
ParsingHeader header: ### Edit in VS Code

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Edit in VS Code', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}]}
DerivingDict for Part:  SubjectC
		Full header is: ### TOC



===
ParsingHeader header: ### TOC

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='TOC', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''}]}
DerivingDict for Part:  SubjectC
		Full header is: ### Index



===
ParsingHeader header: ### Index

ParsingHeader result: {'prefix': '###', 'name': SubjectName(content='Index', _type='SubjectName'), 'one_liner': None, 'parenthetical': ''}
===

Absorbing to subjects {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Index', '_type': 'SubjectName'}, 'parenthetical': ''} into {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Append {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Index', '_type': 'SubjectName'}, 'parenthetical': ''} to subjects
after absorb, dict has:  {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Index', '_type': 'SubjectName'}, 'parenthetical': ''}]}
Absorbing to subjects {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Index', '_type': 'SubjectName'}, 'parenthetical': ''}]} into {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '``` (mermaid)\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]}]}]}
Append {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Index', '_type': 'SubjectName'}, 'parenthetical': ''}]} to subjects
after absorb, dict has:  {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '``` (mermaid)\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Index', '_type': 'SubjectName'}, 'parenthetical': ''}]}]}
Absorbing to literate_models {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '``` (mermaid)\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Index', '_type': 'SubjectName'}, 'parenthetical': ''}]}]} into {'_type': 'Document'}
Append {'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '``` (mermaid)\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Index', '_type': 'SubjectName'}, 'parenthetical': ''}]}]} to literate_models
after absorb, dict has:  {'_type': 'Document', 'literate_models': [{'_type': 'LiterateModel', 'prefix': '#', 'name': {'content': 'Literate Tester', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.\n'}], 'subjects': [{'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Sample Classes', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'with a one liner for the subject, spanning\ntwo lines'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'And an elaboration, with a few paragraphs\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 2\n'}, {'_type': 'Paragraph', 'content': 'Paragraph 3\n'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Editions', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Addresses', '_type': 'SubjectName'}, 'parenthetical': '', 'classes': [{'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Next steps', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Clean up', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Name parsing\n \n+ * value types\n \n+ * Rendering code blocks. capture language\n \n+ * Subtypings - exclusive, exhaustive\n \n+ * Data types with reference/value and cardinality\n \n+ * Optional on Attribute Section\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Complete', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Code types\n \n+ * And data block\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Validation', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* cycles\n \n+ * references to classes, subtypings\n \n+ * references to attributes\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Flesh out', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Subtypes, subtypings\n \n+ * inverse attributes\n \n+ * Overrides what\n \n+ * explicit for data type value/reference\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Futures', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Diagrams\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Tests to include', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Headers', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes\n"}, {'_type': 'Paragraph', 'content': '* Subject - w/ one-liner\n \n+ * Class one-liner?, Value Type\n \n+ * Attribute Section - optional?\n \n+ * Attribute Header\n \n+ **  with and without one-liners\n \n+ ** with and without data type expressions\n \n+ * Formulas, derivation, default, constraint\n \n+ * Annotations\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'In', 'content': ''}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Class clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Plural\n \n+ * Abbreviation\n \n+ * Subtype of\n \n+ * Based on\n \n+ * Where\n \n+ * Diagnostics\n \n+ * Annotations\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * Subtypes, subtypings\n \n+ * Dependents\n \n+ * Ancestors\n \n+ *\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Attribute clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Data type\n \n+ * Default\n \n+ * Derivation\n \n+ * Constraint\n \n+ * Required/optional - if/unless\n'}, {'_type': 'Paragraph', 'content': 'Fleshed in\n \n+ * overrides\n \n+ * inverse of\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Constraints and derivations', '_type': 'SubjectName'}, 'parenthetical': ''}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'More Tests needed', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data types', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Base Type. Reference vs Value\n \n+ * List, set, mapping types\n \n+ * Nested operators\n'}], 'classes': [{'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]}, {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Data type clauses', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '* Optionality\n \n+ * Cardinality\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Elaborations', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Paragraphs', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'Unindented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': 'Indented paragraph.\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Lists indented lists', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code blocks with language', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Block quotes', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}, {'_type': 'Paragraph', 'content': '> parag with angles on every line\n \n+ > next line\n \n+ > next line\n'}, {'_type': 'Paragraph', 'content': 'Nested block quotes\n'}, {'_type': 'Paragraph', 'content': '> paragraph with angle before first line\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ >> Nested goes here\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n \n+ and not on next line and many subsequent lines\n'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Pseudo admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'This is a', 'content': "warning: Don't do that", 'elaboration': [{'_type': 'Paragraph', 'content': '> :warning: **Warning:**\n \n+ > Do not push the big red button.\n'}, {'_type': 'Paragraph', 'content': '> :memo: **Note:** Sunrises are beautiful.\n'}, {'_type': 'Paragraph', 'content': '> :bulb: **Tip:** Remember to appreciate the little things in life.\n'}, {'_type': 'Paragraph', 'content': 'So, how do I insert an emoji?  🐛\n \n+ In Obsidian the colon, after a space? 🛰\n'}]}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Markdown code blocks', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```markdown\nThis is some text, with indented lists\n- Item\n- Item2\n- Item 3\n- Item a\n- Item b\n- Item c\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Code Tables', '_type': 'SubjectName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'CSV Codeblock\nSo. This is the **one to use to enter codes**, lists of annotations, etc'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```csv\nPos, Date, Name, Price\n1, 2023-09-28, Spices, 150$\n2, 2023-02-29, Shovel, 1.25$\n```'}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Comments', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "Here's a paragraph that will be visible.\n \n+ (Hard to see what's required: blank lines?]\n"}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment] #\n'}, {'_type': 'Paragraph', 'content': '[This is a comment that will be hidden.]: #\n'}, {'_type': 'Paragraph', 'content': "And here's another paragraph that's visible.\n"}]}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': 'just copy and paste into Obsidian page (or drag and drop)\n'}, {'_type': 'Paragraph', 'content': 'Captions are harder\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '``` (mermaid)\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}, {'_type': 'Paragraph', 'content': "And here's the result\n"}, {'_type': 'CodeBlock', 'content': '```mermaid\n\nblock-beta\ncolumns 3\na:3\nblock:group1:2\ncolumns 2\nh i j k\nend\ng\nblock:group2:3\n%% columns auto (default)\nl m n o p q r\nend\n```'}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Admonitions', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': '```ad-tip\ntitle: This is a tip\nThis is the content of the admonition tip.\n```'}], 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Obsidian Callouts', '_type': 'SubjectName'}, 'parenthetical': '', 'elaboration': [{'_type': 'Paragraph', 'content': "> [!info]\n \n+ > Here's a callout block.\n \n+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!\n \n+ > ![[Engelbart.jpg]]\n"}, {'_type': 'Paragraph', 'content': '> [!note]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!abstract]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '> [!question]\n \n+ > Lorem ipsum dolor sit amet\n'}, {'_type': 'Paragraph', 'content': '>[!question]\n \n+ >Why is the sky blue?\n'}]}]}, {'_type': 'SubjectB', 'prefix': '##', 'name': {'content': 'Capabilities', '_type': 'SubjectName'}, 'parenthetical': '', 'subjects': [{'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To PDF', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'To HTML', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Prettify', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Edit in VS Code', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'TOC', '_type': 'SubjectName'}, 'parenthetical': ''}, {'_type': 'SubjectC', 'prefix': '###', 'name': {'content': 'Index', '_type': 'SubjectName'}, 'parenthetical': ''}]}]}]}
.. full dict saved  in ldm/ldm_models/LiterateTester_results/LiterateTester.dict.yaml and ldm/ldm_models/LiterateTester_results/LiterateTester.dict.json
Building class map for module: ldm.Literate_01
Class map is
{   'Annotation': <class 'ldm.Literate_01.Annotation'>,
    'AsValue': <class 'class_pom_token.AsValue'>,
    'Attribute': <class 'ldm.Literate_01.Attribute'>,
    'AttributeName': <class 'ldm.Literate_01.AttributeName'>,
    'AttributeReference': <class 'ldm.Literate_01.AttributeReference'>,
    'AttributeSection': <class 'ldm.Literate_01.AttributeSection'>,
    'AttributeSectionName': <class 'ldm.Literate_01.AttributeSectionName'>,
    'BaseDataType': <class 'ldm.Literate_01.BaseDataType'>,
    'CamelCase': <class 'class_casing.CamelCase'>,
    'Class': <class 'ldm.Literate_01.Class'>,
    'ClassName': <class 'ldm.Literate_01.ClassName'>,
    'Class_': <class 'ldm.Literate_01.Class'>,
    'CodeBlock': <class 'ldm.Literate_01.CodeBlock'>,
    'CodeType': <class 'ldm.Literate_01.CodeType'>,
    'Component': <class 'ldm.Literate_01.Component'>,
    'Constraint': <class 'ldm.Literate_01.Constraint'>,
    'DataType': <class 'ldm.Literate_01.SetDataType'>,
    'DataTypeClause': <class 'ldm.Literate_01.DataTypeClause'>,
    'Default': <class 'ldm.Literate_01.Default'>,
    'Derivation': <class 'ldm.Literate_01.Derivation'>,
    'Diagnostic': <class 'ldm.Literate_01.Diagnostic'>,
    'Emoji': <class 'class_pom_token.Emoji'>,
    'Formula': <class 'ldm.Literate_01.Formula'>,
    'FormulaCoding': <class 'ldm.Literate_01.FormulaCoding'>,
    'IsExclusive': <class 'class_pom_token.IsExclusive'>,
    'IsExhaustive': <class 'class_pom_token.IsExhaustive'>,
    'IsOptional': <class 'class_pom_token.IsOptional'>,
    'Label': <class 'ldm.Literate_01.Label'>,
    'ListDataType': <class 'ldm.Literate_01.ListDataType'>,
    'LiterateModel': <class 'ldm.Literate_01.LiterateModel'>,
    'LowerCamel': <class 'class_casing.LowerCamel'>,
    'MappingDataType': <class 'ldm.Literate_01.MappingDataType'>,
    'MinorComponent': <class 'ldm.Literate_01.MinorComponent'>,
    'ModelName': <class 'ldm.Literate_01.ModelName'>,
    'Natural': <class 'ldm.Literate_01.OneLiner'>,
    'NormalCase': <class 'class_casing.NormalCase'>,
    'OneLiner': <class 'ldm.Literate_01.OneLiner'>,
    'Paragraph': <class 'ldm.Literate_01.Paragraph'>,
    'PresentableBoolean': <class 'class_pom_token.PresentableBoolean'>,
    'ReferenceType': <class 'ldm.Literate_01.ReferenceType'>,
    'SetDataType': <class 'ldm.Literate_01.SetDataType'>,
    'Subject': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectB': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectC': <class 'ldm.Literate_01.SubjectC'>,
    'SubjectD': <class 'ldm.Literate_01.SubjectD'>,
    'SubjectE': <class 'ldm.Literate_01.SubjectE'>,
    'SubjectName': <class 'ldm.Literate_01.SubjectName'>,
    'Subtyping': <class 'ldm.Literate_01.Subtyping'>,
    'SubtypingName': <class 'ldm.Literate_01.SubtypingName'>,
    'UpperCamel': <class 'class_casing.UpperCamel'>,
    'ValueType': <class 'ldm.Literate_01.ValueType'>}

Phase: Creating model from dictionary: ldm/ldm_models/LiterateTester_results/LiterateTester.dict.yaml
ObjectCreator Creating object of type: LiterateModel - named {'content': 'Literate Tester', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectB - named {'content': 'Sample Classes', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Editions', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Class - named {'content': 'Edition', '_type': 'ClassName'}
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a manifestation of a literary work'}, 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'title', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': "the title, as shown on the book's title page"}, 'parenthetical': 'Full Title', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), 'code': ' baseWork.title\n'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the writer'}, 'parenthetical': 'Person', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'illustrators', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'artists who supplied the pictures'}, 'parenthetical': 'List of People', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': True, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Required Format Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'numberOfPages', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'last page number'}, 'parenthetical': 'optional Integer', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}, {'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'datePublished', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'when the edition was released to the public'}, 'parenthetical': 'BiblioDate', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}]}]} 
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Edition'] = Edition
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'title', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['title'] = title
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Full', 'Title'] = FullTitle
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: Default - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'author', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['author'] = author
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Person'] = Person
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'illustrators', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['illustrators'] = illustrators
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: ListDataType - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['People'] = People
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: AttributeSection - named {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'}
ObjectCreator Creating object of type: AttributeSectionName - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'datePublished', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['date', 'Published'] = datePublished
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Biblio', 'Date'] = BiblioDate
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
In AttSection post-init for Optional Publication Details, is_optional = Optional
ObjectCreator Creating object of type: AttributeSection - named {'content': 'Required Format Details', '_type': 'AttributeSectionName'}
ObjectCreator Creating object of type: AttributeSectionName - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'numberOfPages', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['number', 'Of', 'Pages'] = numberOfPages
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Integer'] = Integer
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
In AttSection post-init for Required Format Details, is_optional = 
ObjectCreator Creating object of type: AttributeSection - named {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'}
ObjectCreator Creating object of type: AttributeSectionName - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'datePublished', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['date', 'Published'] = datePublished
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Biblio', 'Date'] = BiblioDate
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
In AttSection post-init for Unsaid Other Details, is_optional = None


KWARGS are {'prefix': '_', 'name': ClassName(content='Edition', _type='ClassName'), 'one_liner': OneLiner(_type='OneLiner', content='a manifestation of a literary work'), 'parenthetical': '', 'based_on': [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')], 'attributes': [Attribute(one_liner=OneLiner(_type='OneLiner', content="the title, as shown on the book's title page"), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='title', _type='AttributeName'), parenthetical='Full Title', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='FullTitle', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=Default(one_liner=OneLiner(_type='OneLiner', content=' the title of the Work of which this is an edition\n'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Default', english=Paragraph(_type='Paragraph', content=''), code=' baseWork.title\n'), constraints=[]), Attribute(one_liner=OneLiner(_type='OneLiner', content='the writer'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='author', _type='AttributeName'), parenthetical='Person', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Person', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[]), Attribute(one_liner=OneLiner(_type='OneLiner', content='artists who supplied the pictures'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='illustrators', _type='AttributeName'), parenthetical='List of People', abbreviation=None, data_type_clause=DataTypeClause(data_type=ListDataType(_type='ListDataType', element_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='People', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue'))), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[])], 'attribute_sections': [AttributeSection(one_liner=None, elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='AttributeSection', prefix='__', name=AttributeSectionName(content='Optional Publication Details', _type='AttributeSectionName'), parenthetical='', abbreviation=None, is_optional=IsOptional(t_value=True, _type='IsOptional'), attributes=[Attribute(one_liner=OneLiner(_type='OneLiner', content='when the edition was released to the public'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='datePublished', _type='AttributeName'), parenthetical='BiblioDate', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='BiblioDate', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[])]), AttributeSection(one_liner=None, elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='AttributeSection', prefix='__', name=AttributeSectionName(content='Required Format Details', _type='AttributeSectionName'), parenthetical='', abbreviation=None, is_optional=IsOptional(t_value=False, _type='IsOptional'), attributes=[Attribute(one_liner=OneLiner(_type='OneLiner', content='last page number'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='numberOfPages', _type='AttributeName'), parenthetical='optional Integer', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Integer', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[])]), AttributeSection(one_liner=None, elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='AttributeSection', prefix='__', name=AttributeSectionName(content='Unsaid Other Details', _type='AttributeSectionName'), parenthetical='', abbreviation=None, is_optional=IsOptional(t_value=False, _type='IsOptional'), attributes=[Attribute(one_liner=OneLiner(_type='OneLiner', content='when the edition was released to the public'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='datePublished', _type='AttributeName'), parenthetical='BiblioDate', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='BiblioDate', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[])])]}
{
  "prefix": "_",
  "name": {
    "content": "Edition",
    "_type": "ClassName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a manifestation of a literary work"
  },
  "parenthetical": "",
  "based_on": [
    {
      "content": "LiteraryWork",
      "_type": "ClassName"
    },
    {
      "content": "OtherBase",
      "_type": "ClassName"
    }
  ],
  "attributes": [
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "the title, as shown on the book's title page"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "title",
        "_type": "AttributeName"
      },
      "parenthetical": "Full Title",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "FullTitle",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      },
      "default": {
        "one_liner": {
          "_type": "OneLiner",
          "content": " the title of the Work of which this is an edition\n"
        },
        "is_embellishment": false,
        "_type": "Default",
        "english": {
          "_type": "Paragraph",
          "content": ""
        },
        "code": " baseWork.title\n"
      }
    },
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "the writer"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "author",
        "_type": "AttributeName"
      },
      "parenthetical": "Person",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "Person",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    },
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "artists who supplied the pictures"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "illustrators",
        "_type": "AttributeName"
      },
      "parenthetical": "List of People",
      "data_type_clause": {
        "data_type": {
          "_type": "ListDataType",
          "element_type": {
            "_type": "BaseDataType",
            "class_name": {
              "content": "People",
              "_type": "ClassName"
            },
            "as_value_type": {
              "t_value": false,
              "_type": "AsValue"
            }
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    }
  ],
  "attribute_sections": [
    {
      "is_embellishment": false,
      "_type": "AttributeSection",
      "prefix": "__",
      "name": {
        "content": "Optional Publication Details",
        "_type": "AttributeSectionName"
      },
      "parenthetical": "",
      "is_optional": {
        "t_value": true,
        "_type": "IsOptional"
      },
      "attributes": [
        {
          "one_liner": {
            "_type": "OneLiner",
            "content": "when the edition was released to the public"
          },
          "is_embellishment": false,
          "_type": "Attribute",
          "prefix": "-",
          "name": {
            "content": "datePublished",
            "_type": "AttributeName"
          },
          "parenthetical": "BiblioDate",
          "data_type_clause": {
            "data_type": {
              "_type": "BaseDataType",
              "class_name": {
                "content": "BiblioDate",
                "_type": "ClassName"
              },
              "as_value_type": {
                "t_value": false,
                "_type": "AsValue"
              }
            },
            "is_optional_lit": {
              "t_value": false,
              "_type": "IsOptional"
            },
            "_type": "DataTypeClause"
          }
        }
      ]
    },
    {
      "is_embellishment": false,
      "_type": "AttributeSection",
      "prefix": "__",
      "name": {
        "content": "Required Format Details",
        "_type": "AttributeSectionName"
      },
      "parenthetical": "",
      "is_optional": {
        "t_value": false,
        "_type": "IsOptional"
      },
      "attributes": [
        {
          "one_liner": {
            "_type": "OneLiner",
            "content": "last page number"
          },
          "is_embellishment": false,
          "_type": "Attribute",
          "prefix": "-",
          "name": {
            "content": "numberOfPages",
            "_type": "AttributeName"
          },
          "parenthetical": "optional Integer",
          "data_type_clause": {
            "data_type": {
              "_type": "BaseDataType",
              "class_name": {
                "content": "Integer",
                "_type": "ClassName"
              },
              "as_value_type": {
                "t_value": false,
                "_type": "AsValue"
              }
            },
            "is_optional_lit": {
              "t_value": false,
              "_type": "IsOptional"
            },
            "_type": "DataTypeClause"
          }
        }
      ]
    },
    {
      "is_embellishment": false,
      "_type": "AttributeSection",
      "prefix": "__",
      "name": {
        "content": "Unsaid Other Details",
        "_type": "AttributeSectionName"
      },
      "parenthetical": "",
      "is_optional": {
        "t_value": false,
        "_type": "IsOptional"
      },
      "attributes": [
        {
          "one_liner": {
            "_type": "OneLiner",
            "content": "when the edition was released to the public"
          },
          "is_embellishment": false,
          "_type": "Attribute",
          "prefix": "-",
          "name": {
            "content": "datePublished",
            "_type": "AttributeName"
          },
          "parenthetical": "BiblioDate",
          "data_type_clause": {
            "data_type": {
              "_type": "BaseDataType",
              "class_name": {
                "content": "BiblioDate",
                "_type": "ClassName"
              },
              "as_value_type": {
                "t_value": false,
                "_type": "AsValue"
              }
            },
            "is_optional_lit": {
              "t_value": false,
              "_type": "IsOptional"
            },
            "_type": "DataTypeClause"
          }
        }
      ]
    }
  ]
}
...Createed object of type: Class
... = Class: Edition
final object is  {
  "one_liner": {
    "_type": "OneLiner",
    "content": "a manifestation of a literary work"
  },
  "is_embellishment": false,
  "_type": "Class",
  "prefix": "_",
  "name": {
    "content": "Edition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "based_on": [
    {
      "content": "LiteraryWork",
      "_type": "ClassName"
    },
    {
      "content": "OtherBase",
      "_type": "ClassName"
    }
  ],
  "is_value_type": false,
  "attributes": [
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "the title, as shown on the book's title page"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "title",
        "_type": "AttributeName"
      },
      "parenthetical": "Full Title",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "FullTitle",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      },
      "default": {
        "one_liner": {
          "_type": "OneLiner",
          "content": " the title of the Work of which this is an edition\n"
        },
        "is_embellishment": false,
        "_type": "Default",
        "english": {
          "_type": "Paragraph",
          "content": ""
        },
        "code": " baseWork.title\n"
      }
    },
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "the writer"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "author",
        "_type": "AttributeName"
      },
      "parenthetical": "Person",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "Person",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    },
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "artists who supplied the pictures"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "illustrators",
        "_type": "AttributeName"
      },
      "parenthetical": "List of People",
      "data_type_clause": {
        "data_type": {
          "_type": "ListDataType",
          "element_type": {
            "_type": "BaseDataType",
            "class_name": {
              "content": "People",
              "_type": "ClassName"
            },
            "as_value_type": {
              "t_value": false,
              "_type": "AsValue"
            }
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    }
  ],
  "attribute_sections": [
    {
      "is_embellishment": false,
      "_type": "AttributeSection",
      "prefix": "__",
      "name": {
        "content": "Optional Publication Details",
        "_type": "AttributeSectionName"
      },
      "parenthetical": "",
      "is_optional": {
        "t_value": true,
        "_type": "IsOptional"
      },
      "attributes": [
        {
          "one_liner": {
            "_type": "OneLiner",
            "content": "when the edition was released to the public"
          },
          "is_embellishment": false,
          "_type": "Attribute",
          "prefix": "-",
          "name": {
            "content": "datePublished",
            "_type": "AttributeName"
          },
          "parenthetical": "BiblioDate",
          "data_type_clause": {
            "data_type": {
              "_type": "BaseDataType",
              "class_name": {
                "content": "BiblioDate",
                "_type": "ClassName"
              },
              "as_value_type": {
                "t_value": false,
                "_type": "AsValue"
              }
            },
            "is_optional_lit": {
              "t_value": false,
              "_type": "IsOptional"
            },
            "_type": "DataTypeClause"
          }
        }
      ]
    },
    {
      "is_embellishment": false,
      "_type": "AttributeSection",
      "prefix": "__",
      "name": {
        "content": "Required Format Details",
        "_type": "AttributeSectionName"
      },
      "parenthetical": "",
      "is_optional": {
        "t_value": false,
        "_type": "IsOptional"
      },
      "attributes": [
        {
          "one_liner": {
            "_type": "OneLiner",
            "content": "last page number"
          },
          "is_embellishment": false,
          "_type": "Attribute",
          "prefix": "-",
          "name": {
            "content": "numberOfPages",
            "_type": "AttributeName"
          },
          "parenthetical": "optional Integer",
          "data_type_clause": {
            "data_type": {
              "_type": "BaseDataType",
              "class_name": {
                "content": "Integer",
                "_type": "ClassName"
              },
              "as_value_type": {
                "t_value": false,
                "_type": "AsValue"
              }
            },
            "is_optional_lit": {
              "t_value": false,
              "_type": "IsOptional"
            },
            "_type": "DataTypeClause"
          }
        }
      ]
    },
    {
      "is_embellishment": false,
      "_type": "AttributeSection",
      "prefix": "__",
      "name": {
        "content": "Unsaid Other Details",
        "_type": "AttributeSectionName"
      },
      "parenthetical": "",
      "is_optional": {
        "t_value": false,
        "_type": "IsOptional"
      },
      "attributes": [
        {
          "one_liner": {
            "_type": "OneLiner",
            "content": "when the edition was released to the public"
          },
          "is_embellishment": false,
          "_type": "Attribute",
          "prefix": "-",
          "name": {
            "content": "datePublished",
            "_type": "AttributeName"
          },
          "parenthetical": "BiblioDate",
          "data_type_clause": {
            "data_type": {
              "_type": "BaseDataType",
              "class_name": {
                "content": "BiblioDate",
                "_type": "ClassName"
              },
              "as_value_type": {
                "t_value": false,
                "_type": "AsValue"
              }
            },
            "is_optional_lit": {
              "t_value": false,
              "_type": "IsOptional"
            },
            "_type": "DataTypeClause"
          }
        }
      ]
    }
  ]
}
ObjectCreator Creating object of type: Class - named {'content': 'HardcoverEdition', '_type': 'ClassName'}
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'HardcoverEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]} 
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Hardcover', 'Edition'] = HardcoverEdition


KWARGS are {'prefix': '_', 'name': ClassName(content='HardcoverEdition', _type='ClassName'), 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))]}
{
  "prefix": "_",
  "name": {
    "content": "HardcoverEdition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "subtype_of": [
    "UnserializablePiece",
    "UnserializablePiece"
  ]
}
...Createed object of type: Class
... = Class: HardcoverEdition
final object is  {
  "is_embellishment": false,
  "_type": "Class",
  "prefix": "_",
  "name": {
    "content": "HardcoverEdition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "subtype_of": [
    "UnserializablePiece",
    "UnserializablePiece"
  ],
  "is_value_type": false
}
ObjectCreator Creating object of type: Class - named {'content': 'PaperbackEdition', '_type': 'ClassName'}
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'PaperbackEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]} 
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Paperback', 'Edition'] = PaperbackEdition


KWARGS are {'prefix': '_', 'name': ClassName(content='PaperbackEdition', _type='ClassName'), 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName')), (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))]}
{
  "prefix": "_",
  "name": {
    "content": "PaperbackEdition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "subtype_of": [
    "UnserializablePiece",
    "UnserializablePiece"
  ]
}
...Createed object of type: Class
... = Class: PaperbackEdition
final object is  {
  "is_embellishment": false,
  "_type": "Class",
  "prefix": "_",
  "name": {
    "content": "PaperbackEdition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "subtype_of": [
    "UnserializablePiece",
    "UnserializablePiece"
  ],
  "is_value_type": false
}
ObjectCreator Creating object of type: Class - named {'content': 'ElectronicEdition', '_type': 'ClassName'}
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'ElectronicEdition', '_type': 'ClassName'}, 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'eFormat', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': 'Code', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]}]} 
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Electronic', 'Edition'] = ElectronicEdition
ObjectCreator Creating object of type: Attribute - named {'content': 'eFormat', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['e', 'Format'] = eFormat
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Code'] = Code
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: CodeBlock - named Unnamed


KWARGS are {'prefix': '_', 'name': ClassName(content='ElectronicEdition', _type='ClassName'), 'parenthetical': '', 'subtype_of': [(ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))], 'attributes': [Attribute(one_liner=OneLiner(_type='OneLiner', content='the precise medium for the electronic edition'), elaboration=[CodeBlock(content="```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```", _type='CodeBlock')], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='eFormat', _type='AttributeName'), parenthetical='Code', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Code', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[])]}
{
  "prefix": "_",
  "name": {
    "content": "ElectronicEdition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "subtype_of": [
    "UnserializablePiece"
  ],
  "attributes": [
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "the precise medium for the electronic edition"
      },
      "elaboration": [
        {
          "content": "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```",
          "_type": "CodeBlock"
        }
      ],
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "eFormat",
        "_type": "AttributeName"
      },
      "parenthetical": "Code",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "Code",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    }
  ]
}
...Createed object of type: Class
... = Class: ElectronicEdition
final object is  {
  "is_embellishment": false,
  "_type": "Class",
  "prefix": "_",
  "name": {
    "content": "ElectronicEdition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "subtype_of": [
    "UnserializablePiece"
  ],
  "is_value_type": false,
  "attributes": [
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "the precise medium for the electronic edition"
      },
      "elaboration": [
        {
          "content": "```csv\neFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```",
          "_type": "CodeBlock"
        }
      ],
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "eFormat",
        "_type": "AttributeName"
      },
      "parenthetical": "Code",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "Code",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    }
  ]
}
ObjectCreator Creating object of type: CodeType - named {'content': 'EBookFormat', '_type': 'ClassName'}
Tracing CodeType - type is <class 'dict'> to <class 'ldm.Literate_01.CodeType'>, dict = {'_type': 'CodeType', 'prefix': 'Code Type:', 'name': {'content': 'EBookFormat', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'the precise medium for the electronic edition'}, 'parenthetical': '', 'elaboration': [{'_type': 'CodeBlock', 'content': "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```"}]} 
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['E', 'Book', 'Format'] = EBookFormat
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: CodeBlock - named Unnamed


KWARGS are {'prefix': 'Code Type:', 'name': ClassName(content='EBookFormat', _type='ClassName'), 'one_liner': OneLiner(_type='OneLiner', content='the precise medium for the electronic edition'), 'parenthetical': '', 'elaboration': [CodeBlock(content="```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```", _type='CodeBlock')]}
{
  "prefix": "Code Type:",
  "name": {
    "content": "EBookFormat",
    "_type": "ClassName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "the precise medium for the electronic edition"
  },
  "parenthetical": "",
  "elaboration": [
    {
      "content": "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```",
      "_type": "CodeBlock"
    }
  ]
}
...Createed object of type: CodeType
... = Codetype: EBookFormat
final object is  {
  "one_liner": {
    "_type": "OneLiner",
    "content": "the precise medium for the electronic edition"
  },
  "elaboration": [
    {
      "content": "```csv\nFormat, Description\nE-Book, 'Kindle or Apple books - etc'\nPDF, formatted for printing and direct delivery\n\n```",
      "_type": "CodeBlock"
    }
  ],
  "is_embellishment": false,
  "_type": "CodeType",
  "prefix": "Code Type:",
  "name": {
    "content": "EBookFormat",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "is_value_type": true
}
ObjectCreator Creating object of type: SubjectC - named {'content': 'Addresses', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: ValueType - named {'content': 'Address', '_type': 'ClassName'}
Tracing ValueType - type is <class 'dict'> to <class 'ldm.Literate_01.ValueType'>, dict = {'_type': 'ValueType', 'prefix': 'Value Type:', 'name': {'content': 'Address', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a US Street address'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the street and number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'streetAddress', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'usually the apartment or unit number'}, 'parenthetical': 'Text', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'city', '_type': 'AttributeName'}, 'parenthetical': 'US City', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'state', '_type': 'AttributeName'}, 'parenthetical': 'US State', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}}], 'attribute_sections': [{'_type': 'AttributeSection', 'prefix': '__', 'name': {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}, 'parenthetical': '', 'is_optional': {'t_value': False, '_type': 'IsOptional'}, 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'mainZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Required Number', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '5 digits'}]}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'preciseZipCode', '_type': 'AttributeName'}, 'parenthetical': 'Optiona Numberl', 'data_type_clause': {'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'Must be', 'content': '4 digits'}]}]}]} 
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Address'] = Address
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'streetAddress', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['street', 'Address'] = streetAddress
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Text'] = Text
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'streetAddress', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['street', 'Address'] = streetAddress
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Text'] = Text
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'city', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['city'] = city
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Us', 'City'] = UsCity
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'state', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['state'] = state
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Us', 'State'] = UsState
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: AttributeSection - named {'content': 'Full Zip Code', '_type': 'AttributeSectionName'}
ObjectCreator Creating object of type: AttributeSectionName - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'mainZipCode', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['main', 'Zip', 'Code'] = mainZipCode
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Required', 'Number'] = RequiredNumber
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: Annotation - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'preciseZipCode', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['precise', 'Zip', 'Code'] = preciseZipCode
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Optiona', 'Numberl'] = OptionaNumberl
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed
ObjectCreator Creating object of type: Annotation - named Unnamed
In AttSection post-init for Full Zip Code, is_optional = 


KWARGS are {'prefix': 'Value Type:', 'name': ClassName(content='Address', _type='ClassName'), 'one_liner': OneLiner(_type='OneLiner', content='a US Street address'), 'parenthetical': '', 'attributes': [Attribute(one_liner=OneLiner(_type='OneLiner', content='usually the street and number'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='streetAddress', _type='AttributeName'), parenthetical='Text', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Text', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[]), Attribute(one_liner=OneLiner(_type='OneLiner', content='usually the apartment or unit number'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='streetAddress', _type='AttributeName'), parenthetical='Text', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Text', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[]), Attribute(one_liner=None, elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='city', _type='AttributeName'), parenthetical='US City', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='UsCity', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[]), Attribute(one_liner=None, elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='state', _type='AttributeName'), parenthetical='US State', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='UsState', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[])], 'attribute_sections': [AttributeSection(one_liner=None, elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='AttributeSection', prefix='__', name=AttributeSectionName(content='Full Zip Code', _type='AttributeSectionName'), parenthetical='', abbreviation=None, is_optional=IsOptional(t_value=False, _type='IsOptional'), attributes=[Attribute(one_liner=None, elaboration=[], annotations=[Annotation(label='Must be', content='5 digits', emoji='', elaboration=[], _type='Annotation')], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='mainZipCode', _type='AttributeName'), parenthetical='Required Number', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='RequiredNumber', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[]), Attribute(one_liner=None, elaboration=[], annotations=[Annotation(label='Must be', content='4 digits', emoji='', elaboration=[], _type='Annotation')], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='preciseZipCode', _type='AttributeName'), parenthetical='Optiona Numberl', abbreviation=None, data_type_clause=DataTypeClause(data_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='OptionaNumberl', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue')), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[])])]}
{
  "prefix": "Value Type:",
  "name": {
    "content": "Address",
    "_type": "ClassName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "a US Street address"
  },
  "parenthetical": "",
  "attributes": [
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "usually the street and number"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "streetAddress",
        "_type": "AttributeName"
      },
      "parenthetical": "Text",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "Text",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    },
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "usually the apartment or unit number"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "streetAddress",
        "_type": "AttributeName"
      },
      "parenthetical": "Text",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "Text",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    },
    {
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "city",
        "_type": "AttributeName"
      },
      "parenthetical": "US City",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "UsCity",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    },
    {
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "state",
        "_type": "AttributeName"
      },
      "parenthetical": "US State",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "UsState",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    }
  ],
  "attribute_sections": [
    {
      "is_embellishment": false,
      "_type": "AttributeSection",
      "prefix": "__",
      "name": {
        "content": "Full Zip Code",
        "_type": "AttributeSectionName"
      },
      "parenthetical": "",
      "is_optional": {
        "t_value": false,
        "_type": "IsOptional"
      },
      "attributes": [
        {
          "annotations": [
            {
              "label": "Must be",
              "content": "5 digits",
              "emoji": "",
              "_type": "Annotation"
            }
          ],
          "is_embellishment": false,
          "_type": "Attribute",
          "prefix": "-",
          "name": {
            "content": "mainZipCode",
            "_type": "AttributeName"
          },
          "parenthetical": "Required Number",
          "data_type_clause": {
            "data_type": {
              "_type": "BaseDataType",
              "class_name": {
                "content": "RequiredNumber",
                "_type": "ClassName"
              },
              "as_value_type": {
                "t_value": false,
                "_type": "AsValue"
              }
            },
            "is_optional_lit": {
              "t_value": false,
              "_type": "IsOptional"
            },
            "_type": "DataTypeClause"
          }
        },
        {
          "annotations": [
            {
              "label": "Must be",
              "content": "4 digits",
              "emoji": "",
              "_type": "Annotation"
            }
          ],
          "is_embellishment": false,
          "_type": "Attribute",
          "prefix": "-",
          "name": {
            "content": "preciseZipCode",
            "_type": "AttributeName"
          },
          "parenthetical": "Optiona Numberl",
          "data_type_clause": {
            "data_type": {
              "_type": "BaseDataType",
              "class_name": {
                "content": "OptionaNumberl",
                "_type": "ClassName"
              },
              "as_value_type": {
                "t_value": false,
                "_type": "AsValue"
              }
            },
            "is_optional_lit": {
              "t_value": false,
              "_type": "IsOptional"
            },
            "_type": "DataTypeClause"
          }
        }
      ]
    }
  ]
}
...Createed object of type: ValueType
... = Valuetype: Address
final object is  {
  "one_liner": {
    "_type": "OneLiner",
    "content": "a US Street address"
  },
  "is_embellishment": false,
  "_type": "ValueType",
  "prefix": "Value Type:",
  "name": {
    "content": "Address",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "is_value_type": true,
  "attributes": [
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "usually the street and number"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "streetAddress",
        "_type": "AttributeName"
      },
      "parenthetical": "Text",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "Text",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    },
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "usually the apartment or unit number"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "streetAddress",
        "_type": "AttributeName"
      },
      "parenthetical": "Text",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "Text",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    },
    {
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "city",
        "_type": "AttributeName"
      },
      "parenthetical": "US City",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "UsCity",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    },
    {
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "state",
        "_type": "AttributeName"
      },
      "parenthetical": "US State",
      "data_type_clause": {
        "data_type": {
          "_type": "BaseDataType",
          "class_name": {
            "content": "UsState",
            "_type": "ClassName"
          },
          "as_value_type": {
            "t_value": false,
            "_type": "AsValue"
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    }
  ],
  "attribute_sections": [
    {
      "is_embellishment": false,
      "_type": "AttributeSection",
      "prefix": "__",
      "name": {
        "content": "Full Zip Code",
        "_type": "AttributeSectionName"
      },
      "parenthetical": "",
      "is_optional": {
        "t_value": false,
        "_type": "IsOptional"
      },
      "attributes": [
        {
          "annotations": [
            {
              "label": "Must be",
              "content": "5 digits",
              "emoji": "",
              "_type": "Annotation"
            }
          ],
          "is_embellishment": false,
          "_type": "Attribute",
          "prefix": "-",
          "name": {
            "content": "mainZipCode",
            "_type": "AttributeName"
          },
          "parenthetical": "Required Number",
          "data_type_clause": {
            "data_type": {
              "_type": "BaseDataType",
              "class_name": {
                "content": "RequiredNumber",
                "_type": "ClassName"
              },
              "as_value_type": {
                "t_value": false,
                "_type": "AsValue"
              }
            },
            "is_optional_lit": {
              "t_value": false,
              "_type": "IsOptional"
            },
            "_type": "DataTypeClause"
          }
        },
        {
          "annotations": [
            {
              "label": "Must be",
              "content": "4 digits",
              "emoji": "",
              "_type": "Annotation"
            }
          ],
          "is_embellishment": false,
          "_type": "Attribute",
          "prefix": "-",
          "name": {
            "content": "preciseZipCode",
            "_type": "AttributeName"
          },
          "parenthetical": "Optiona Numberl",
          "data_type_clause": {
            "data_type": {
              "_type": "BaseDataType",
              "class_name": {
                "content": "OptionaNumberl",
                "_type": "ClassName"
              },
              "as_value_type": {
                "t_value": false,
                "_type": "AsValue"
              }
            },
            "is_optional_lit": {
              "t_value": false,
              "_type": "IsOptional"
            },
            "_type": "DataTypeClause"
          }
        }
      ]
    }
  ]
}
ObjectCreator Creating object of type: SubjectB - named {'content': 'Next steps', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Clean up', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Complete', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Validation', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Flesh out', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Futures', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectB - named {'content': 'Tests to include', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Headers', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Annotation - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Class clauses', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Attribute clauses', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Constraints and derivations', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectB - named {'content': 'More Tests needed', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Data types', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Class - named {'content': 'LiteraryWork', '_type': 'ClassName'}
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'LiteraryWork', '_type': 'ClassName'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'firstEdition', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'a home for the data type clauses'}, 'parenthetical': 'List of Edition', 'data_type_clause': {'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'}, 'data_type': ' List of sets of Editions\n'}]} 
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Literary', 'Work'] = LiteraryWork
ObjectCreator Creating object of type: Attribute - named {'content': 'firstEdition', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['first', 'Edition'] = firstEdition
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: DataTypeClause - named Unnamed
ObjectCreator Creating object of type: ListDataType - named Unnamed
ObjectCreator Creating object of type: BaseDataType - named Unnamed
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Edition'] = Edition
ObjectCreator Creating object of type: AsValue - named Unnamed
ObjectCreator Creating object of type: IsOptional - named Unnamed


KWARGS are {'prefix': '_', 'name': ClassName(content='LiteraryWork', _type='ClassName'), 'parenthetical': '', 'attributes': [Attribute(one_liner=OneLiner(_type='OneLiner', content='a home for the data type clauses'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='firstEdition', _type='AttributeName'), parenthetical='List of Edition', abbreviation=None, data_type_clause=DataTypeClause(data_type=ListDataType(_type='ListDataType', element_type=BaseDataType(_type='BaseDataType', class_name=ClassName(content='Edition', _type='ClassName'), as_value_type=AsValue(t_value=False, _type='AsValue'))), is_optional_lit=IsOptional(t_value=False, _type='IsOptional'), cardinality=None, _type='DataTypeClause'), overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[])]}
{
  "prefix": "_",
  "name": {
    "content": "LiteraryWork",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "attributes": [
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "a home for the data type clauses"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "firstEdition",
        "_type": "AttributeName"
      },
      "parenthetical": "List of Edition",
      "data_type_clause": {
        "data_type": {
          "_type": "ListDataType",
          "element_type": {
            "_type": "BaseDataType",
            "class_name": {
              "content": "Edition",
              "_type": "ClassName"
            },
            "as_value_type": {
              "t_value": false,
              "_type": "AsValue"
            }
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    }
  ]
}
...Createed object of type: Class
... = Class: LiteraryWork
final object is  {
  "is_embellishment": false,
  "_type": "Class",
  "prefix": "_",
  "name": {
    "content": "LiteraryWork",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "is_value_type": false,
  "attributes": [
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "a home for the data type clauses"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "firstEdition",
        "_type": "AttributeName"
      },
      "parenthetical": "List of Edition",
      "data_type_clause": {
        "data_type": {
          "_type": "ListDataType",
          "element_type": {
            "_type": "BaseDataType",
            "class_name": {
              "content": "Edition",
              "_type": "ClassName"
            },
            "as_value_type": {
              "t_value": false,
              "_type": "AsValue"
            }
          }
        },
        "is_optional_lit": {
          "t_value": false,
          "_type": "IsOptional"
        },
        "_type": "DataTypeClause"
      }
    }
  ]
}
ObjectCreator Creating object of type: Class - named {'content': 'Edition', '_type': 'ClassName'}
Tracing Class - type is <class 'dict'> to <class 'ldm.Literate_01.Class'>, dict = {'_type': 'Class', 'prefix': '_', 'name': {'content': 'Edition', '_type': 'ClassName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'to try more complex data types'}, 'parenthetical': '', 'attributes': [{'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'author', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'assuming just one'}, 'parenthetical': '', 'data_type': ' Person\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'artists', '_type': 'AttributeName'}, 'one_liner': {'_type': 'OneLiner', 'content': 'allowing for multiple'}, 'parenthetical': '', 'data_type': ' list of People\n'}, {'_type': 'Attribute', 'prefix': '-', 'name': {'content': 'contributors', '_type': 'AttributeName'}, 'parenthetical': '', 'data_type': ' mapping of Role to List of People\n', 'constraints': [{'_type': 'Constraint', 'one_liner': [OneLiner(_type='OneLiner', content=' Must be several for each role\n')], 'code': ' len(contributors[role]) > 1 for each role\n', 'message': ' not enough contributors for role\n', 'severity': ' Error\n'}], 'annotations': [{'_type': 'Annotation', 'emoji': '', 'label': 'con note', 'content': 'constraints take annotations which may span', 'elaboration': [{'_type': 'Paragraph', 'content': 'And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'}, {'_type': 'Paragraph', 'content': "Here's a second paragraph, followed by a code block\n"}, {'_type': 'CodeBlock', 'content': '``` markdown\nThis is the code block for  the annotation\n```'}]}, {'_type': 'Annotation', 'emoji': '', 'label': 'def ote', 'content': 'defaults take annotations'}, {'_type': 'Annotation', 'emoji': '', 'label': 'der note', 'content': 'derivations take annotations'}], 'default': {'_type': 'Default', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}, 'derivation': {'_type': 'Derivation', 'one_liner': OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n")}}]} 
ObjectCreator Creating object of type: ClassName - named Unnamed
Casing: UpperCamel for ['Edition'] = Edition
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'author', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['author'] = author
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'artists', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['artists'] = artists
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: Attribute - named {'content': 'contributors', '_type': 'AttributeName'}
ObjectCreator Creating object of type: AttributeName - named Unnamed
Casing: LowerCamel for ['contributors'] = contributors
ObjectCreator Creating object of type: Constraint - named Unnamed
ObjectCreator Creating object of type: Annotation - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: CodeBlock - named Unnamed
ObjectCreator Creating object of type: Annotation - named Unnamed
ObjectCreator Creating object of type: Annotation - named Unnamed
ObjectCreator Creating object of type: Default - named Unnamed
ObjectCreator Creating object of type: Derivation - named Unnamed


KWARGS are {'prefix': '_', 'name': ClassName(content='Edition', _type='ClassName'), 'one_liner': OneLiner(_type='OneLiner', content='to try more complex data types'), 'parenthetical': '', 'attributes': [Attribute(one_liner=OneLiner(_type='OneLiner', content='assuming just one'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='author', _type='AttributeName'), parenthetical='', abbreviation=None, data_type_clause=None, overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[]), Attribute(one_liner=OneLiner(_type='OneLiner', content='allowing for multiple'), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='artists', _type='AttributeName'), parenthetical='', abbreviation=None, data_type_clause=None, overrides=None, inverse=None, inverse_of=None, derivation=None, default=None, constraints=[]), Attribute(one_liner=None, elaboration=[], annotations=[Annotation(label='con note', content='constraints take annotations which may span', emoji='', elaboration=[Paragraph(_type='Paragraph', content='And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n'), Paragraph(_type='Paragraph', content="Here's a second paragraph, followed by a code block\n"), CodeBlock(content='``` markdown\nThis is the code block for  the annotation\n```', _type='CodeBlock')], _type='Annotation'), Annotation(label='def ote', content='defaults take annotations', emoji='', elaboration=[], _type='Annotation'), Annotation(label='der note', content='derivations take annotations', emoji='', elaboration=[], _type='Annotation')], diagnostics=[], is_embellishment=False, _type='Attribute', prefix='-', name=AttributeName(content='contributors', _type='AttributeName'), parenthetical='', abbreviation=None, data_type_clause=None, overrides=None, inverse=None, inverse_of=None, derivation=Derivation(one_liner=OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n"), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Derivation', english=Paragraph(_type='Paragraph', content=''), code=None), default=Default(one_liner=OneLiner(_type='OneLiner', content=" {'author': [a, b, c] }\n"), elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Default', english=Paragraph(_type='Paragraph', content=''), code=None), constraints=[Constraint(one_liner=[OneLiner(_type='OneLiner', content=' Must be several for each role\n')], elaboration=[], annotations=[], diagnostics=[], is_embellishment=False, _type='Constraint', english=Paragraph(_type='Paragraph', content=''), code=' len(contributors[role]) > 1 for each role\n', message=' not enough contributors for role\n', severity=' Error\n')])]}
{
  "prefix": "_",
  "name": {
    "content": "Edition",
    "_type": "ClassName"
  },
  "one_liner": {
    "_type": "OneLiner",
    "content": "to try more complex data types"
  },
  "parenthetical": "",
  "attributes": [
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "assuming just one"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "author",
        "_type": "AttributeName"
      },
      "parenthetical": ""
    },
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "allowing for multiple"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "artists",
        "_type": "AttributeName"
      },
      "parenthetical": ""
    },
    {
      "annotations": [
        {
          "label": "con note",
          "content": "constraints take annotations which may span",
          "emoji": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n"
            },
            {
              "_type": "Paragraph",
              "content": "Here's a second paragraph, followed by a code block\n"
            },
            {
              "content": "``` markdown\nThis is the code block for  the annotation\n```",
              "_type": "CodeBlock"
            }
          ],
          "_type": "Annotation"
        },
        {
          "label": "def ote",
          "content": "defaults take annotations",
          "emoji": "",
          "_type": "Annotation"
        },
        {
          "label": "der note",
          "content": "derivations take annotations",
          "emoji": "",
          "_type": "Annotation"
        }
      ],
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "contributors",
        "_type": "AttributeName"
      },
      "parenthetical": "",
      "derivation": {
        "one_liner": {
          "_type": "OneLiner",
          "content": " {'author': [a, b, c] }\n"
        },
        "is_embellishment": false,
        "_type": "Derivation",
        "english": {
          "_type": "Paragraph",
          "content": ""
        }
      },
      "default": {
        "one_liner": {
          "_type": "OneLiner",
          "content": " {'author': [a, b, c] }\n"
        },
        "is_embellishment": false,
        "_type": "Default",
        "english": {
          "_type": "Paragraph",
          "content": ""
        }
      },
      "constraints": [
        {
          "one_liner": [
            {
              "_type": "OneLiner",
              "content": " Must be several for each role\n"
            }
          ],
          "is_embellishment": false,
          "_type": "Constraint",
          "english": {
            "_type": "Paragraph",
            "content": ""
          },
          "code": " len(contributors[role]) > 1 for each role\n",
          "message": " not enough contributors for role\n",
          "severity": " Error\n"
        }
      ]
    }
  ]
}
...Createed object of type: Class
... = Class: Edition
final object is  {
  "one_liner": {
    "_type": "OneLiner",
    "content": "to try more complex data types"
  },
  "is_embellishment": false,
  "_type": "Class",
  "prefix": "_",
  "name": {
    "content": "Edition",
    "_type": "ClassName"
  },
  "parenthetical": "",
  "is_value_type": false,
  "attributes": [
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "assuming just one"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "author",
        "_type": "AttributeName"
      },
      "parenthetical": ""
    },
    {
      "one_liner": {
        "_type": "OneLiner",
        "content": "allowing for multiple"
      },
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "artists",
        "_type": "AttributeName"
      },
      "parenthetical": ""
    },
    {
      "annotations": [
        {
          "label": "con note",
          "content": "constraints take annotations which may span",
          "emoji": "",
          "elaboration": [
            {
              "_type": "Paragraph",
              "content": "And those annotations may have their own elaborations.\n \n+ Which may contain more that one paragraph.\n"
            },
            {
              "_type": "Paragraph",
              "content": "Here's a second paragraph, followed by a code block\n"
            },
            {
              "content": "``` markdown\nThis is the code block for  the annotation\n```",
              "_type": "CodeBlock"
            }
          ],
          "_type": "Annotation"
        },
        {
          "label": "def ote",
          "content": "defaults take annotations",
          "emoji": "",
          "_type": "Annotation"
        },
        {
          "label": "der note",
          "content": "derivations take annotations",
          "emoji": "",
          "_type": "Annotation"
        }
      ],
      "is_embellishment": false,
      "_type": "Attribute",
      "prefix": "-",
      "name": {
        "content": "contributors",
        "_type": "AttributeName"
      },
      "parenthetical": "",
      "derivation": {
        "one_liner": {
          "_type": "OneLiner",
          "content": " {'author': [a, b, c] }\n"
        },
        "is_embellishment": false,
        "_type": "Derivation",
        "english": {
          "_type": "Paragraph",
          "content": ""
        }
      },
      "default": {
        "one_liner": {
          "_type": "OneLiner",
          "content": " {'author': [a, b, c] }\n"
        },
        "is_embellishment": false,
        "_type": "Default",
        "english": {
          "_type": "Paragraph",
          "content": ""
        }
      },
      "constraints": [
        {
          "one_liner": [
            {
              "_type": "OneLiner",
              "content": " Must be several for each role\n"
            }
          ],
          "is_embellishment": false,
          "_type": "Constraint",
          "english": {
            "_type": "Paragraph",
            "content": ""
          },
          "code": " len(contributors[role]) > 1 for each role\n",
          "message": " not enough contributors for role\n",
          "severity": " Error\n"
        }
      ]
    }
  ]
}
ObjectCreator Creating object of type: SubjectC - named {'content': 'Data type clauses', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectB - named {'content': 'Elaborations', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Paragraphs', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Lists indented lists', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Code blocks with language', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Block quotes', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Pseudo admonitions', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Annotation - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Markdown code blocks', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: CodeBlock - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Code Tables', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: OneLiner - named Unnamed
ObjectCreator Creating object of type: CodeBlock - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Comments', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectB - named {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: CodeBlock - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: CodeBlock - named Unnamed
ObjectCreator Creating object of type: SubjectB - named {'content': 'Admonitions', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: CodeBlock - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Obsidian Callouts', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: Paragraph - named Unnamed
ObjectCreator Creating object of type: SubjectB - named {'content': 'Capabilities', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'To PDF', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'To HTML', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Prettify', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Edit in VS Code', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'TOC', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
ObjectCreator Creating object of type: SubjectC - named {'content': 'Index', '_type': 'SubjectName'}
ObjectCreator Creating object of type: SubjectName - named Unnamed
Created model: <class 'ldm.Literate_01.LiterateModel'>

Phase: Validating model
Validating references...
Validation errors: 1

Phase: counting errors
{"Validation Error in SubjectC: For field 'name' - expected <class 'class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>": 32, "Validation Error in SubjectB: For field 'name' - expected <class 'class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>": 8}
32 	 Validation Error in SubjectC: For field 'name' - expected <class 'class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>
8 	 Validation Error in SubjectB: For field 'name' - expected <class 'class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>

Phase: Serialing model ...
Model serialized to ldm/ldm_models/LiterateTester_results/LiterateTester.model.json
Model serialized to ldm/ldm_models/LiterateTester_results/LiterateTester.model.yaml
..Created model files: ldm/ldm_models/LiterateTester_results/LiterateTester.model.json and ldm/ldm_models/LiterateTester_results/LiterateTester.model.yaml

Phase: Rendering back to markdown
Render header: [# ] None () 
Prefix is [ #  ] dislay is  None
8  subjects coming in model
Render header: [## ] Sample Classes () 
Prefix is [ ##  ] dislay is  Sample Classes
2  subjects coming in subject
Render header: [### ] Editions () 
Prefix is [ ###  ] dislay is  Editions
Render header: [_ ] Edition (None) 
Prefix is [ _  ] dislay is  **Edition**
WARNING: No render for type <class 'Literate_01.ClassName'>
WARNING: No render for type <class 'Literate_01.ClassName'>
Casing: LowerCamel for ['based', 'on'] = basedOn
Render header: [- ] title (optional reference FullTitle) 
Prefix is [ -  ] dislay is  ***title***
Render header: [- ] author (optional reference Person) 
Prefix is [ -  ] dislay is  ***author***
Render header: [- ] illustrators (optional List of reference People) 
Prefix is [ -  ] dislay is  ***illustrators***
Render header: [__ ] Optional Publication Details (Optional) 
Prefix is [ __  ] dislay is  _Optional Publication Details_
WARNING: No render for type <class 'class_pom_token.IsOptional'>
Render header: [- ] datePublished (optional reference BiblioDate) 
Prefix is [ -  ] dislay is  ***datePublished***
Render header: [__ ] Required Format Details () 
Prefix is [ __  ] dislay is  _Required Format Details_
WARNING: No render for type <class 'class_pom_token.IsOptional'>
Render header: [- ] numberOfPages (optional reference Integer) 
Prefix is [ -  ] dislay is  ***numberOfPages***
Render header: [__ ] Unsaid Other Details () 
Prefix is [ __  ] dislay is  _Unsaid Other Details_
WARNING: No render for type <class 'class_pom_token.IsOptional'>
Render header: [- ] datePublished (optional reference BiblioDate) 
Prefix is [ -  ] dislay is  ***datePublished***
Render header: [_ ] HardcoverEdition (None) 
Prefix is [ _  ] dislay is  **HardcoverEdition**
Casing: LowerCamel for ['subtype', 'of'] = subtypeOf
Render header: [_ ] PaperbackEdition (None) 
Prefix is [ _  ] dislay is  **PaperbackEdition**
Casing: LowerCamel for ['subtype', 'of'] = subtypeOf
Render header: [_ ] ElectronicEdition (None) 
Prefix is [ _  ] dislay is  **ElectronicEdition**
Casing: LowerCamel for ['subtype', 'of'] = subtypeOf
Render header: [- ] eFormat (optional reference Code) 
Prefix is [ -  ] dislay is  ***eFormat***
adding code block...
```csv
eFormat, Description
E-Book, 'Kindle or Apple books - etc'
PDF, formatted for printing and direct delivery

```
Render header: [Code Type: ] EBookFormat (None) 
Prefix is [ Code Type:  ] dislay is  **EBookFormat**
adding code block...
```csv
Format, Description
E-Book, 'Kindle or Apple books - etc'
PDF, formatted for printing and direct delivery

```
Casing: LowerCamel for ['is', 'value', 'type'] = isValueType
0  subjects coming in subject
Render header: [### ] Addresses () 
Prefix is [ ###  ] dislay is  Addresses
Render header: [Value Type: ] Address (None) 
Prefix is [ Value Type:  ] dislay is  **Address**
Casing: LowerCamel for ['is', 'value', 'type'] = isValueType
Render header: [- ] streetAddress (optional reference Text) 
Prefix is [ -  ] dislay is  ***streetAddress***
Render header: [- ] streetAddress (optional reference Text) 
Prefix is [ -  ] dislay is  ***streetAddress***
Render header: [- ] city (optional reference UsCity) 
Prefix is [ -  ] dislay is  ***city***
Render header: [- ] state (optional reference UsState) 
Prefix is [ -  ] dislay is  ***state***
Render header: [__ ] Full Zip Code () 
Prefix is [ __  ] dislay is  _Full Zip Code_
WARNING: No render for type <class 'class_pom_token.IsOptional'>
Render header: [- ] mainZipCode (optional reference RequiredNumber) 
Prefix is [ -  ] dislay is  ***mainZipCode***
Render header: [- ] preciseZipCode (optional reference OptionaNumberl) 
Prefix is [ -  ] dislay is  ***preciseZipCode***
0  subjects coming in subject
Render header: [## ] Next steps () 
Prefix is [ ##  ] dislay is  Next steps
5  subjects coming in subject
Render header: [### ] Clean up () 
Prefix is [ ###  ] dislay is  Clean up
0  subjects coming in subject
Render header: [### ] Complete () 
Prefix is [ ###  ] dislay is  Complete
0  subjects coming in subject
Render header: [### ] Validation () 
Prefix is [ ###  ] dislay is  Validation
0  subjects coming in subject
Render header: [### ] Flesh out () 
Prefix is [ ###  ] dislay is  Flesh out
0  subjects coming in subject
Render header: [### ] Futures () 
Prefix is [ ###  ] dislay is  Futures
0  subjects coming in subject
Render header: [## ] Tests to include () 
Prefix is [ ##  ] dislay is  Tests to include
5  subjects coming in subject
Render header: [### ] Headers () 
Prefix is [ ###  ] dislay is  Headers
0  subjects coming in subject
Render header: [### ] Name tests Variations Styling Anchors () 
Prefix is [ ###  ] dislay is  Name tests Variations Styling Anchors
0  subjects coming in subject
Render header: [### ] Class clauses () 
Prefix is [ ###  ] dislay is  Class clauses
0  subjects coming in subject
Render header: [### ] Attribute clauses () 
Prefix is [ ###  ] dislay is  Attribute clauses
0  subjects coming in subject
Render header: [### ] Constraints and derivations () 
Prefix is [ ###  ] dislay is  Constraints and derivations
0  subjects coming in subject
Render header: [## ] More Tests needed () 
Prefix is [ ##  ] dislay is  More Tests needed
3  subjects coming in subject
Render header: [### ] Formula Tester English OCL Message Severity () 
Prefix is [ ###  ] dislay is  Formula Tester English OCL Message Severity
0  subjects coming in subject
Render header: [### ] Data types () 
Prefix is [ ###  ] dislay is  Data types
Render header: [_ ] LiteraryWork (None) 
Prefix is [ _  ] dislay is  **LiteraryWork**
Render header: [- ] firstEdition (optional List of reference Edition) 
Prefix is [ -  ] dislay is  ***firstEdition***
Render header: [_ ] Edition (None) 
Prefix is [ _  ] dislay is  **Edition**
Render header: [- ] author (None) 
Prefix is [ -  ] dislay is  ***author***
Render header: [- ] artists (None) 
Prefix is [ -  ] dislay is  ***artists***
Render header: [- ] contributors (None) 
Prefix is [ -  ] dislay is  ***contributors***
0  subjects coming in subject
Render header: [### ] Data type clauses () 
Prefix is [ ###  ] dislay is  Data type clauses
0  subjects coming in subject
Render header: [## ] Elaborations () 
Prefix is [ ##  ] dislay is  Elaborations
10  subjects coming in subject
Render header: [### ] Paragraphs () 
Prefix is [ ###  ] dislay is  Paragraphs
0  subjects coming in subject
Render header: [### ] Lists indented lists () 
Prefix is [ ###  ] dislay is  Lists indented lists
0  subjects coming in subject
Render header: [### ] Code blocks with language () 
Prefix is [ ###  ] dislay is  Code blocks with language
0  subjects coming in subject
Render header: [### ] Block quotes () 
Prefix is [ ###  ] dislay is  Block quotes
0  subjects coming in subject
Render header: [### ] Pseudo admonitions () 
Prefix is [ ###  ] dislay is  Pseudo admonitions
0  subjects coming in subject
Render header: [### ] Markdown code blocks () 
Prefix is [ ###  ] dislay is  Markdown code blocks
adding code block...
```markdown
This is some text, with indented lists
- Item
- Item2
- Item 3
- Item a
- Item b
- Item c
```
0  subjects coming in subject
Render header: [### ] Code Tables () 
Prefix is [ ###  ] dislay is  Code Tables
adding code block...
```csv
Pos, Date, Name, Price
1, 2023-09-28, Spices, 150$
2, 2023-02-29, Shovel, 1.25$
```
0  subjects coming in subject
Render header: [### ] HTML code center This should be centered center () 
Prefix is [ ###  ] dislay is  HTML code center This should be centered center
0  subjects coming in subject
Render header: [### ] Comments () 
Prefix is [ ###  ] dislay is  Comments
0  subjects coming in subject
Render header: [### ] Figures DS Copy jpg () 
Prefix is [ ###  ] dislay is  Figures DS Copy jpg
0  subjects coming in subject
Render header: [## ] Diagrams Just use Mermaid in code block () 
Prefix is [ ##  ] dislay is  Diagrams Just use Mermaid in code block
adding code block...
``` (mermaid)

block-beta
columns 3
a:3
block:group1:2
columns 2
h i j k
end
g
block:group2:3
%% columns auto (default)
l m n o p q r
end
```
adding code block...
```mermaid

block-beta
columns 3
a:3
block:group1:2
columns 2
h i j k
end
g
block:group2:3
%% columns auto (default)
l m n o p q r
end
```
0  subjects coming in subject
Render header: [## ] Admonitions () 
Prefix is [ ##  ] dislay is  Admonitions
adding code block...
```ad-tip
title: This is a tip
This is the content of the admonition tip.
```
1  subjects coming in subject
Render header: [### ] Obsidian Callouts () 
Prefix is [ ###  ] dislay is  Obsidian Callouts
0  subjects coming in subject
Render header: [## ] Capabilities () 
Prefix is [ ##  ] dislay is  Capabilities
6  subjects coming in subject
Render header: [### ] To PDF () 
Prefix is [ ###  ] dislay is  To PDF
0  subjects coming in subject
Render header: [### ] To HTML () 
Prefix is [ ###  ] dislay is  To HTML
0  subjects coming in subject
Render header: [### ] Prettify () 
Prefix is [ ###  ] dislay is  Prettify
0  subjects coming in subject
Render header: [### ] Edit in VS Code () 
Prefix is [ ###  ] dislay is  Edit in VS Code
0  subjects coming in subject
Render header: [### ] TOC () 
Prefix is [ ###  ] dislay is  TOC
0  subjects coming in subject
Render header: [### ] Index () 
Prefix is [ ###  ] dislay is  Index
0  subjects coming in subject

Phase: Creating HTML from model dict
All keys are: 
	 data_type_clause
	 parenthetical
	 elaboration
	 attributes
	 element_type
	 subtype_of
	 based_on
	 is_optional_lit
	 code
	 classes
	 one_liner
	 label
	 emoji
	 content
	 _type
	 message
	 annotations
	 is_optional
	 data_type
	 t_value
	 as_value_type
	 severity
	 attribute_sections
	 derivation
	 subjects
	 prefix
	 constraints
	 default
	 name
	 class_name
htmling dict with _type =  LiterateModel
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with This is a small sample of a Literate Data Model, used for testing each of the constructs, at lease once.

htmling dict with _type =  SubjectB
add anchor called for key_name = name, value = {'content': 'Sample Classes', '_type': 'SubjectName'} the_name = Sample Classes
Adding simple: OneLiner 
Adding simple: OneLiner with with a one liner for the subject, spanning
two lines
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with And an elaboration, with a few paragraphs

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with Paragraph 2

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with Paragraph 3

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Editions', '_type': 'SubjectName'} the_name = Editions
htmling dict with _type =  Class
add anchor called for key_name = name, value = {'content': 'Edition', '_type': 'ClassName'} the_name = Edition
Adding simple: OneLiner 
Adding simple: OneLiner with a manifestation of a literary work
htmling Python type   <class 'list'> ; type_label is  NoNonDictTypeLabel
Orphaned list:  [ClassName(content='LiteraryWork', _type='ClassName'), ClassName(content='OtherBase', _type='ClassName')]
htmling Python type   <class 'Literate_01.ClassName'> ; type_label is  ClassName
htmling Python type   <class 'Literate_01.ClassName'> ; type_label is  ClassName
Pieces are:  ['<div class="list">\n<span class="class_name_link" href="#LiteraryWork">LiteraryWork</span>\n\n<span class="class_name_link" href="#OtherBase">OtherBase</span>\n\n</div>']
span returning:  <span class="based_on_value value">
<div class="list">
<span class="class_name_link" href="#LiteraryWork">LiteraryWork</span>

<span class="class_name_link" href="#OtherBase">OtherBase</span>

</div></span>
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'title', '_type': 'AttributeName'} the_name = title
Adding simple: OneLiner 
Adding simple: OneLiner with the title, as shown on the book's title page
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'FullTitle', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is FullTitle, display name is FullTitle
BDT class anchor is  <a class='base_class' href='#FullTitle' >FullTitle</a>
Pieces are:  ["<a class='base_class' href='#FullTitle' >FullTitle</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#FullTitle' >FullTitle</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#FullTitle' >FullTitle</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#FullTitle' >FullTitle</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#FullTitle' >FullTitle</a>
value</span>
htmling dict with _type =  Default
htmling Python type   <class 'ldm.Literate_01.OneLiner'> ; type_label is  OneLiner
Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   the title of the Work of which this is an edition

Pieces are:  [' the title of the Work of which this is an edition\n']
span returning:  <span class="Default_value value">
 the title of the Work of which this is an edition
</span>
Pieces are:  [' baseWork.title\n']
span returning:  <span class="code_value value">
 baseWork.title
</span>
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'author', '_type': 'AttributeName'} the_name = author
Adding simple: OneLiner 
Adding simple: OneLiner with the writer
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Person', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is Person, display name is Person
BDT class anchor is  <a class='base_class' href='#Person' >Person</a>
Pieces are:  ["<a class='base_class' href='#Person' >Person</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#Person' >Person</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#Person' >Person</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#Person' >Person</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#Person' >Person</a>
value</span>
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'illustrators', '_type': 'AttributeName'} the_name = illustrators
Adding simple: OneLiner 
Adding simple: OneLiner with artists who supplied the pictures
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}},) {}
[dict_to_html.py:292 -                          dt_as_html()] . . <  Called by ldt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, True) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'People', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, True) {}
BDT anchored name is People, display name is People-es
BDT class anchor is  <a class='base_class' href='#People' >People-es</a>
Pieces are:  ["<a class='base_class' href='#People' >People-es</a>", 'value_es']
span returning:  <span class="base_data_type">
<a class='base_class' href='#People' >People-es</a>
value_es</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . . >  Returned <span class="base_data_type">
<a class='base_class' href='#People' >People-es</a>
value_es</span>
[dict_to_html.py:292 -                          dt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#People' >People-es</a>
value_es</span>
Pieces are:  ['List of', '<span class="base_data_type">\n<a class=\'base_class\' href=\'#People\' >People-es</a>\nvalue_es</span>']
span returning:  <span class="list_data_type">
List of
<span class="base_data_type">
<a class='base_class' href='#People' >People-es</a>
value_es</span></span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="list_data_type">
List of
<span class="base_data_type">
<a class='base_class' href='#People' >People-es</a>
value_es</span></span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="list_data_type">
List of
<span class="base_data_type">
<a class='base_class' href='#People' >People-es</a>
value_es</span></span>
htmling dict with _type =  AttributeSection
add anchor called for key_name = name, value = {'content': 'Optional Publication Details', '_type': 'AttributeSectionName'} the_name = Optional Publication Details
htmling dict with _type =  IsOptional
opt value is  Optional
using opt value is  Optional
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'datePublished', '_type': 'AttributeName'} the_name = datePublished
Adding simple: OneLiner 
Adding simple: OneLiner with when the edition was released to the public
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is BiblioDate, display name is BiblioDate
BDT class anchor is  <a class='base_class' href='#BiblioDate' >BiblioDate</a>
Pieces are:  ["<a class='base_class' href='#BiblioDate' >BiblioDate</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#BiblioDate' >BiblioDate</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#BiblioDate' >BiblioDate</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#BiblioDate' >BiblioDate</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#BiblioDate' >BiblioDate</a>
value</span>
htmling dict with _type =  AttributeSection
add anchor called for key_name = name, value = {'content': 'Required Format Details', '_type': 'AttributeSectionName'} the_name = Required Format Details
htmling dict with _type =  IsOptional
opt value is  
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'numberOfPages', '_type': 'AttributeName'} the_name = numberOfPages
Adding simple: OneLiner 
Adding simple: OneLiner with last page number
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Integer', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is Integer, display name is Integer
BDT class anchor is  <a class='base_class' href='#Integer' >Integer</a>
Pieces are:  ["<a class='base_class' href='#Integer' >Integer</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#Integer' >Integer</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#Integer' >Integer</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#Integer' >Integer</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#Integer' >Integer</a>
value</span>
htmling dict with _type =  AttributeSection
add anchor called for key_name = name, value = {'content': 'Unsaid Other Details', '_type': 'AttributeSectionName'} the_name = Unsaid Other Details
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'datePublished', '_type': 'AttributeName'} the_name = datePublished
Adding simple: OneLiner 
Adding simple: OneLiner with when the edition was released to the public
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'BiblioDate', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is BiblioDate, display name is BiblioDate
BDT class anchor is  <a class='base_class' href='#BiblioDate' >BiblioDate</a>
Pieces are:  ["<a class='base_class' href='#BiblioDate' >BiblioDate</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#BiblioDate' >BiblioDate</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#BiblioDate' >BiblioDate</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#BiblioDate' >BiblioDate</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#BiblioDate' >BiblioDate</a>
value</span>
htmling dict with _type =  Class
add anchor called for key_name = name, value = {'content': 'HardcoverEdition', '_type': 'ClassName'} the_name = HardcoverEdition
Subtyping pair is:  (ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))
htmling Python type   <class 'Literate_01.ClassName'> ; type_label is  ClassName
Subtyping element is :  subtypes
Pieces are:  ['<span class="class_name_link" href="#Edition">Edition</span>\n', 'bySomething']
Div returning:  <div class="subtype_pair">
<span class="class_name_link" href="#Edition">Edition</span>

bySomething</div>
Subtyping pair is:  (ClassName(content='Work', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))
htmling Python type   <class 'Literate_01.ClassName'> ; type_label is  ClassName
Subtyping element is :  subtypes
Pieces are:  ['<span class="class_name_link" href="#Work">Work</span>\n', 'bySomething']
Div returning:  <div class="subtype_pair">
<span class="class_name_link" href="#Work">Work</span>

bySomething</div>
htmling dict with _type =  Class
add anchor called for key_name = name, value = {'content': 'PaperbackEdition', '_type': 'ClassName'} the_name = PaperbackEdition
Subtyping pair is:  (ClassName(content='Edition', _type='ClassName'), SubtypingName(content='byFormat', _type='SubtypingName'))
htmling Python type   <class 'Literate_01.ClassName'> ; type_label is  ClassName
Subtyping element is :  byFormat
Pieces are:  ['<span class="class_name_link" href="#Edition">Edition</span>\n', 'bySomething']
Div returning:  <div class="subtype_pair">
<span class="class_name_link" href="#Edition">Edition</span>

bySomething</div>
Subtyping pair is:  (ClassName(content='Work', _type='ClassName'), SubtypingName(content='bySomethingElse', _type='SubtypingName'))
htmling Python type   <class 'Literate_01.ClassName'> ; type_label is  ClassName
Subtyping element is :  bySomethingElse
Pieces are:  ['<span class="class_name_link" href="#Work">Work</span>\n', 'bySomething']
Div returning:  <div class="subtype_pair">
<span class="class_name_link" href="#Work">Work</span>

bySomething</div>
htmling dict with _type =  Class
add anchor called for key_name = name, value = {'content': 'ElectronicEdition', '_type': 'ClassName'} the_name = ElectronicEdition
Subtyping pair is:  (ClassName(content='Edition', _type='ClassName'), SubtypingName(content='subtypes', _type='SubtypingName'))
htmling Python type   <class 'Literate_01.ClassName'> ; type_label is  ClassName
Subtyping element is :  subtypes
Pieces are:  ['<span class="class_name_link" href="#Edition">Edition</span>\n', 'bySomething']
Div returning:  <div class="subtype_pair">
<span class="class_name_link" href="#Edition">Edition</span>

bySomething</div>
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'eFormat', '_type': 'AttributeName'} the_name = eFormat
Adding simple: OneLiner 
Adding simple: OneLiner with the precise medium for the electronic edition
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Code', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is Code, display name is Code
BDT class anchor is  <a class='base_class' href='#Code' >Code</a>
Pieces are:  ["<a class='base_class' href='#Code' >Code</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#Code' >Code</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#Code' >Code</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#Code' >Code</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#Code' >Code</a>
value</span>
htmling dict with _type =  CodeBlock
Adding simple: CodeBlock 
Adding simple: CodeBlock with ```csv
eFormat, Description
E-Book, 'Kindle or Apple books - etc'
PDF, formatted for printing and direct delivery

```
htmling dict with _type =  CodeType
htmling dict with _type =  CodeBlock
Adding simple: CodeBlock 
Adding simple: CodeBlock with ```csv
Format, Description
E-Book, 'Kindle or Apple books - etc'
PDF, formatted for printing and direct delivery

```
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Addresses', '_type': 'SubjectName'} the_name = Addresses
htmling dict with _type =  ValueType
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'streetAddress', '_type': 'AttributeName'} the_name = streetAddress
Adding simple: OneLiner 
Adding simple: OneLiner with usually the street and number
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is Text, display name is Text
BDT class anchor is  <a class='base_class' href='#Text' >Text</a>
Pieces are:  ["<a class='base_class' href='#Text' >Text</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#Text' >Text</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#Text' >Text</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#Text' >Text</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#Text' >Text</a>
value</span>
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'streetAddress', '_type': 'AttributeName'} the_name = streetAddress
Adding simple: OneLiner 
Adding simple: OneLiner with usually the apartment or unit number
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Text', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is Text, display name is Text
BDT class anchor is  <a class='base_class' href='#Text' >Text</a>
Pieces are:  ["<a class='base_class' href='#Text' >Text</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#Text' >Text</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#Text' >Text</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#Text' >Text</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#Text' >Text</a>
value</span>
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'city', '_type': 'AttributeName'} the_name = city
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'UsCity', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is UsCity, display name is UsCity
BDT class anchor is  <a class='base_class' href='#UsCity' >UsCity</a>
Pieces are:  ["<a class='base_class' href='#UsCity' >UsCity</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#UsCity' >UsCity</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#UsCity' >UsCity</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#UsCity' >UsCity</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#UsCity' >UsCity</a>
value</span>
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'state', '_type': 'AttributeName'} the_name = state
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'UsState', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is UsState, display name is UsState
BDT class anchor is  <a class='base_class' href='#UsState' >UsState</a>
Pieces are:  ["<a class='base_class' href='#UsState' >UsState</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#UsState' >UsState</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#UsState' >UsState</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#UsState' >UsState</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#UsState' >UsState</a>
value</span>
htmling dict with _type =  AttributeSection
add anchor called for key_name = name, value = {'content': 'Full Zip Code', '_type': 'AttributeSectionName'} the_name = Full Zip Code
htmling dict with _type =  IsOptional
opt value is  
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'mainZipCode', '_type': 'AttributeName'} the_name = mainZipCode
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'RequiredNumber', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is RequiredNumber, display name is RequiredNumber
BDT class anchor is  <a class='base_class' href='#RequiredNumber' >RequiredNumber</a>
Pieces are:  ["<a class='base_class' href='#RequiredNumber' >RequiredNumber</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#RequiredNumber' >RequiredNumber</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#RequiredNumber' >RequiredNumber</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#RequiredNumber' >RequiredNumber</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#RequiredNumber' >RequiredNumber</a>
value</span>
htmling dict with _type =  Annotation
Pieces are:  ['', '<span class=label>Must be</span>', '<span class=content>5 digits</span>']
Div returning:  <div class="Annotation">

<span class=label>Must be</span>
<span class=content>5 digits</span></div>
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'preciseZipCode', '_type': 'AttributeName'} the_name = preciseZipCode
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}},) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'OptionaNumberl', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, False) {}
BDT anchored name is OptionaNumberl, display name is OptionaNumberl
BDT class anchor is  <a class='base_class' href='#OptionaNumberl' >OptionaNumberl</a>
Pieces are:  ["<a class='base_class' href='#OptionaNumberl' >OptionaNumberl</a>", 'value']
span returning:  <span class="base_data_type">
<a class='base_class' href='#OptionaNumberl' >OptionaNumberl</a>
value</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#OptionaNumberl' >OptionaNumberl</a>
value</span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="base_data_type">
<a class='base_class' href='#OptionaNumberl' >OptionaNumberl</a>
value</span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="base_data_type">
<a class='base_class' href='#OptionaNumberl' >OptionaNumberl</a>
value</span>
htmling dict with _type =  Annotation
Pieces are:  ['', '<span class=label>Must be</span>', '<span class=content>4 digits</span>']
Div returning:  <div class="Annotation">

<span class=label>Must be</span>
<span class=content>4 digits</span></div>
htmling dict with _type =  SubjectB
add anchor called for key_name = name, value = {'content': 'Next steps', '_type': 'SubjectName'} the_name = Next steps
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Clean up', '_type': 'SubjectName'} the_name = Clean up
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with * Name parsing
 
+ * value types
 
+ * Rendering code blocks. capture language
 
+ * Subtypings - exclusive, exhaustive
 
+ * Data types with reference/value and cardinality
 
+ * Optional on Attribute Section

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Complete', '_type': 'SubjectName'} the_name = Complete
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with * Code types
 
+ * And data block

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Validation', '_type': 'SubjectName'} the_name = Validation
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with * cycles
 
+ * references to classes, subtypings
 
+ * references to attributes

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Flesh out', '_type': 'SubjectName'} the_name = Flesh out
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with * Subtypes, subtypings
 
+ * inverse attributes
 
+ * Overrides what
 
+ * explicit for data type value/reference

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Futures', '_type': 'SubjectName'} the_name = Futures
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with * Diagrams

htmling dict with _type =  SubjectB
add anchor called for key_name = name, value = {'content': 'Tests to include', '_type': 'SubjectName'} the_name = Tests to include
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Headers', '_type': 'SubjectName'} the_name = Headers
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with Notice that, here, asterisks are used for lists and embedded list, so the items won't be confused with attributes

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with * Subject - w/ one-liner
 
+ * Class one-liner?, Value Type
 
+ * Attribute Section - optional?
 
+ * Attribute Header
 
+ **  with and without one-liners
 
+ ** with and without data type expressions
 
+ * Formulas, derivation, default, constraint
 
+ * Annotations

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Name tests Variations Styling Anchors', '_type': 'SubjectName'} the_name = Name tests Variations Styling Anchors
htmling dict with _type =  Annotation
Pieces are:  ['', '<span class=label>In</span>', '']
Div returning:  <div class="Annotation">

<span class=label>In</span>
</div>
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Class clauses', '_type': 'SubjectName'} the_name = Class clauses
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with * Plural
 
+ * Abbreviation
 
+ * Subtype of
 
+ * Based on
 
+ * Where
 
+ * Diagnostics
 
+ * Annotations

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with Fleshed in
 
+ * Subtypes, subtypings
 
+ * Dependents
 
+ * Ancestors
 
+ *

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Attribute clauses', '_type': 'SubjectName'} the_name = Attribute clauses
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with * Data type
 
+ * Default
 
+ * Derivation
 
+ * Constraint
 
+ * Required/optional - if/unless

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with Fleshed in
 
+ * overrides
 
+ * inverse of

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Constraints and derivations', '_type': 'SubjectName'} the_name = Constraints and derivations
htmling dict with _type =  SubjectB
add anchor called for key_name = name, value = {'content': 'More Tests needed', '_type': 'SubjectName'} the_name = More Tests needed
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Formula Tester English OCL Message Severity', '_type': 'SubjectName'} the_name = Formula Tester English OCL Message Severity
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Data types', '_type': 'SubjectName'} the_name = Data types
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with * Base Type. Reference vs Value
 
+ * List, set, mapping types
 
+ * Nested operators

htmling dict with _type =  Class
add anchor called for key_name = name, value = {'content': 'LiteraryWork', '_type': 'ClassName'} the_name = LiteraryWork
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'firstEdition', '_type': 'AttributeName'} the_name = firstEdition
Adding simple: OneLiner 
Adding simple: OneLiner with a home for the data type clauses
htmling dict with _type =  DataTypeClause
[dict_to_html.py:96 -                          dt_as_html()] <  Called by dict_to_html with args ({'data_type': {'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}}, 'is_optional_lit': {'t_value': False, '_type': 'IsOptional'}, '_type': 'DataTypeClause'},) {}
[dict_to_html.py:246 -                          dt_as_html()] . <  Called by dt_as_html with args ({'_type': 'ListDataType', 'element_type': {'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}},) {}
[dict_to_html.py:292 -                          dt_as_html()] . . <  Called by ldt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, True) {}
[dict_to_html.py:248 -                         bdt_as_html()] . . . <  Called by dt_as_html with args ({'_type': 'BaseDataType', 'class_name': {'content': 'Edition', '_type': 'ClassName'}, 'as_value_type': {'t_value': False, '_type': 'AsValue'}}, True) {}
BDT anchored name is Edition, display name is Edition-es
BDT class anchor is  <a class='base_class' href='#Edition' >Edition-es</a>
Pieces are:  ["<a class='base_class' href='#Edition' >Edition-es</a>", 'value_es']
span returning:  <span class="base_data_type">
<a class='base_class' href='#Edition' >Edition-es</a>
value_es</span>
[dict_to_html.py:248 -                         bdt_as_html()] . . . >  Returned <span class="base_data_type">
<a class='base_class' href='#Edition' >Edition-es</a>
value_es</span>
[dict_to_html.py:292 -                          dt_as_html()] . . >  Returned <span class="base_data_type">
<a class='base_class' href='#Edition' >Edition-es</a>
value_es</span>
Pieces are:  ['List of', '<span class="base_data_type">\n<a class=\'base_class\' href=\'#Edition\' >Edition-es</a>\nvalue_es</span>']
span returning:  <span class="list_data_type">
List of
<span class="base_data_type">
<a class='base_class' href='#Edition' >Edition-es</a>
value_es</span></span>
[dict_to_html.py:246 -                          dt_as_html()] . >  Returned <span class="list_data_type">
List of
<span class="base_data_type">
<a class='base_class' href='#Edition' >Edition-es</a>
value_es</span></span>
[dict_to_html.py:96 -                          dt_as_html()] >  Returned <span class="list_data_type">
List of
<span class="base_data_type">
<a class='base_class' href='#Edition' >Edition-es</a>
value_es</span></span>
Pieces are:  [' List of sets of Editions\n']
span returning:  <span class="dataType_value value">
 List of sets of Editions
</span>
htmling dict with _type =  Class
add anchor called for key_name = name, value = {'content': 'Edition', '_type': 'ClassName'} the_name = Edition
Adding simple: OneLiner 
Adding simple: OneLiner with to try more complex data types
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'author', '_type': 'AttributeName'} the_name = author
Adding simple: OneLiner 
Adding simple: OneLiner with assuming just one
Pieces are:  [' Person\n']
span returning:  <span class="dataType_value value">
 Person
</span>
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'artists', '_type': 'AttributeName'} the_name = artists
Adding simple: OneLiner 
Adding simple: OneLiner with allowing for multiple
Pieces are:  [' list of People\n']
span returning:  <span class="dataType_value value">
 list of People
</span>
htmling dict with _type =  Attribute
add anchor called for key_name = name, value = {'content': 'contributors', '_type': 'AttributeName'} the_name = contributors
Pieces are:  [' mapping of Role to List of People\n']
span returning:  <span class="dataType_value value">
 mapping of Role to List of People
</span>
htmling dict with _type =  Constraint
htmling Python type   <class 'list'> ; type_label is  NoNonDictTypeLabel
Orphaned list:  [OneLiner(_type='OneLiner', content=' Must be several for each role\n')]
htmling Python type   <class 'ldm.Literate_01.OneLiner'> ; type_label is  OneLiner
Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   Must be several for each role

Pieces are:  ['<div class="list">\n Must be several for each role\n\n</div>']
span returning:  <span class="Constraint_value value">
<div class="list">
 Must be several for each role

</div></span>
Pieces are:  [' len(contributors[role]) > 1 for each role\n']
span returning:  <span class="code_value value">
 len(contributors[role]) > 1 for each role
</span>
Pieces are:  [' not enough contributors for role\n']
span returning:  <span class="message_value value">
 not enough contributors for role
</span>
Pieces are:  [' Error\n']
span returning:  <span class="severity_value value">
 Error
</span>
htmling dict with _type =  Annotation
Pieces are:  ['', '<span class=label>con note</span>', '<span class=content>constraints take annotations which may span</span>']
Div returning:  <div class="Annotation">

<span class=label>con note</span>
<span class=content>constraints take annotations which may span</span></div>
htmling dict with _type =  Annotation
Pieces are:  ['', '<span class=label>def ote</span>', '<span class=content>defaults take annotations</span>']
Div returning:  <div class="Annotation">

<span class=label>def ote</span>
<span class=content>defaults take annotations</span></div>
htmling dict with _type =  Annotation
Pieces are:  ['', '<span class=label>der note</span>', '<span class=content>derivations take annotations</span>']
Div returning:  <div class="Annotation">

<span class=label>der note</span>
<span class=content>derivations take annotations</span></div>
htmling dict with _type =  Default
htmling Python type   <class 'ldm.Literate_01.OneLiner'> ; type_label is  OneLiner
Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   {'author': [a, b, c] }

Pieces are:  [" {'author': [a, b, c] }\n"]
span returning:  <span class="Default_value value">
 {'author': [a, b, c] }
</span>
htmling dict with _type =  Derivation
htmling Python type   <class 'ldm.Literate_01.OneLiner'> ; type_label is  OneLiner
Orphaned ? <class 'ldm.Literate_01.OneLiner'> :   {'author': [a, b, c] }

Pieces are:  [" {'author': [a, b, c] }\n"]
span returning:  <span class="Derivation_value value">
 {'author': [a, b, c] }
</span>
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Data type clauses', '_type': 'SubjectName'} the_name = Data type clauses
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with * Optionality
 
+ * Cardinality

htmling dict with _type =  SubjectB
add anchor called for key_name = name, value = {'content': 'Elaborations', '_type': 'SubjectName'} the_name = Elaborations
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Paragraphs', '_type': 'SubjectName'} the_name = Paragraphs
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with Unindented paragraph.
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with Indented paragraph.
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Lists indented lists', '_type': 'SubjectName'} the_name = Lists indented lists
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Code blocks with language', '_type': 'SubjectName'} the_name = Code blocks with language
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Block quotes', '_type': 'SubjectName'} the_name = Block quotes
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with > paragraph with angle before first line
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with > parag with angles on every line
 
+ > next line
 
+ > next line

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with Nested block quotes

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with > paragraph with angle before first line
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ >> Nested goes here
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines
 
+ and not on next line and many subsequent lines

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Pseudo admonitions', '_type': 'SubjectName'} the_name = Pseudo admonitions
htmling dict with _type =  Annotation
Pieces are:  ['', '<span class=label>This is a</span>', "<span class=content>warning: Don't do that</span>"]
Div returning:  <div class="Annotation">

<span class=label>This is a</span>
<span class=content>warning: Don't do that</span></div>
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Markdown code blocks', '_type': 'SubjectName'} the_name = Markdown code blocks
htmling dict with _type =  CodeBlock
Adding simple: CodeBlock 
Adding simple: CodeBlock with ```markdown
This is some text, with indented lists
- Item
- Item2
- Item 3
- Item a
- Item b
- Item c
```
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Code Tables', '_type': 'SubjectName'} the_name = Code Tables
Adding simple: OneLiner 
Adding simple: OneLiner with CSV Codeblock
So. This is the **one to use to enter codes**, lists of annotations, etc
htmling dict with _type =  CodeBlock
Adding simple: CodeBlock 
Adding simple: CodeBlock with ```csv
Pos, Date, Name, Price
1, 2023-09-28, Spices, 150$
2, 2023-02-29, Shovel, 1.25$
```
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'HTML code center This should be centered center', '_type': 'SubjectName'} the_name = HTML code center This should be centered center
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Comments', '_type': 'SubjectName'} the_name = Comments
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with Here's a paragraph that will be visible.
 
+ (Hard to see what's required: blank lines?]

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with [This is a comment that will be hidden.]: #

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with [This is a comment] #

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with [This is a comment that will be hidden.]: #

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with And here's another paragraph that's visible.

htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Figures DS Copy jpg', '_type': 'SubjectName'} the_name = Figures DS Copy jpg
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with just copy and paste into Obsidian page (or drag and drop)

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with Captions are harder

htmling dict with _type =  SubjectB
add anchor called for key_name = name, value = {'content': 'Diagrams Just use Mermaid in code block', '_type': 'SubjectName'} the_name = Diagrams Just use Mermaid in code block
htmling dict with _type =  CodeBlock
Adding simple: CodeBlock 
Adding simple: CodeBlock with ``` (mermaid)

block-beta
columns 3
a:3
block:group1:2
columns 2
h i j k
end
g
block:group2:3
%% columns auto (default)
l m n o p q r
end
```
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with And here's the result

htmling dict with _type =  CodeBlock
Adding simple: CodeBlock 
Adding simple: CodeBlock with ```mermaid

block-beta
columns 3
a:3
block:group1:2
columns 2
h i j k
end
g
block:group2:3
%% columns auto (default)
l m n o p q r
end
```
htmling dict with _type =  SubjectB
add anchor called for key_name = name, value = {'content': 'Admonitions', '_type': 'SubjectName'} the_name = Admonitions
htmling dict with _type =  CodeBlock
Adding simple: CodeBlock 
Adding simple: CodeBlock with ```ad-tip
title: This is a tip
This is the content of the admonition tip.
```
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Obsidian Callouts', '_type': 'SubjectName'} the_name = Obsidian Callouts
htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with > [!info]
 
+ > Here's a callout block.
 
+ > It supports **Markdown**, [[Internal link|Wikilinks]], and [[Embed files|embeds]]!
 
+ > ![[Engelbart.jpg]]

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with > [!note]
 
+ > Lorem ipsum dolor sit amet

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with > [!abstract]
 
+ > Lorem ipsum dolor sit amet

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with > [!question]
 
+ > Lorem ipsum dolor sit amet

htmling dict with _type =  Paragraph
Adding simple: Paragraph 
Adding simple: Paragraph with >[!question]
 
+ >Why is the sky blue?

htmling dict with _type =  SubjectB
add anchor called for key_name = name, value = {'content': 'Capabilities', '_type': 'SubjectName'} the_name = Capabilities
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'To PDF', '_type': 'SubjectName'} the_name = To PDF
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'To HTML', '_type': 'SubjectName'} the_name = To HTML
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Prettify', '_type': 'SubjectName'} the_name = Prettify
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Edit in VS Code', '_type': 'SubjectName'} the_name = Edit in VS Code
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'TOC', '_type': 'SubjectName'} the_name = TOC
htmling dict with _type =  SubjectC
add anchor called for key_name = name, value = {'content': 'Index', '_type': 'SubjectName'} the_name = Index
Saved styled dictionary to ldm/ldm_models/LiterateTester_results/LiterateTester.html

Phase: Skipping PDF creation

Phase: Creating PDF from html and css
PDFing for ldm/ldm_models/LiterateTester_results/LiterateTester.html written to ldm/ldm_models/LiterateTester_results/LiterateTester.pdf
PDF for ldm/ldm_models/LiterateTester_results/LiterateTester.html written to ldm/ldm_models/LiterateTester_results/LiterateTester.pdf
