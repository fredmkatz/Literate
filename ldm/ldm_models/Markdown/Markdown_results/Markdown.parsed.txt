Document - <class 'dull_dsl.dull_parser_core.DocPart'> 
. LiterateModel - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ LiterateModel_Head: # Markdown Test  - as LDM
. . SubjectB - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectB_Head: ## Markdown: Syntax
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Markdown Test  - as LDM](#markdown-test----as-ldm)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Markdown: Syntax](#markdown-syntax)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Overview](#overview)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Philosophy](#philosophy)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Block Elements](#block-elements)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Paragraphs and Line Breaks](#paragraphs-and-line-breaks)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Headers](#headers)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Blockquotes](#blockquotes)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Lists](#lists)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Code Blocks](#code-blocks)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Span Elements](#span-elements)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Links](#links)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Emphasis](#emphasis)
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: - [Code](#code)
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ NOTE: **Note:** This document is itself written using Markdown; youcan [see the source for it by adding '.text' to the URL](/projects/markdown/syntax.text).
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: ----
. SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectC_Head: ### Overview
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Philosophy
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Markdown is intended to be as easy-to-read and easy-to-write as is feasible.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Readability, however, is emphasized above all else. A Markdown-formatted', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='document should be publishable as-is, as plain text, without looking', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="like it's been marked up with tags or formatting instructions. While", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="Markdown's syntax has been influenced by several existing text-to-HTML", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='filters -- including [Setext](http://docutils.sourceforge.net/mirror/setext.html), [atx](http://www.aaronsw.com/2002/atx/), [Textile](http://textism.com/tools/textile/), [reStructuredText](http://docutils.sourceforge.net/rst.html),', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='[Grutatext](http://www.triptico.com/software/grutatxt.html), and [EtText](http://ettext.taint.org/doc/) -- the single biggest source of', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="inspiration for Markdown's syntax is the format of plain text email.", extra_text=[])], extra_text=[])]
. SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectC_Head: ### Block Elements
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Paragraphs and Line Breaks
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='A paragraph is simply one or more consecutive lines of text, separated', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='by one or more blank lines. (A blank line is any line that looks like a', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='blank line -- a line containing nothing but spaces or tabs is considered', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='blank.) Normal paragraphs should not be indented with spaces or tabs.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='The implication of the "one or more consecutive lines of text" rule is', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='that Markdown supports "hard-wrapped" text paragraphs. This differs', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='significantly from most other text-to-HTML formatters (including Movable', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Type\'s "Convert Line Breaks" option) which translate every line break', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='character in a paragraph into a `<br />` tag.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='When you *do* want to insert a `<br />` break tag using Markdown, you', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='end a line with two or more spaces, then type return.', extra_text=[])], extra_text=[])]
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Headers
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Markdown supports two styles of headers, [Setext] [1] and [atx] [2].', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Optionally, you may "close" atx-style headers. This is purely', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='cosmetic -- you can use this if you think it looks better. The', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="closing hashes don't even need to match the number of hashes", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='used to open the header. (The number of opening hashes', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='determines the header level.)', extra_text=[])], extra_text=[])]
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Blockquotes
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="Markdown uses email-style `>` characters for blockquoting. If you're", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='familiar with quoting passages of text in an email message, then you', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='know how to create a blockquote in Markdown. It looks best if you hard', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='wrap the text and put a `>` before every line:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> id sem consectetuer libero luctus adipiscing.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Markdown allows you to be lazy and only put the `>` before the first', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='line of a hard-wrapped paragraph:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='id sem consectetuer libero luctus adipiscing.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='adding additional levels of `>`:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> This is the first level of quoting.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> > This is nested blockquote.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> Back to the first level.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Blockquotes can contain other Markdown elements, including headers, lists,', extra_text=[])], extra_text=[])]
. . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ WILD: and code blocks:
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> ## This is a header.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> 1.   This is the first list item.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> 2.   This is the second list item.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="> Here's some example code:", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='>     return shell_exec("echo $input | $markdown_script");', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Any decent text editor should make email-style quoting easy. For', extra_text=[])], extra_text=[])]
. . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ EXAMPLE: example, with BBEdit, you can make a selection and choose IncreaseQuote Level from the Text menu.
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Lists
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Markdown supports ordered (numbered) and unordered (bulleted) lists.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Unordered lists use asterisks, pluses, and hyphens -- interchangably', extra_text=[])], extra_text=[])]
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: -- as list markers:
_ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Red', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Green', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Blue', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: is equivalent to:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='+   Red', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='+   Green', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='+   Blue', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: and:
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: -   Red
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: -   Green
. Attribute - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ Attribute_Head: -   Blue
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: Ordered lists use numbers followed by periods:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='1.  Bird', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='2.  McHale', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='3.  Parish', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="It's important to note that the actual numbers you use to mark the", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='list have no effect on the HTML output Markdown produces. The HTML', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: Markdown produces from the above list is:
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: If you instead wrote the list in Markdown like this:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='1.  Bird', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='1.  McHale', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='1.  Parish', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: or even:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='3. Bird', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='1. McHale', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='8. Parish', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="you'd get the exact same HTML output. The point is, if you want to,", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='you can use ordinal numbers in your ordered Markdown lists, so that', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='the numbers in your source match the numbers in your published HTML.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="But if you want to be lazy, you don't have to.", extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='To make lists look nice, you can wrap items with hanging indents:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='viverra nec, fringilla in, laoreet vitae, risus.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Suspendisse id sem consectetuer libero luctus adipiscing.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="But if you want to be lazy, you don't have to:", extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='viverra nec, fringilla in, laoreet vitae, risus.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='Suspendisse id sem consectetuer libero luctus adipiscing.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='List items may consist of multiple paragraphs. Each subsequent', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='paragraph in a list item must be indented by either 4 spaces', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: or one tab:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='1.  This is a list item with two paragraphs. Lorem ipsum dolor', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='sit amet, consectetuer adipiscing elit. Aliquam hendrerit', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='mi posuere lectus.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Vestibulum enim wisi, viverra nec, fringilla in, laoreet', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='vitae, risus. Donec sit amet nisl. Aliquam semper ipsum', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='sit amet velit.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='2.  Suspendisse id sem consectetuer libero luctus adipiscing.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='It looks nice if you indent every line of the subsequent', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='paragraphs, but here again, Markdown will allow you to be', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: lazy:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   This is a list item with two paragraphs.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="This is the second paragraph in the list item. You're", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='only required to indent the first line. Lorem ipsum dolor', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='sit amet, consectetuer adipiscing elit.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*   Another item in the same list.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content="To put a blockquote within a list item, the blockquote's `>`", extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: delimiters need to be indented:
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: *   A list item with a blockquote:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='> This is a blockquote', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='> inside a list item.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='To put a code block within a list item, the code block needs', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='to be indented *twice* -- 8 spaces or two tabs:', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: *   A list item with a code block:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='<code goes here>', extra_text=[])], extra_text=[])]
. SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectD_Head: #### Code Blocks
_ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Pre-formatted code blocks are used for writing about programming or', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='markup source code. Rather than forming normal paragraphs, the lines', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='of a code block are interpreted literally. Markdown wraps a code block', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='in both `<pre>` and `<code>` tags.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='To produce a code block in Markdown, simply indent every line of the', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='block by at least 4 spaces or 1 tab.', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: This is a normal paragraph:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='This is a code block.', extra_text=[])], extra_text=[])]
. . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ WILD: Here is an example of AppleScript:
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='tell application "Foo"', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='beep', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='end tell', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='A code block continues until it reaches a line that is not indented', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='(or the end of the article).', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Within a code block, ampersands (`&`) and angle brackets (`<` and `>`)', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='are automatically converted into HTML entities. This makes it very', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='easy to include example HTML source code using Markdown -- just paste', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='it and indent it, and Markdown will handle the hassle of encoding the', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='ampersands and angle brackets. For example, this:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='<div class="footer">', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='&copy; 2004 Foo Corporation', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='</div>', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Regular Markdown syntax is not processed within code blocks. E.g.,', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='asterisks are just literal asterisks within a code block. This means', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="it's also easy to use Markdown to write about Markdown's own syntax.", extra_text=[])], extra_text=[]), TypedLine(type_label='CODE_FENCE', line_Type=None, content='```', extra_text=['tell application "Foo"', 'beep', 'end tell', '```'])]
. SubjectC - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ SubjectC_Head: ### Span Elements
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Links
. . . Annotation - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ WILD: Markdown supports two style of links: *inline* and *reference*.
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='In both styles, the link text is delimited by [square brackets].', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='To create an inline link, use a set of regular parentheses immediately', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="after the link text's closing square bracket. Inside the parentheses,", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='put the URL where you want the link to point, along with an *optional*', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='title for the link, surrounded in quotes. For example:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='This is [an example](http://example.com/) inline link.', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='[This link](http://example.net/) has no title attribute.', extra_text=[])], extra_text=[])]
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Emphasis
_ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='Markdown treats asterisks (`*`) and underscores (`_`) as indicators of', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='emphasis. Text wrapped with one `*` or `_` will be wrapped with an', extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content="HTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML", extra_text=[]), TypedLine(type_label='TEXT_LINE', line_Type=None, content='`<strong>` tag. E.g., this input:', extra_text=[])], extra_text=[]), TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='*single asterisks*', extra_text=[])], extra_text=[])]
. . . Class - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ Class_Head: _single underscores_
_ _ _ _ ELABORATION: [TypedLine(type_label='PARAGRAPH', line_Type=None, content=[TypedLine(type_label='TEXT_LINE', line_Type=None, content='**double asterisks**', extra_text=[])], extra_text=[])]
. . . . AttributeSection - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ _ _ AttributeSection_Head: __double underscores__
. . SubjectD - <class 'dull_dsl.dull_parser_core.DocPart'> 
_ _ _ SubjectD_Head: #### Code
