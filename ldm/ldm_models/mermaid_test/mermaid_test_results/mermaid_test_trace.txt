PARSING ldm/ldm_models/mermaid_test/mermaid_test.md
.. full dict saved  in ldm/ldm_models/mermaid_test/mermaid_test_results/mermaid_test.dict.yaml and ldm/ldm_models/mermaid_test/mermaid_test_results/mermaid_test.dict.json
Building class map for module: ldm.Literate_01
Class map is
{   'Annotation': <class 'ldm.Literate_01.Annotation'>,
    'AsValue': <class 'utils.class_pom_token.AsValue'>,
    'Attribute': <class 'ldm.Literate_01.Attribute'>,
    'AttributeName': <class 'ldm.Literate_01.AttributeName'>,
    'AttributeReference': <class 'ldm.Literate_01.AttributeReference'>,
    'AttributeSection': <class 'ldm.Literate_01.AttributeSection'>,
    'AttributeSectionName': <class 'ldm.Literate_01.AttributeSectionName'>,
    'BaseDataType': <class 'ldm.Literate_01.BaseDataType'>,
    'CamelCase': <class 'utils.class_casing.CamelCase'>,
    'Class': <class 'ldm.Literate_01.Class'>,
    'ClassName': <class 'ldm.Literate_01.ClassName'>,
    'Class_': <class 'ldm.Literate_01.Class'>,
    'CodeBlock': <class 'ldm.Literate_01.CodeBlock'>,
    'CodeType': <class 'ldm.Literate_01.CodeType'>,
    'Component': <class 'ldm.Literate_01.Component'>,
    'Constraint': <class 'ldm.Literate_01.Constraint'>,
    'DataType': <class 'ldm.Literate_01.SetDataType'>,
    'DataTypeClause': <class 'ldm.Literate_01.DataTypeClause'>,
    'Default': <class 'ldm.Literate_01.Default'>,
    'Derivation': <class 'ldm.Literate_01.Derivation'>,
    'Diagnostic': <class 'ldm.Literate_01.Diagnostic'>,
    'Emoji': <class 'utils.class_pom_token.Emoji'>,
    'Formula': <class 'ldm.Literate_01.Formula'>,
    'FormulaCoding': <class 'ldm.Literate_01.FormulaCoding'>,
    'IsExclusive': <class 'utils.class_pom_token.IsExclusive'>,
    'IsExhaustive': <class 'utils.class_pom_token.IsExhaustive'>,
    'IsOptional': <class 'utils.class_pom_token.IsOptional'>,
    'Label': <class 'ldm.Literate_01.Label'>,
    'ListDataType': <class 'ldm.Literate_01.ListDataType'>,
    'LiterateModel': <class 'ldm.Literate_01.LiterateModel'>,
    'LowerCamel': <class 'utils.class_casing.LowerCamel'>,
    'MappingDataType': <class 'ldm.Literate_01.MappingDataType'>,
    'MinorComponent': <class 'ldm.Literate_01.MinorComponent'>,
    'ModelName': <class 'ldm.Literate_01.ModelName'>,
    'Natural': <class 'ldm.Literate_01.OneLiner'>,
    'NormalCase': <class 'utils.class_casing.NormalCase'>,
    'OneLiner': <class 'ldm.Literate_01.OneLiner'>,
    'Paragraph': <class 'ldm.Literate_01.Paragraph'>,
    'PresentableBoolean': <class 'utils.class_pom_token.PresentableBoolean'>,
    'ReferenceType': <class 'ldm.Literate_01.ReferenceType'>,
    'SetDataType': <class 'ldm.Literate_01.SetDataType'>,
    'Subject': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectB': <class 'ldm.Literate_01.SubjectB'>,
    'SubjectC': <class 'ldm.Literate_01.SubjectC'>,
    'SubjectD': <class 'ldm.Literate_01.SubjectD'>,
    'SubjectE': <class 'ldm.Literate_01.SubjectE'>,
    'SubjectName': <class 'ldm.Literate_01.SubjectName'>,
    'Subtyping': <class 'ldm.Literate_01.Subtyping'>,
    'SubtypingName': <class 'ldm.Literate_01.SubtypingName'>,
    'UpperCamel': <class 'utils.class_casing.UpperCamel'>,
    'ValueType': <class 'ldm.Literate_01.ValueType'>}
Created model: <class 'ldm.Literate_01.LiterateModel'>
Validating references...
Validation errors: 59
{"Validation Error in Attribute: Required field 'data_type_clause' is missing": 16, "Validation Error in Class: For field 'based_on' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>": 6, "Validation Error in SubjectB: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>": 26, "Validation Error in Constraint: For field 'one_liner' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'list'>": 5, "Validation Error in Class: For field 'abbreviation' - expected typing.Optional[utils.class_casing.CamelCase], but got <class 'str'>": 1, "Validation Error in Class: For field 'subtype_of' - expected typing.Optional[typing.Dict[ldm.Literate_01.ClassName, ldm.Literate_01.SubtypingName]], but got <class 'list'>": 17, "Validation Error in Class: For field 'dependent_of' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>": 1, "Validation Error in Class: For field 'where' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'str'>": 3, "Validation Error in SubjectC: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>": 28, "Validation Error in Attribute: Required field 'name' is missing": 7}
16 	 Validation Error in Attribute: Required field 'data_type_clause' is missing
6 	 Validation Error in Class: For field 'based_on' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>
26 	 Validation Error in SubjectB: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>
5 	 Validation Error in Constraint: For field 'one_liner' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'list'>
1 	 Validation Error in Class: For field 'abbreviation' - expected typing.Optional[utils.class_casing.CamelCase], but got <class 'str'>
17 	 Validation Error in Class: For field 'subtype_of' - expected typing.Optional[typing.Dict[ldm.Literate_01.ClassName, ldm.Literate_01.SubtypingName]], but got <class 'list'>
1 	 Validation Error in Class: For field 'dependent_of' - expected typing.Optional[typing.List[ldm.Literate_01.ClassName]], but got <class 'list'>
3 	 Validation Error in Class: For field 'where' - expected typing.Optional[ldm.Literate_01.OneLiner], but got <class 'str'>
28 	 Validation Error in SubjectC: For field 'name' - expected <class 'utils.class_casing.CamelCase'>, but got <class 'ldm.Literate_01.SubjectName'>
7 	 Validation Error in Attribute: Required field 'name' is missing
Model serialized to ldm/ldm_models/mermaid_test/mermaid_test_results/mermaid_test.model.json
Model serialized to ldm/ldm_models/mermaid_test/mermaid_test_results/mermaid_test.model.yaml
..Created model files: ldm/ldm_models/mermaid_test/mermaid_test_results/mermaid_test.model.json and ldm/ldm_models/mermaid_test/mermaid_test_results/mermaid_test.model.yaml
12  subjects coming in model
All keys are: 
	 subjects
	 elaboration
	 prefix
	 parenthetical
	 _type
	 name
	 one_liner
	 content
Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Mermaid Class Diagram">
  Mermaid Class Diagram
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Mermaid Flowchart">
  Mermaid Flowchart
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Plant UML jsondata">
  Plant UML jsondata
 </a>
</div>

creating png in ldm/ldm_models/Literate/Literate_results/assets/diagram1.png
==> INPUT to render_puml in png:
@startjson
<style>
.h1 {
BackGroundColor green
FontColor white
FontStyle italic
}
.h2 {
BackGroundColor red
FontColor white
FontStyle bold
}
</style>
#highlight "lastName"
#highlight "address" / "city" <<h1>>
#highlight "phoneNumbers" / "0" / "number" <<h2>>
{
"firstName": "John",
"lastName": "Smith",
"isAlive": true,
"age": 28,
"address": {
"streetAddress": "21 2nd Street",
"city": "New York",
"state": "NY",
"postalCode": "10021-3100"
},
"phoneNumbers": [
{
"type": "home",
"number": "212 555-1234"
},
{
"type": "office",
"number": "646 555-4567"
}
],
"children": [],
"spouse": null
}
@endjson

PUML png file saved to: ldm/ldm_models/Literate/Literate_results/assets/diagram1.png
creating svg in ldm/ldm_models/Literate/Literate_results/assets/diagram1.svg
==> INPUT to render_puml in svg:
@startjson
<style>
.h1 {
BackGroundColor green
FontColor white
FontStyle italic
}
.h2 {
BackGroundColor red
FontColor white
FontStyle bold
}
</style>
#highlight "lastName"
#highlight "address" / "city" <<h1>>
#highlight "phoneNumbers" / "0" / "number" <<h2>>
{
"firstName": "John",
"lastName": "Smith",
"isAlive": true,
"age": 28,
"address": {
"streetAddress": "21 2nd Street",
"city": "New York",
"state": "NY",
"postalCode": "10021-3100"
},
"phoneNumbers": [
{
"type": "home",
"number": "212 555-1234"
},
{
"type": "office",
"number": "646 555-4567"
}
],
"children": [],
"spouse": null
}
@endjson

PUML svg file saved to: ldm/ldm_models/Literate/Literate_results/assets/diagram1.svg
Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Plant UML UML">
  Plant UML UML
 </a>
</div>

creating png in ldm/ldm_models/Literate/Literate_results/assets/diagram2.png
==> INPUT to render_puml in png:



rectangle Component
rectangle Literate
rectangle Subject
rectangle Class
rectangle Attribute
rectangle a

Literate -u->  a
Subject -u-> a
Class -u-> a
Attribute -u-> a
a -u-> Component
skinparam linetype ortho


PUML png file saved to: ldm/ldm_models/Literate/Literate_results/assets/diagram2.png
creating svg in ldm/ldm_models/Literate/Literate_results/assets/diagram2.svg
==> INPUT to render_puml in svg:



rectangle Component
rectangle Literate
rectangle Subject
rectangle Class
rectangle Attribute
rectangle a

Literate -u->  a
Subject -u-> a
Class -u-> a
Attribute -u-> a
a -u-> Component
skinparam linetype ortho


PUML svg file saved to: ldm/ldm_models/Literate/Literate_results/assets/diagram2.svg
Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Mermaid ER Diagram">
  Mermaid ER Diagram
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Mermaid ER Diagram">
  Mermaid ER Diagram
 </a>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Captioned figure figure img src FMKNYID Front IM jpg alt Trulli style width figcaption Fig">
  Captioned figure figure img src FMKNYID Front IM jpg alt Trulli style width figcaption Fig
 </a>
 <div class="OneLiner mdhtml">
  <p>
   Trulli, Puglia, Italy.
   And the same figure with figure/caption markup
  </p>
 </div>
</div>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="List of Codes">
  List of Codes
 </a>
</div>

table follows <table border="1" class="dataframe">
 <thead>
  <tr style="text-align: right;">
   <th>
   </th>
   <th>
    eFormat
   </th>
   <th>
    Description
   </th>
  </tr>
 </thead>
 <tbody>
  <tr>
   <th>
    0
   </th>
   <td>
    E-Book
   </td>
   <td>
    'Kindle or Apple books - etc'
   </td>
  </tr>
  <tr>
   <th>
    1
   </th>
   <td>
    PDF
   </td>
   <td>
    formatted for printing and direct delivery
   </td>
  </tr>
 </tbody>
</table>

Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="UML">
  UML
 </a>
</div>

creating png in ldm/ldm_models/Literate/Literate_results/assets/diagram3.png
==> INPUT to render_puml in png:



nwdiag {

network {

Component;

Literate;

Subject;

Attribute;

AttributeSection;

Class;

Component -- Literate;

Component -- Subject;

Component -- Class;

Component -- AttributeSection;

Component -- Attribute;



Subject [description = "Domain entity"];

Literate [description = "Core implementation"];

AttributeSection [description = "Property group"];

Attribute [description = "Individual property"];

Class [description = "Schema definition"];




}

}



PUML png file saved to: ldm/ldm_models/Literate/Literate_results/assets/diagram3.png
creating svg in ldm/ldm_models/Literate/Literate_results/assets/diagram3.svg
==> INPUT to render_puml in svg:



nwdiag {

network {

Component;

Literate;

Subject;

Attribute;

AttributeSection;

Class;

Component -- Literate;

Component -- Subject;

Component -- Class;

Component -- AttributeSection;

Component -- Attribute;



Subject [description = "Domain entity"];

Literate [description = "Core implementation"];

AttributeSection [description = "Property group"];

Attribute [description = "Individual property"];

Class [description = "Schema definition"];




}

}



PUML svg file saved to: ldm/ldm_models/Literate/Literate_results/assets/diagram3.svg
Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Russian UML">
  Russian UML
 </a>
</div>

creating png in ldm/ldm_models/Literate/Literate_results/assets/diagram4.png
==> INPUT to render_puml in png:

'hide empty description
'!pragma layout elk
skinparam rectangleBorderThickness 1
skinparam defaultTextAlignment center
skinparam lifelineStrategy solid
skinparam monochrome false
skinparam style strictuml
hide empty members
skinparam Linetype ortho

rectangle "Базовые модули" as base {

class "Базовые объекты" as baseobjects
class "Делопроизводство\n4.5" as takeoffice
class "Управление\nпроцессами" as workflow
class "Windows-клиент" as windowsclient

class "Управление\nдокументами" as documentmanagement
class "Конструктор\nсогласований" as approvaldesigner

class "Платформа" as platform
class "Служба\n фоновых операций" as worker

}

platform <-- baseobjects
platform <-- workflow
platform <-- takeoffice
platform <-- windowsclient
platform <-- documentmanagement
platform <-- approvaldesigner

windowsclient -up-> approvaldesigner
windowsclient -up-> documentmanagement
windowsclient -up-> baseobjects
windowsclient -up-> takeoffice
windowsclient -up-> workflow

worker <-- approvaldesigner
worker <-- baseobjects



PUML png file saved to: ldm/ldm_models/Literate/Literate_results/assets/diagram4.png
creating svg in ldm/ldm_models/Literate/Literate_results/assets/diagram4.svg
==> INPUT to render_puml in svg:

'hide empty description
'!pragma layout elk
skinparam rectangleBorderThickness 1
skinparam defaultTextAlignment center
skinparam lifelineStrategy solid
skinparam monochrome false
skinparam style strictuml
hide empty members
skinparam Linetype ortho

rectangle "Базовые модули" as base {

class "Базовые объекты" as baseobjects
class "Делопроизводство\n4.5" as takeoffice
class "Управление\nпроцессами" as workflow
class "Windows-клиент" as windowsclient

class "Управление\nдокументами" as documentmanagement
class "Конструктор\nсогласований" as approvaldesigner

class "Платформа" as platform
class "Служба\n фоновых операций" as worker

}

platform <-- baseobjects
platform <-- workflow
platform <-- takeoffice
platform <-- windowsclient
platform <-- documentmanagement
platform <-- approvaldesigner

windowsclient -up-> approvaldesigner
windowsclient -up-> documentmanagement
windowsclient -up-> baseobjects
windowsclient -up-> takeoffice
windowsclient -up-> workflow

worker <-- approvaldesigner
worker <-- baseobjects



PUML svg file saved to: ldm/ldm_models/Literate/Literate_results/assets/diagram4.svg
Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="Car diagram">
  Car diagram
 </a>
</div>

creating png in ldm/ldm_models/Literate/Literate_results/assets/diagram5.png
==> INPUT to render_puml in png:

class Car

Driver - Car : drives >
Car *- Wheel : have 4 >
Car -- Person : < owns


PUML png file saved to: ldm/ldm_models/Literate/Literate_results/assets/diagram5.png
creating svg in ldm/ldm_models/Literate/Literate_results/assets/diagram5.svg
==> INPUT to render_puml in svg:

class Car

Driver - Car : drives >
Car *- Wheel : have 4 >
Car -- Person : < owns


PUML svg file saved to: ldm/ldm_models/Literate/Literate_results/assets/diagram5.svg
Subject header is <div class="Subject_header header">
 <span class="prefix value">
  ##
 </span>
 <a class="SubjectName name" id="and a dummy section">
  and a dummy section
 </a>
</div>

Directory 'ldm/ldm_models/plantuml_test/plantuml_test_results' and its contents have been removed.
