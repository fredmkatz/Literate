"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/class/[id]/page",{

/***/ "(app-pages-browser)/./src/lib/sparql-client.ts":
/*!**********************************!*\
  !*** ./src/lib/sparql-client.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraphDBClient: () => (/* binding */ GraphDBClient)\n/* harmony export */ });\n// src/lib/sparql-client.ts\nclass GraphDBClient {\n    async executeQuery(query) {\n        try {\n            console.log('Client: Executing SPARQL query:', query);\n            const response = await fetch(\"/api/graphdb?repo=\".concat(this.repository), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: new URLSearchParams({\n                    query\n                })\n            });\n            console.log('Client: Response status:', response.status);\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.log('Client: Error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const data = await response.json();\n            console.log('Client: Response data:', data);\n            if (data.error) {\n                throw new Error(data.error);\n            }\n            return data;\n        } catch (error) {\n            console.error('SPARQL query failed:', error);\n            throw error;\n        }\n    }\n    async getClasses() {\n        const query = \"\\n      PREFIX ldm: <http://example.org/ldm/>\\n      \\n      SELECT ?class ?name ?oneLiner (COUNT(?attr) as ?attrCount) WHERE {\\n        ?class a ldm:Class .\\n        OPTIONAL { ?class ldm:name ?className . ?className ldm:value ?name }\\n        OPTIONAL { ?class ldm:one_liner ?oneLineObj . ?oneLineObj ldm:value ?oneLiner }\\n        OPTIONAL { ?class ldm:attributes ?attr }\\n      }\\n      GROUP BY ?class ?name ?oneLiner\\n      ORDER BY ?name ?class\\n      LIMIT 20\\n    \";\n        const result = await this.executeQuery(query);\n        return result.results.bindings.map((binding)=>{\n            var _binding_name, _binding_oneLiner, _binding_attrCount;\n            return {\n                uri: binding.class.value,\n                label: (_binding_name = binding.name) === null || _binding_name === void 0 ? void 0 : _binding_name.value,\n                comment: (_binding_oneLiner = binding.oneLiner) === null || _binding_oneLiner === void 0 ? void 0 : _binding_oneLiner.value,\n                attributeCount: parseInt(((_binding_attrCount = binding.attrCount) === null || _binding_attrCount === void 0 ? void 0 : _binding_attrCount.value) || '0')\n            };\n        });\n    }\n    async getStats() {\n        var _binding_totalClasses, _binding_totalAttrs;\n        const query = \"\\n      PREFIX ldm: <http://example.org/ldm/>\\n      \\n      SELECT \\n        (COUNT(DISTINCT ?class) as ?totalClasses)\\n        (COUNT(DISTINCT ?attr) as ?totalAttrs)\\n      WHERE {\\n        OPTIONAL { ?class a ldm:Class }\\n        OPTIONAL { ?attr a ldm:Attribute }\\n      }\\n    \";\n        const result = await this.executeQuery(query);\n        const binding = result.results.bindings[0];\n        return {\n            totalTriples: 55000,\n            totalClasses: parseInt(((_binding_totalClasses = binding.totalClasses) === null || _binding_totalClasses === void 0 ? void 0 : _binding_totalClasses.value) || '0'),\n            totalProperties: parseInt(((_binding_totalAttrs = binding.totalAttrs) === null || _binding_totalAttrs === void 0 ? void 0 : _binding_totalAttrs.value) || '0'),\n            temporalStatements: 0 // Placeholder\n        };\n    }\n    async getTemporalHistory(classUri) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n        // Mock temporal data while GraphDB issues are resolved\n        const allHistory = [\n            {\n                subject: 'http://example.org/LiterateModel',\n                predicate: 'http://www.w3.org/2000/01/rdf-schema#label',\n                object: 'Literate Data Model',\n                timestamp: new Date(Date.now() - 3600000).toISOString(),\n                user: 'alice@example.org',\n                operation: 'CREATE'\n            },\n            {\n                subject: 'http://example.org/Class',\n                predicate: 'http://www.w3.org/2000/01/rdf-schema#comment',\n                object: 'Updated class definition',\n                timestamp: new Date(Date.now() - 7200000).toISOString(),\n                user: 'bob@example.org',\n                operation: 'UPDATE'\n            },\n            {\n                subject: 'http://example.org/Attribute',\n                predicate: 'http://example.org/hasCardinality',\n                object: '1..1',\n                timestamp: new Date(Date.now() - 10800000).toISOString(),\n                user: 'alice@example.org',\n                operation: 'CREATE'\n            }\n        ];\n        if (classUri) {\n            return allHistory.filter((h)=>h.subject === classUri).slice(0, limit);\n        }\n        return allHistory.slice(0, limit);\n    }\n    async getClassDetails(classUri) {\n        // Find the class from our mock data\n        const classes = await this.getClasses();\n        const classInfo = classes.find((c)=>c.uri === classUri);\n        if (!classInfo) {\n            throw new Error(\"Class not found: \".concat(classUri));\n        }\n        // Mock attributes for the class\n        const attributes = [\n            {\n                uri: \"\".concat(classUri, \"/name\"),\n                label: 'Name',\n                domain: classUri,\n                range: 'http://www.w3.org/2001/XMLSchema#string',\n                cardinality: '1..1',\n                lastModified: new Date().toISOString()\n            },\n            {\n                uri: \"\".concat(classUri, \"/description\"),\n                label: 'Description',\n                domain: classUri,\n                range: 'http://www.w3.org/2001/XMLSchema#string',\n                isOptional: true,\n                lastModified: new Date().toISOString()\n            },\n            {\n                uri: \"\".concat(classUri, \"/id\"),\n                label: 'Identifier',\n                domain: classUri,\n                range: 'http://www.w3.org/2001/XMLSchema#int',\n                cardinality: '1..1',\n                lastModified: new Date().toISOString()\n            }\n        ];\n        return {\n            class: classInfo,\n            attributes,\n            instances: Math.floor(Math.random() * 100) + 10 // Random number of instances\n        };\n    }\n    constructor(repository = 'ldm_repos'){\n        this.repository = repository;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/sparql-client.ts\n"));

/***/ })

});