"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/sparql-client.ts":
/*!**********************************!*\
  !*** ./src/lib/sparql-client.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraphDBClient: () => (/* binding */ GraphDBClient)\n/* harmony export */ });\n// src/lib/sparql-client.ts\nclass GraphDBClient {\n    async executeQuery(query) {\n        try {\n            console.log('Client: Executing SPARQL query:', query);\n            const response = await fetch(\"/api/graphdb?repo=\".concat(this.repository), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: new URLSearchParams({\n                    query\n                })\n            });\n            console.log('Client: Response status:', response.status);\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.log('Client: Error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const data = await response.json();\n            console.log('Client: Response data:', data);\n            if (data.error) {\n                throw new Error(data.error);\n            }\n            return data;\n        } catch (error) {\n            console.error('SPARQL query failed:', error);\n            throw error;\n        }\n    }\n    async getClasses() {\n        const query = \"\\n      PREFIX ldm: <http://example.org/ldm/>\\n      \\n      SELECT ?class ?nameContent ?oneLinerContent ?modelPath ?plural WHERE {\\n        ?class a ldm:Class .\\n        OPTIONAL { ?class ldm:name ?nameObj . ?nameObj ldm:content ?nameContent }\\n        OPTIONAL { ?class ldm:one_liner ?oneLinerObj . ?oneLinerObj ldm:content ?oneLinerContent }\\n        OPTIONAL { ?class ldm:model_path ?modelPath }\\n        OPTIONAL { ?class ldm:plural ?plural }\\n      }\\n      ORDER BY ?modelPath ?class\\n      LIMIT 20\\n    \";\n        const result = await this.executeQuery(query);\n        return result.results.bindings.map((binding)=>{\n            var _binding_nameContent, _binding_modelPath, _binding_plural, _binding_oneLinerContent;\n            return {\n                uri: binding.class.value,\n                label: ((_binding_nameContent = binding.nameContent) === null || _binding_nameContent === void 0 ? void 0 : _binding_nameContent.value) || ((_binding_modelPath = binding.modelPath) === null || _binding_modelPath === void 0 ? void 0 : _binding_modelPath.value) || ((_binding_plural = binding.plural) === null || _binding_plural === void 0 ? void 0 : _binding_plural.value) || 'Unknown Class',\n                comment: (_binding_oneLinerContent = binding.oneLinerContent) === null || _binding_oneLinerContent === void 0 ? void 0 : _binding_oneLinerContent.value,\n                attributeCount: 0\n            };\n        });\n    }\n    async getStats() {\n        // Use hardcoded stats to avoid hanging queries for now\n        return {\n            totalTriples: 55000,\n            totalClasses: 25,\n            totalProperties: 100,\n            temporalStatements: 0\n        };\n    }\n    async getTemporalHistory(classUri) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n        // Mock temporal data while GraphDB issues are resolved\n        const allHistory = [\n            {\n                subject: 'http://example.org/LiterateModel',\n                predicate: 'http://www.w3.org/2000/01/rdf-schema#label',\n                object: 'Literate Data Model',\n                timestamp: new Date(Date.now() - 3600000).toISOString(),\n                user: 'alice@example.org',\n                operation: 'CREATE'\n            },\n            {\n                subject: 'http://example.org/Class',\n                predicate: 'http://www.w3.org/2000/01/rdf-schema#comment',\n                object: 'Updated class definition',\n                timestamp: new Date(Date.now() - 7200000).toISOString(),\n                user: 'bob@example.org',\n                operation: 'UPDATE'\n            },\n            {\n                subject: 'http://example.org/Attribute',\n                predicate: 'http://example.org/hasCardinality',\n                object: '1..1',\n                timestamp: new Date(Date.now() - 10800000).toISOString(),\n                user: 'alice@example.org',\n                operation: 'CREATE'\n            }\n        ];\n        if (classUri) {\n            return allHistory.filter((h)=>h.subject === classUri).slice(0, limit);\n        }\n        return allHistory.slice(0, limit);\n    }\n    async getClassDetails(classUri) {\n        var _binding_nameContent, _binding_modelPath, _binding_plural, _binding_oneLinerContent;\n        // Get class info\n        const classQuery = \"\\n      PREFIX ldm: <http://example.org/ldm/>\\n      \\n      SELECT ?class ?nameContent ?oneLinerContent ?modelPath ?plural WHERE {\\n        ?class a ldm:Class .\\n        FILTER(?class = <\".concat(classUri, \">)\\n        OPTIONAL { ?class ldm:name ?nameObj . ?nameObj ldm:content ?nameContent }  \\n        OPTIONAL { ?class ldm:one_liner ?oneLinerObj . ?oneLinerObj ldm:content ?oneLinerContent }\\n        OPTIONAL { ?class ldm:model_path ?modelPath }\\n        OPTIONAL { ?class ldm:plural ?plural }\\n      }\\n    \");\n        const classResult = await this.executeQuery(classQuery);\n        if (classResult.results.bindings.length === 0) {\n            throw new Error(\"Class not found: \".concat(classUri));\n        }\n        const binding = classResult.results.bindings[0];\n        const classInfo = {\n            uri: binding.class.value,\n            label: ((_binding_nameContent = binding.nameContent) === null || _binding_nameContent === void 0 ? void 0 : _binding_nameContent.value) || ((_binding_modelPath = binding.modelPath) === null || _binding_modelPath === void 0 ? void 0 : _binding_modelPath.value) || ((_binding_plural = binding.plural) === null || _binding_plural === void 0 ? void 0 : _binding_plural.value) || 'Unknown Class',\n            comment: (_binding_oneLinerContent = binding.oneLinerContent) === null || _binding_oneLinerContent === void 0 ? void 0 : _binding_oneLinerContent.value,\n            attributeCount: 0 // Will be updated below\n        };\n        // Get attributes for this class\n        const attrQuery = \"\\n      PREFIX ldm: <http://example.org/ldm/>\\n      \\n      SELECT ?attr ?nameContent ?oneLinerContent WHERE {\\n        <\".concat(classUri, \"> ldm:attributes ?attr .\\n        OPTIONAL { ?attr ldm:name ?nameObj . ?nameObj ldm:content ?nameContent }\\n        OPTIONAL { ?attr ldm:one_liner ?oneLinerObj . ?oneLinerObj ldm:content ?oneLinerContent }\\n      }\\n    \");\n        const attrResult = await this.executeQuery(attrQuery);\n        const attributes = attrResult.results.bindings.map((binding)=>{\n            var _binding_nameContent;\n            return {\n                uri: binding.attr.value,\n                label: ((_binding_nameContent = binding.nameContent) === null || _binding_nameContent === void 0 ? void 0 : _binding_nameContent.value) || 'Unknown Attribute',\n                domain: classUri,\n                range: 'Unknown',\n                lastModified: new Date().toISOString()\n            };\n        });\n        classInfo.attributeCount = attributes.length;\n        return {\n            class: classInfo,\n            attributes,\n            instances: 0 // Placeholder for now\n        };\n    }\n    async getSubjectHierarchy() {\n        // Get all subject relationships in one query\n        const query = \"\\n      PREFIX ldm: <http://example.org/ldm/>\\n      \\n      SELECT ?parent ?parentName ?child ?childName ?childOneLiner WHERE {\\n        ?parent ldm:subjects ?child .\\n        OPTIONAL { ?parent ldm:name ?parentNameObj . ?parentNameObj ldm:content ?parentName }\\n        OPTIONAL { ?child ldm:name ?childNameObj . ?childNameObj ldm:content ?childName }\\n        OPTIONAL { ?child ldm:one_liner ?childOneLineObj . ?childOneLineObj ldm:content ?childOneLiner }\\n      }\\n      ORDER BY ?parentName ?childName\\n    \";\n        const result = await this.executeQuery(query);\n        // Build hierarchy from flat results\n        const nodeMap = new Map();\n        const rootNodes = new Set();\n        // First pass: create all nodes\n        result.results.bindings.forEach((binding)=>{\n            const parentUri = binding.parent.value;\n            const childUri = binding.child.value;\n            if (!nodeMap.has(parentUri)) {\n                var _binding_parentName;\n                nodeMap.set(parentUri, {\n                    uri: parentUri,\n                    name: ((_binding_parentName = binding.parentName) === null || _binding_parentName === void 0 ? void 0 : _binding_parentName.value) || 'Unknown',\n                    children: []\n                });\n            }\n            if (!nodeMap.has(childUri)) {\n                var _binding_childName, _binding_childOneLiner;\n                nodeMap.set(childUri, {\n                    uri: childUri,\n                    name: ((_binding_childName = binding.childName) === null || _binding_childName === void 0 ? void 0 : _binding_childName.value) || 'Unknown',\n                    oneLiner: (_binding_childOneLiner = binding.childOneLiner) === null || _binding_childOneLiner === void 0 ? void 0 : _binding_childOneLiner.value,\n                    children: []\n                });\n            }\n        });\n        // Second pass: build relationships\n        result.results.bindings.forEach((binding)=>{\n            const parent = nodeMap.get(binding.parent.value);\n            const child = nodeMap.get(binding.child.value);\n            parent.children.push(child);\n        });\n        // Find root (LiterateModel)\n        const root = Array.from(nodeMap.values()).find((node)=>node.name.includes('Literate') || node.uri.includes('LiterateModel'));\n        return root || null;\n    }\n    async getSubjectDetails(subjectUri) {\n        var _firstBinding_name, _firstBinding_oneLiner, _firstBinding_elaboration;\n        // Get subject basic info, classes, and sub-subjects\n        const query = \"\\n      PREFIX ldm: <http://example.org/ldm/>\\n      \\n      SELECT ?subject ?name ?oneLiner ?elaboration ?class ?className ?classOneLiner ?subSubject ?subSubjectName ?subSubjectOneLiner WHERE {\\n        VALUES ?subject { <\".concat(subjectUri, \"> }\\n        \\n        OPTIONAL { ?subject ldm:name ?nameObj . ?nameObj ldm:content ?name }\\n        OPTIONAL { ?subject ldm:one_liner ?oneLineObj . ?oneLineObj ldm:content ?oneLiner }\\n        OPTIONAL { ?subject ldm:elaboration ?elaborationObj . ?elaborationObj ldm:content ?elaboration }\\n        \\n        OPTIONAL { \\n          ?class ldm:subject ?subject .\\n          OPTIONAL { ?class ldm:name ?classNameObj . ?classNameObj ldm:content ?className }\\n          OPTIONAL { ?class ldm:one_liner ?classOneLineObj . ?classOneLineObj ldm:content ?classOneLiner }\\n        }\\n        \\n        OPTIONAL {\\n          ?subject ldm:subjects ?subSubject .\\n          OPTIONAL { ?subSubject ldm:name ?subSubjectNameObj . ?subSubjectNameObj ldm:content ?subSubjectName }\\n          OPTIONAL { ?subSubject ldm:one_liner ?subSubjectOneLineObj . ?subSubjectOneLineObj ldm:content ?subSubjectOneLiner }\\n        }\\n      }\\n    \");\n        const result = await this.executeQuery(query);\n        if (result.results.bindings.length === 0) {\n            throw new Error(\"Subject not found: \".concat(subjectUri));\n        }\n        const firstBinding = result.results.bindings[0];\n        // Collect unique classes and sub-subjects\n        const classesMap = new Map();\n        const subSubjectsMap = new Map();\n        result.results.bindings.forEach((binding)=>{\n            var _binding_class, _binding_subSubject;\n            if ((_binding_class = binding.class) === null || _binding_class === void 0 ? void 0 : _binding_class.value) {\n                var _binding_className, _binding_classOneLiner;\n                classesMap.set(binding.class.value, {\n                    uri: binding.class.value,\n                    name: ((_binding_className = binding.className) === null || _binding_className === void 0 ? void 0 : _binding_className.value) || 'Unknown Class',\n                    oneLiner: (_binding_classOneLiner = binding.classOneLiner) === null || _binding_classOneLiner === void 0 ? void 0 : _binding_classOneLiner.value\n                });\n            }\n            if ((_binding_subSubject = binding.subSubject) === null || _binding_subSubject === void 0 ? void 0 : _binding_subSubject.value) {\n                var _binding_subSubjectName, _binding_subSubjectOneLiner;\n                subSubjectsMap.set(binding.subSubject.value, {\n                    uri: binding.subSubject.value,\n                    name: ((_binding_subSubjectName = binding.subSubjectName) === null || _binding_subSubjectName === void 0 ? void 0 : _binding_subSubjectName.value) || 'Unknown Subject',\n                    oneLiner: (_binding_subSubjectOneLiner = binding.subSubjectOneLiner) === null || _binding_subSubjectOneLiner === void 0 ? void 0 : _binding_subSubjectOneLiner.value\n                });\n            }\n        });\n        return {\n            uri: subjectUri,\n            name: ((_firstBinding_name = firstBinding.name) === null || _firstBinding_name === void 0 ? void 0 : _firstBinding_name.value) || 'Unknown Subject',\n            oneLiner: (_firstBinding_oneLiner = firstBinding.oneLiner) === null || _firstBinding_oneLiner === void 0 ? void 0 : _firstBinding_oneLiner.value,\n            elaboration: (_firstBinding_elaboration = firstBinding.elaboration) === null || _firstBinding_elaboration === void 0 ? void 0 : _firstBinding_elaboration.value,\n            classes: Array.from(classesMap.values()),\n            subSubjects: Array.from(subSubjectsMap.values())\n        };\n    }\n    constructor(repository = 'ldm_repos'){\n        this.repository = repository;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/sparql-client.ts\n"));

/***/ })

});