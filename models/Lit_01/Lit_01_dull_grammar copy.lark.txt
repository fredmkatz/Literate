// === Abstract display: Intro ===
//
// Generated Lark grammar for Presentable Object Model
//
//  Generator: PomGrammarGenerator
//
//  Model: Lit_01
//
//  Format: dull

start: annotation
		|	component
		|	data_type
		|	data_type_clause
		|	formula_coding
		|	formula
starter0: start+	// For any number of any NT

// === End of abstract section Intro ===

// === Abstract display: Terminals ===
//
// ===== Terminal definitions =====
//
// Whitespace handling
%import common.WS_INLINE
%ignore WS_INLINE
//
// ===== Unused Named Punctuation =====
ASTERISK: "*"
LBRACK: "["
RBRACK: "]"
RBRACE: "}"
COMMA: ","
DOT: "."
//
// ===== Named Punctuation In Use =====
UNDERSCORE: "_"
HASH: "#"
DASH: "-"
NEWLINE: "\n"
RPAREN: ")"
LBRACE: "{"
COLON: ":"
LPAREN: "("
//
// ===== Tokens =====
//
// ===== Field name literals =====
ABBREVIATION_QF.9: /abbreviation/i
BASED_ON_QF.9: /based\s*on/i
CODE_QF.9: /code/i
CONTENT_QF.9: /content/i
DATA_TYPE_CLAUSE_QF.9: /data\s*type\s*clause/i
DEFAULT_QF.9: /default/i
DEPENDENTS_QF.9: /dependents/i
DERIVATION_QF.9: /derivation/i
ENGLISH_QF.9: /english/i
IS_REQUIRED_QF.9: /is\s*required/i
IS_VALUE_TYPE_QF.9: /is\s*value\s*type/i
MESSAGE_QF.9: /message/i
NAME_QF.9: /name/i
ONE_LINER_QF.9: /one\s*liner/i
PLURAL_QF.9: /plural/i
SEVERITY_QF.9: /severity/i
SUBTYPES_QF.9: /subtypes/i
SUBTYPE_OF_QF.9: /subtype\s*of/i
WHERE_QF.9: /where/i
COMPONENT_Q.8: "component"i
FIELDVALUE_Q.8: "fieldvalue"i
FROM_Q.8: "from"i
LIST_Q.8: "list"i
MAPPING_Q.8: "mapping"i
OF_Q.8: "of"i
SET_Q.8: "set"i
TO_Q.8: "to"i
VALUETYPE_Q.8: "valuetype"i
//
// ===== Presentable Boolean Tokens =====
IS_OPTIONAL: "optional"i | "true"i | "sure"i | "yes"i | "required"i | "false"i | "no way"i
REFERENCE_OR_VALUE: "reference"i | "value"i
IS_REALLY_REQUIRED: "required"i | "true"i | "sure"i | "yes"i | "optional"i | "false"i | "no way"i
//
// ===== Presentable Pattern Tokens =====
UPPER_CAMEL: CAMEL_CASE
LOWER_CAMEL: CAMEL_CASE
CAMEL_CASE: /(?:[A-Za-z][A-Za-z0-9]*)(?:\s+(?:[A-Za-z][A-Za-z0-9]*))*/
EMOJI: /\d+(.*?)[\u263a-\U0001f645]/
PARAGRAPH: "<<<" + /.*?/ + ">>>"
ONE_LINER: "<<<" + /.*?/ + ">>>"
CLASS_NAME: UPPER_CAMEL
LABEL: UPPER_CAMEL
//
// ===== Primitive types =====
STRING: /"\""[^"\"]*"\""/
NUMBER: /[0-9]+(\.[0-9]+)?/
BOOLEAN: "true" | "false"
IDENTIFIER: /[a-zA-Z][a-zA-Z0-9_]*/

// === End of abstract section Terminals ===

// === Abstract display: Main Class Rules ===
//
//           ========== Annotation ==========
annotation.2: [ annotation__emoji__value ] annotation__label__value COLON annotation__content__value NEWLINE
//
//   ... value rules for annotation  ...
annotation__label__value: LABEL
annotation__content__value: ONE_LINER
annotation__emoji__value: EMOJI

//
//           ========== Component ==========
component_header: COMPONENT_Q COLON component__name__value [ DASH component__one_liner__value ] NEWLINE
component_clause: NAME_QF COLON CAMEL_CASE NEWLINE -> component__name__simple
		|	ONE_LINER_QF COLON ONE_LINER NEWLINE -> component__one_liner__simple
		|	ABBREVIATION_QF COLON UPPER_CAMEL NEWLINE -> component__abbreviation__simple
		|	PARAGRAPH+ -> component__elaboration__list
		|	annotation+ -> component__annotations__list
component.2: subject_e | class | attribute_section | attribute
		|	component_header  (component_clause)*
//
//   ... value rules for component  ...
component__name__value: CAMEL_CASE
component__one_liner__value: ONE_LINER

//
//           ========== Attribute ==========
attribute_header: DASH attribute__name__value [ DASH attribute__one_liner__value ] [ LPAREN attribute__data_type_clause__value RPAREN ] NEWLINE
attribute_clause: component_clause
		|	NAME_QF COLON LOWER_CAMEL NEWLINE -> attribute__name__simple
		|	DATA_TYPE_CLAUSE_QF COLON data_type_clause NEWLINE -> attribute__data_type_clause__simple
		|	DERIVATION_QF COLON derivation NEWLINE -> attribute__derivation__simple
		|	DEFAULT_QF COLON default NEWLINE -> attribute__default__simple
		|	constraint+ -> attribute__constraints__list
attribute.3: attribute_header  (attribute_clause)*
//
//   ... value rules for attribute  ...
attribute__name__value: LOWER_CAMEL
attribute__one_liner__value: ONE_LINER
attribute__data_type_clause__value: data_type_clause

//
//           ========== AttributeSection ==========
attribute_section_header: DASH attribute_section__name__value [ DASH attribute_section__one_liner__value ] [ LPAREN attribute_section__is_required__value RPAREN ] NEWLINE
attribute_section_clause: component_clause
		|	IS_REQUIRED_QF COLON IS_REALLY_REQUIRED NEWLINE -> attribute_section__is_required__simple
		|	attribute+ -> attribute_section__attributes__list
attribute_section.3: attribute_section_header  (attribute_section_clause)*
//
//   ... value rules for attribute_section  ...
attribute_section__name__value: CAMEL_CASE
attribute_section__one_liner__value: ONE_LINER
attribute_section__is_required__value: IS_REALLY_REQUIRED

//
//           ========== Class ==========
class_header: UNDERSCORE class__name__value [ DASH class__one_liner__value ] NEWLINE
class_clause: component_clause
		|	NAME_QF COLON UPPER_CAMEL NEWLINE -> class__name__simple
		|	PLURAL_QF COLON UPPER_CAMEL NEWLINE -> class__plural__simple
		|	SUBTYPE_OF_QF COLON CLASS_NAME (COMMA CLASS_NAME)* NEWLINE -> class__subtype_of__list
		|	SUBTYPES_QF COLON CLASS_NAME (COMMA CLASS_NAME)* NEWLINE -> class__subtypes__list
		|	BASED_ON_QF COLON CLASS_NAME (COMMA CLASS_NAME)* NEWLINE -> class__based_on__list
		|	DEPENDENTS_QF COLON CLASS_NAME (COMMA CLASS_NAME)* NEWLINE -> class__dependents__list
		|	IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE -> class__is_value_type__bool
		|	WHERE_QF COLON ONE_LINER NEWLINE -> class__where__simple
		|	attribute+ -> class__attributes__list
		|	attribute_section+ -> class__attribute_sections__list
class.3: value_type | reference_type
		|	class_header  (class_clause)*
//
//   ... value rules for class  ...
class__name__value: UPPER_CAMEL
class__one_liner__value: ONE_LINER

//
//           ========== ReferenceType ==========
reference_type_header: UNDERSCORE reference_type__name__value [ DASH reference_type__one_liner__value ] NEWLINE
reference_type.4: reference_type_header  (class_clause)*
//
//   ... value rules for reference_type  ...
reference_type__name__value: UPPER_CAMEL
reference_type__one_liner__value: ONE_LINER

//
//           ========== ValueType ==========
value_type_header: UNDERSCORE VALUETYPE_Q COLON value_type__name__value [ DASH value_type__one_liner__value ] NEWLINE
value_type.4: value_type_header  (class_clause)*
//
//   ... value rules for value_type  ...
value_type__name__value: UPPER_CAMEL
value_type__one_liner__value: ONE_LINER

//
//           ========== SubjectE ==========
subject_e_header: HASH HASH HASH HASH HASH LBRACE subject_e__name__value [ DASH subject_e__one_liner__value ] NEWLINE
subject_e_clause: component_clause
		|	class+ -> subject_e__classes__list
subject_e.3: subject_d
		|	subject_e_header  (subject_e_clause)*
//
//   ... value rules for subject_e  ...
subject_e__name__value: CAMEL_CASE
subject_e__one_liner__value: ONE_LINER

//
//           ========== SubjectD ==========
subject_d_header: HASH HASH HASH HASH LBRACE subject_d__name__value [ DASH subject_d__one_liner__value ] NEWLINE
subject_d_clause: subject_e_clause
		|	subject_e+ -> subject_d__subjects__list
subject_d.4: subject_c
		|	subject_d_header  (subject_d_clause)*
//
//   ... value rules for subject_d  ...
subject_d__name__value: CAMEL_CASE
subject_d__one_liner__value: ONE_LINER

//
//           ========== SubjectC ==========
subject_c_header: HASH HASH HASH LBRACE subject_c__name__value [ DASH subject_c__one_liner__value ] NEWLINE
subject_c_clause: subject_d_clause
		|	subject_d+ -> subject_c__subjects__list
subject_c.5: subject_b
		|	subject_c_header  (subject_c_clause)*
//
//   ... value rules for subject_c  ...
subject_c__name__value: CAMEL_CASE
subject_c__one_liner__value: ONE_LINER

//
//           ========== SubjectB ==========
subject_b_header: HASH HASH LBRACE subject_b__name__value [ DASH subject_b__one_liner__value ] NEWLINE
subject_b_clause: subject_c_clause
		|	subject_c+ -> subject_b__subjects__list
subject_b.6: ldm
		|	subject_b_header  (subject_b_clause)*
//
//   ... value rules for subject_b  ...
subject_b__name__value: CAMEL_CASE
subject_b__one_liner__value: ONE_LINER

//
//           ========== Ldm ==========
ldm_header: HASH LBRACE ldm__name__value [ DASH ldm__one_liner__value ] NEWLINE
ldm_clause: subject_b_clause
		|	subject_b+ -> ldm__subjects__list
ldm.7: ldm_header  (ldm_clause)*
//
//   ... value rules for ldm  ...
ldm__name__value: CAMEL_CASE
ldm__one_liner__value: ONE_LINER

//
//           ========== DataType ==========
data_type.2: base_data_type | list_data_type | set_data_type | mapping_data_type
//
//           ========== BaseDataType ==========
base_data_type.3: base_data_type__class_name__value [ DASH base_data_type__is_value__value ]
//
//   ... value rules for base_data_type  ...
base_data_type__class_name__value: STRING
base_data_type__is_value__value: REFERENCE_OR_VALUE

//
//           ========== ListDataType ==========
list_data_type.3: LIST_Q OF_Q list_data_type__element_type__value
//
//   ... value rules for list_data_type  ...
list_data_type__element_type__value: data_type

//
//           ========== MappingDataType ==========
mapping_data_type.3: MAPPING_Q FROM_Q mapping_data_type__domain_type__value TO_Q mapping_data_type__range_type__value
//
//   ... value rules for mapping_data_type  ...
mapping_data_type__domain_type__value: data_type
mapping_data_type__range_type__value: data_type

//
//           ========== SetDataType ==========
set_data_type.3: SET_Q OF_Q set_data_type__element_type__value
//
//   ... value rules for set_data_type  ...
set_data_type__element_type__value: data_type

//
//           ========== DataTypeClause ==========
data_type_clause.2: data_type_clause__is_optional__value data_type_clause__data_type__value [ data_type_clause__cardinality__value ]
//
//   ... value rules for data_type_clause  ...
data_type_clause__data_type__value: data_type
data_type_clause__is_optional__value: BOOLEAN
data_type_clause__cardinality__value: STRING

//
//           ========== Formula ==========
formula_clause: ENGLISH_QF COLON STRING NEWLINE -> formula__english__str
		|	CODE_QF COLON formula_coding NEWLINE -> formula__code__simple
formula.2: constraint | derivation | default
		|	( formula_clause )+
//
//           ========== Constraint ==========
constraint_clause: formula_clause
		|	MESSAGE_QF COLON STRING NEWLINE -> constraint__message__str
		|	SEVERITY_QF COLON STRING NEWLINE -> constraint__severity__str
constraint.3: ( constraint_clause )+
//
//           ========== Default ==========
default.3: ( formula_clause )+
//
//           ========== Derivation ==========
derivation.3: ( formula_clause )+
//
//           ========== FormulaCoding ==========
formula_coding_clause: CONTENT_QF COLON STRING NEWLINE -> formula_coding__content__str
formula_coding.2: ( formula_coding_clause )+
// === End of abstract section Main Class Rules ===


