"""
Configuration system for Presentable Object Model (POM) package.

This module provides configuration management for the POM package,
including support for format templates and model metadata.
"""

import os
import yaml
import json

from typing import Dict, Any, Optional
import importlib.resources as pkg_resources
from dataclasses import fields, is_dataclass
from utils_pom.util_flogging import flogger, trace_decorator, trace_method
from utils_pom.util_json_pom import clean_dict, update_nested_dict
from class_pom_meta import PomMeta
from utils_pom.util_fmk_pom import read_yaml_file

primitive_terminals = {
    "STRING": '/"\\""[^"\\"]*"\\""/',
    "NUMBER": "/[0-9]+(\\.[0-9]+)?/",
    "BOOLEAN": '"true" | "false"',
    "IDENTIFIER": "/[a-zA-Z][a-zA-Z0-9_]*/",
}

# Punctuation mark names
pmark_named = {
    "HASH": "#",
    "ASTERISK": "*",
    "UNDERSCORE": "_",
    "DASH": "-",
    "LPAREN": "(",
    "RPAREN": ")",
    "LBRACK": "[",
    "RBRACK": "]",
    "LBRACE": "{",
    "RBRACE": "}",
    "COMMA": ",",
    "COLON": ":",
    "DOT": ".",
    "NEWLINE": '\\n',
}

named_pmarks = {v: k for k, v in pmark_named.items()}


class PomConfig:
    """
    Configuration manager for the Presentable Object Model system.

    Supports:
    -   loading configuration from YAML files
    -   loading model metadata
    -   loading formatting specs, and accessing class and field templates
    -   retaining Lark grammar and hibernate templates generated by generator
    """

    @trace_method
    def __init__(
        self,
        model_name: str,
        config_dict: Dict[str, Any] = None,
        format_name: str = None,
    ):
        """
        Initialize the configuration manager.

        Args:
            model_name: Name of the model for loading model-specific config
            config_dict: Optional initial configuration dictionary
            format_name: Optional format name to load
        """
        flogger.infof(
            f"Initializing PomConfig with model_name={model_name}, format_name={format_name}"
        )

        self.model_name = model_name
        self.format_name = format_name

        # Initialize with default values
        self._config_params = {
            "lark": {
                "parser": "earley",
                "case_sensitive": False,
                "ambiguity": "resolve",
                "debug": True,
            },
        }

        
        self.pom_meta = PomMeta()
        # Load model-specific formats
        self.pom_meta.load_model_formats(model_name, format_name)

        # Load default configuration
        self._load_default_config()

        # Apply custom config if provided
        if config_dict:
            self._config_params.update(config_dict)


    def _load_default_config(self):
        """Load default configuration from package resources."""
        flogger.info("Loading default configuration")
        try:
            # Try to load default config
            default_config_path = "settings/config.yaml"
            flogger.infof(f"Looking for default config in {default_config_path}")

            if os.path.exists(default_config_path):
                self.update_config_from_file(default_config_path)
            else:
                flogger.warning(f"Default config file not found: {default_config_path}")

        except Exception as e:
            flogger.warning(f"Error loading default configuration: {e}")


    def update_config_from_file(self, file_path: str):
        """
        Load configuration from a YAML file.

        Args:
            file_path: Path to the YAML file
        """
        flogger.infof(f"Updating config from file: {file_path}")
        config_data = read_yaml_file(file_path)
        self._config_params.update(config_data)
        flogger.debug(f"Updated config: {clean_dict(self._config_params)}")


    def update(self, config_dict: Dict[str, Any]):
        """
        Update configuration with new values.

        Args:
            config_dict: Configuration dictionary to update with
        """
        if config_dict:
            self._config_params.update(config_dict)

    def get(self, key: str, default: Any = None) -> Any:
        """
        Get a configuration value.

        Args:
            key: Configuration key
            default: Default value if key is not found

        Returns:
            Configuration value or default
        """
        return self._config_params.get(key, default)

    def __getitem__(self, key: str) -> Any:
        """
        Get a configuration value using dictionary syntax.

        Args:
            key: Configuration key

        Returns:
            Configuration value
        """
        return self._config_params[key]

