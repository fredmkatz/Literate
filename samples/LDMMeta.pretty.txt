start
  document
    section
      section_head	# Literate Data Model

      elaboration
        blank_line	

      section
        section_head
          ## Preliminaries

          In Literate Data Modeling, the main components of interest are typically Classes, Attributes, Models, and Subjects. However, to streamline the model and promote reusability, we introduce a supertype called Component. By defining common attributes and behaviors in the Component class, we can inherit them in the subclasses, ensuring consistency and reducing duplication throughout the model.  

        elaboration
          code_block	```
Sample code block between paragraphs
   x <  y and y > z
```

          blank_line	

          blank_line	

          paragraph	We present the Component class first because it is a best practice in modeling to introduce supertypes before their subtypes. This approach allows readers to understand the general concepts and shared properties before delving into the specifics of each specialized component.

          blank_line	

          blank_line	

        class
          class_head
            _ **Component** - An element or building block of the literate data model with an extended

              OneLiner  

            In Literate Data Modeling, the main components of interest are typically Classes, Attributes, Models, and Subjects. However, to streamline the model and promote reusability, we introduce a supertype called Component. By defining common attributes and behaviors in the Component class, we can inherit them in the subclasses, ensuring consistency and reducing duplication throughout the model.  

          elaboration
            code_block	```
Sample code block between paragraphs
   x <  y and y > z
```

            paragraph
              We present the Component class first because it is a best practice in modeling to introduce supertypes before their subtypes. This approach allows readers to understand the general concepts and shared properties before delving into the specifics of each specialized component.

              abbreviation: COMPT

            blank_line	

            paragraph
              Subtypes: ComponentA, ComponentB, ComponentC

                  Trying an elaboration for a subtypes clauses. 

                  End of first paragraph

            blank_line	

            paragraph	    Start of second paragraph.

            blank_line	

          field	BasedOn: ComponentA, ComponentB, ComponentC

          attribute
            attribute_head
              - parentClass - the supertype - just here to test parser (Class)

                  Trying an elaboration for an Attribute declaration clauses. 

                  End of first paragraph

                  Start of second paragraph.

              inverseOf: Class.child_class

                  Trying an elaboration for an InverseOf clause on an attribute declaration clauses. 

                  End of first paragraph

                  Start of second paragraph.

              inverse: Class.child_class2

            elaboration
              blank_line	

          attribute
            attribute_head	- **normalName** - the name of the component, not in camel case (*String*)

          attribute
            attribute_head	- **name** - The name of the component (CamelName)

            elaboration
              blank_line	

              blank_line	

              blank_line	

          attribute
            attribute_head	- **qualifiedName** - (*QualifiedCamel*)

          attribute
            attribute_head
              - **abbreviatedName** - a short form of the component's name, used for cross references and improved readability. (*CamelName*)

              	***Default***: name

                  Trying an elaboration for a Default declaration clause - ie first part of a Default Formuka object 

                  End of first paragraph

                  Start of second paragraph.

                code: This is the OCL code for calculating the name

                    Trying an elaboration for a Default code clause - ie subsequent  part of a Default Formuka object 

                  End of first paragraph

                  Start of second paragraph.

                English: And thii is an english language rendering

                constraint: this is the first constraint for name in Component

                code: OCL for first constraint

                english: English for first constraint

                Severity: Harsh

            elaboration
              paragraph
                  Message: {name} is all wrong - first

                  constraint: this is the second constraint for name in Component

                  code: OCL for second constraint

                  english: English for second constraint

            field
              Severity: Harsh second

                Message: {name} is all wrong - second

              	***Example***: "LDM" is the short form of "Literate Data Model".

          attribute
            attribute_head	- **oneLiner** - A brief, one-line definition or description of the component, suitable for use in a descriptive table of contents. _(RichLine)_  

            elaboration
              blank_line	

          attribute
            attribute_head	- **elaboration** - A more detailed explanation or discussion of the component _(RichText)_  

        class
          class_head	__  ***For Machinery*** - mechanical attributes

          attribute
            attribute_head
              - **isEmbellishment** - Indicates whether this component is an embellishment added during post-parsing processing _(Boolean)_

                🔄 ***Default***: false

            elaboration
              paragraph
                  🔄  ***Note***: This attribute is set to true for components that are automatically generated or added during the fleshing out, review, or rendering processes, such as implied attributes or suggested model elements. It helps distinguish embellishments from the core model elements defined in the original LDM source.

                  And after that very long onelner on the Note, here's additional elaboration on  it

                  With a second line in the first paragraph

                  And another paragraph, too.

                  Also with a second line

                    wildly: This is an unregistered annotation

                    minorNote: This is a minor note

            field	majorNote: And this is a major note. Both should be annotations

        class
          class_head	__  ***Markdown Support***

          attribute
            attribute_head	- **mdPrefix** (*[String](#string)*)

            elaboration
              paragraph		🆎 ***Derivation***: ""

          attribute
            attribute_head	- **mdSuffix** (*[String](#string)*)

            elaboration
              paragraph		🆎 ***Derivation***: ""

          attribute
            attribute_head	- **mdTopLine** (*[String](#string)*)

            elaboration
              paragraph		🆎 ***Derivation***: mdPrefix + name + " - " + oneLiner + mdSuffix

        class
          class_head	_ **AnnotationType** - a kind of note, or aside, used to call attention to additional information about some Component. 

          elaboration
            paragraph
              And it can be continued on fresh lines.

              However many you want.

              But only up to a blank line or other clause

              See. this is not included in the extra text.

              ***Based on*** : Literate Data Model

              ***Note***: Each LDM declares a set of Annotation Types, with defined labels, emojis, and clearly documented purposes. These are *recognized* or *registered* Annotation Types. 

              But, if none of these fit, you can  introduce an Annotation with any label. It would have an *ad hoc* Annotation Type. 

          attribute
            attribute_head	- **emoji** - an emoji (Emoji)

          attribute
            attribute_head	- **emojiName** - an emoji (String)

          attribute
            attribute_head	- **emojiUnicode** - the Unicode for the emoji (Unicode)

          attribute
            attribute_head	- **label** - A short label to indicate the purpose of the annotation _(CamelName)_  

          attribute
            attribute_head	- **plural** - the plural form of the label (*UpperCamel*).  

            elaboration
              paragraph	    Default: based on label

          attribute
            attribute_head	- **Purpose** - the intended reason for the annotation.

        class
          class_head
            _ ValueType: **Annotation**  

            A note or comment associated with a model element  

          elaboration
            paragraph	***Based on***: Component 

          attribute
            attribute_head	- **annotationType** - (optional Annotation Type) 

            elaboration
              paragraph	Note: An Annotation is considered to *recognized* if the label is associated with an Annotation Type. otherwise it is *ad hoc*.  

          attribute
            attribute_head
              - **label** - A short label to indicate the purpose of the annotation _(CamelName)_  

                   

            elaboration
              paragraph	     But any short label is valid. 

            field	Default: from annotationType

          attribute
            attribute_head	- **Emoji** - (optional Emoji)

            elaboration
              paragraph		Default: from annotation type

              blank_line	

              blank_line	

          attribute
            attribute_head	- **content** - The content or body of the annotation (*RichText*)​​​​​​​  

        class
          class_head	__ ***For Machinery***

          attribute
            attribute_head
              - **isEmbellishment** - Indicates whether this annotation is an embellishment added during post-parsing processing _(Boolean)_

                🔄 ***Default***: false

            elaboration
              paragraph	  ℹ️ ***Note***: This attribute is set to true for annotations that are automatically generated or added during the fleshing out, review, or rendering processes, such as suggestions, issues, or diagnostic messages. It helps distinguish embellishment annotations from the annotations defined in the original LDM source.

        section
          section_head	## The Model and its Subjects

          elaboration
            blank_line	

            blank_line	

          class
            class_head
              _ **LiterateDataModel** - A representation of a domain's entities, attributes, and relationships, 

              along with explanatory text and examples  

            elaboration
              paragraph	***Abbreviation***: LDM

            field
              Plural: LiterateDataModels 

              Subtype of: Component  

            attribute
              attribute_head	- name (UpperCamel )

            attribute
              attribute_head	- allSubjects - list of all classes in the model, as ordered in the 

              elaboration
                paragraph	                definition of the model. (List of Classes)

              field
                Derivation: gathering s.allSubjects over s in subjectAreas

                    ***Constraint***: Subject names must be unique across the model.

            attribute
              attribute_head
                - allClasses - list of all classes in the model, as ordered in the definition of the model. (List of Classes)

                    Derivation: gathering s.allClasses over s in allSubjects.  

              elaboration
                paragraph	***Constraint***: Class names must be unique across the model.  

          class
            class_head	__ 	***Modeling Configuration***

            attribute
              attribute_head	- **annotationTypes** - (List of AnnotationTypes)

            attribute
              attribute_head	- **Preferred Coding Language** - the recommended lanquage  for expressing derivation, defaults, and constraints (Coding Language). 

              elaboration
                paragraph	   Default: OCL

            attribute
              attribute_head	- **alternate Coding Languages** -  (optional List of Coding Languages).  

            attribute
              attribute_head	- **Preferred Template Language** - the recommended lanquage  for expressing derivation, defaults, and constraints (Template Language). 

              elaboration
                paragraph	   Default: Handlebars

            attribute
              attribute_head	- **alternate Template Languages** -  (optional List of Template Languages). 

            attribute
              attribute_head	- **aiFunctions** - A list of functions that require sophisticated AI-powered implementation *(List of String)*

              elaboration
                paragraph	  Derivation: ['aiEnglishPlural()']

          class
            class_head	__ ***Markdown Support***

            attribute
              attribute_head	- **mdPrefix** (*[String](#string)*)

              elaboration
                paragraph		🆎 ***Derivation***: "# "

            attribute
              attribute_head	- **mdTopLine** (*[String](#string)*)

              elaboration
                paragraph		🆎 ***Derivation***: mdPrefix + name 

          class
            class_head	_ **Subject**  

            elaboration
              paragraph	A specific topic or theme within the model  

            field
              Plural: Subjects  

              Subtype of: Component  

              Dependent of: LiterateDataModel

              Subjects are the chapters an sections of the model. 

              A subject need not contain any Classes if it’s just expository.  

            attribute
              attribute_head	- name (UpperCamel )

            attribute
              attribute_head	- **parentSubject** - The parent subject, if any, under which this subject is nested _(Subject, optional)_  

            attribute
              attribute_head
                - **Classes** - The major classes related to this subject, in the order in which they should be presented _(ListOf Classes)_  

                  ***Issue***: define chapter, section, subsection as levels?  

              elaboration
                paragraph		***DSL***: Generally, it is best to present the classes within a Subject in top down order:

            attribute
              attribute_head	- Each Class should be followed first by the classes that are dependent on it, and then

            attribute
              attribute_head	- By its subtype classes.

            attribute
              attribute_head	- **childSubjects** - Any child subjects nested under this subject, in the order in which they should be presented _(ListOf Subjects)_  

              elaboration
                paragraph
                  	inverse of: Subject.parentSubject. 

                      ***DSL***:  the Classes within a Subject are always displayed before the childSubjects.  

          class
            class_head	__ ***Markdown Support***

            attribute
              attribute_head	- **mdPrefix** (*[String](#string)*)

              elaboration
                paragraph		🆎 ***Derivation***: levelIndicator + " "

            attribute
              attribute_head	- **mdTopLine** (*[String](#string)*)

              elaboration
                paragraph		🆎 ***Derivation***: mdPrefix + name. 

          class
            class_head	_ **SubjectArea**  

            elaboration
              paragraph	A main topic or area of focus within the model, containing related subjects and classes  

            field
              Plural: SubjectAreas  

              Subtype of: Subject  

                _Where:_ parentSubject is absent

          section
            section_head	### Classes

            elaboration
              blank_line	

              blank_line	

            class
              class_head	_ **Class** - A key entity or object type in the model, often corresponding to a real-world concept 

              elaboration
                blank_line	

              field
                Plural: Classes  

                Subtype of: Component  

                ***Constraint***: Within each Class, attribute names must be unique.  

              attribute
                attribute_head	- **pluralForm** - the normal English plural form of the name of the Class (UpperName)  

                elaboration
                  paragraph
                        Might be Books for the Book class or other regular plurals. 

                        But also might be People for Person. 

                       

                field
                  Note: When inputting a model, you will rarely need to specify the plural form. The input program will just look it up. 

                      The exception is when a common noun has two plural forms, like People and Persons. But this is unusual.  

                  	***Default***: the regular plural, formed by adding "s" or "es".  

              attribute
                attribute_head	- **basedOn** - the Class or Classes on which this class is dependent (SetOf Classes).  

                elaboration
                  paragraph
                      	This is solely based on **Existence Dependency**. A true dependent entity cannot logically exist without the related parent entity. For instance, an Order Item cannot exist without an Order. If removing the parent entity logically implies removing the dependent entity, then it is a dependent entity.  

                      	Note: basedOn and dependentOf are being used synonymousle in this metamodel.  

                      	issue: fix that

                  blank_line	

                  blank_line	

              attribute
                attribute_head	- **supertypes** - The parent class(es) from which this class inherits attributes _(ListOf Classes)_

              attribute
                attribute_head	- **subtypings** - the criteria, or dimensions, by which the class can be divided into subtypes (list of Subtypings).

                elaboration
                  paragraph		

                field	Example: in a library model, the `Book` class could have subtypings based on genre (e.g., Fiction, Non-fiction), format (e.g., Hardcover, Paperback), or subject (e.g., Science, History).   

              attribute
                attribute_head
                  - **subtypes** - Any subtypes or specializations of this class based on it’s subtypings. _(ListOf Classes)_  

                      Example: For instance, using the `Book` example, the subtypes could include `FictionBook`, `Non-fictionBook`, `HardcoverBook`, `PaperbackBook`, `ScienceBook`, and `HistoryBook`.

                elaboration
                  blank_line	

                  blank_line	

                  blank_line	

              attribute
                attribute_head	- **attributes** - The attributes or properties of the class, in the order in which they should be presented _(ListOf Attributes)_  

              attribute
                attribute_head	- **attributeSections** - additional attributes or properties of the class, grouped for clarity and elaboration.  _(ListOf AttributeSections)_  

              attribute
                attribute_head
                  - **constraints** - Any constraints, rules, or validations specific to this class _(ListOf Constraints)_  

                      Note: Constraints may be expressed on either the Class or the Attribute. Always?

                elaboration
                  paragraph	    Add examples where clarity would favor one or the other.   Sometimes just a matter of taste. 

              attribute
                attribute_head	- **methods** - Any behaviors or operations associated with this class _(ListOf Methods)_  

            class
              class_head	__  ***Implied Attributes*** 

              attribute
                attribute_head	- **dependents** - the Classes which are basedOn this Class (optional SetOf Classes).  

                elaboration
                  paragraph	     ***Inverse of***: Class.basedOn

              attribute
                attribute_head	- UniqueKeys - (optional Set of UniqueKeys).  

                elaboration
                  paragraph
                            ***Inverse of***:

                            UniqueKey.basedOn

            class
              class_head	_ **Subtyping** - a way in which subtypes of a Class may be classified (Subtype of Component).  

              elaboration
                paragraph	    ***Dependent of:*** Class

              attribute
                attribute_head	- **name** (Upper Name). 

                elaboration
                  paragraph	    Usually ByThis or ByThat

              attribute
                attribute_head	- **is exclusive** (Boolean).  

                elaboration
                  paragraph	    Default: true

              attribute
                attribute_head	- **is exhaustive** (Boolean).  

                elaboration
                  paragraph	    Default: true

              attribute
                attribute_head	- **classes** (List of Classes).  

                elaboration
                  paragraph
                    	***DSL***:  Shown in the DSL as  

                    	> Subbtypes: byBrand - Brand1, Brand2,... (non exclusive, exhaustive)

                    	on the super class. And as

                    	> Subtype of: SuperClass byBrand

                    	on the subclass.  

                    	

                field
                  Note: every class can have an unnamed subtyping.

                  	Also,  each subtyping is by default Exclusive and  Exhaustive. So those stipulations may be omitted.

            class
              class_head	_ **ValueType** - 

              elaboration
                paragraph	Subtype of: Class. 

            class
              class_head	__ ***Markdown Support***

              attribute
                attribute_head	- ***mdPrefix*** (*[String](#string)*)

                elaboration
                  paragraph		🆎 ***Derivation***: "ValueType: ". 

            class
              class_head	_ **Reference Type**:

              elaboration
                paragraph	Subtype of: Class. 

            class
              class_head
                _ **CodeType**  

                A data type or enumeration used in the model  

              elaboration
                paragraph	Subtype of: ValueType.  

              field
                Note: Often, a CodeType will be assigned to just one attribute in the model.  In such cases, there's no need to declare a new Code Type and invent a name for it.  Instead:

                   - List the code values as a bulletted list inside the description of the attribute in the form: 

                	   ‘**code**: description’

                   - A Code Type will be created with the name [class][attribute]Code and the code values listed. That CodeType will be marked as isCaptive. 

              attribute
                attribute_head	- isCaptive - the code type was implied by use in an attribute and is only used for that attribute (Boolean) as

            class
              class_head	_ **Code Value**

              elaboration
                paragraph	A possible value for an enumerated data class  DependentOf: CodeType

              attribute
                attribute_head	- **code** - A short code or abbreviationi for the value _(NameString)_

              attribute
                attribute_head	- **description** - an explanation of what the code means (*RichText*)

            class
              class_head	_ **Key** - a list of attributes of a class

              elaboration
                paragraph	Subtype of: Component 

              field	DependentOf: Class

              attribute
                attribute_head	- keyAttributes - the attributes of the base Class. (List of Attributes ).  

                elaboration
                  paragraph
                    Constraint: each attribute must be a direct or inherited of the base class.  

                    Constraint: no repetitions allowed in keyAttributes   

                    > 👍 **Issue**: introduce PureLists?

                        

                        

                field	Issue: need ascending descending to support index keys or ordering keys. 

            class
              class_head
                _ **UniqueKey** - a list of attributes on which instances of the base class may be keyed.  

                Subtype of: Key 

              elaboration
                blank_line	

              field	Note: order unimportant for Unique Keys. 

            section
              section_head	## Attributes

              elaboration
                blank_line	

              class
                class_head
                  _ **Attribute Section** - a group of attributes for a class that merit a shared explanation.  

                  ***SubtypeOf***: Component.  

                elaboration
                  paragraph	***Based on***: Class

                attribute
                  attribute_head	-	isOptional - whether the attributes in this section, taken together, are optional. (Boolean)

                  elaboration
                    paragraph
                      	 If the Attribute Section is required,then each Attribute within the sectional is optional ot required, depending on how it is marked.  

                      	&nbsp;

                      	But if the Arrribute Section is optional each attribute in the section is only required if any attribute in the section is ptresent.

              class
                class_head	__ ***Markdown Support***

                attribute
                  attribute_head	- **mdPrefix** (*[String](#string)*)

                  elaboration
                    paragraph		🔄 ***Default***: "_ "

                attribute
                  attribute_head	- **mdTopLine** (*[String](#string)*).  

              class
                class_head	_ **Attribute**  

                elaboration
                  paragraph	A property or characteristic of a class  

                field
                  Plural: Attributes  

                  Subtype of: Component  

                  *Based on*: AttributeSection

                attribute
                  attribute_head	- **name** - (Lower Camel).   

                  elaboration
                    paragraph	    Overrides: CamelName

                attribute
                  attribute_head
                    - **dataType** - The kind of object to which the attribute refers.  _(DataType)_  

                      H

                         In the simplest cases, the data type will be a class. And the specifier is the just the name of that class.   

                         But,

                         - List of Editions

                  elaboration
                    paragraph
                           - Set of Edition

                           - ... and more complicated cases.  

                          ***See***: the section below on Data Type Specifiers.  

              class
                class_head	__ **Cardinalities**.   

                attribute
                  attribute_head
                    - **isOptional** - Indicates whether the attribute must have a value for every instance of the class _(Boolean)_

                      

                  elaboration
                    paragraph	  	***Default:*** False

                attribute
                  attribute_head	- **cardinality** - The cardinality of the relationship represented by the attribute _(CardinalityCode)_

                  elaboration
                    paragraph
                        	***Default:***  For a singular attribute, the default cardinality is N:1. If the attribute is 1:1, it must be stated explicitly.

                        For a collective attribute, the default is 1:N. If the attribute is N:M, it must be stated explicitly.

                      	***DSL***: the cardinality of an attribute, if stated explicitly, should be placed just before the class name in the parenthetical data type specification after the one-liner.

                      	For example:

                attribute
                  attribute_head
                    - author (1:1 Author)

                    	- books (optional N:M Set of Books)

                  elaboration
                    paragraph		***Note***: how this works with optionality

              class
                class_head	__  ***Inverse Attributes***

                attribute
                  attribute_head	- **isInvertible** - (Boolean)

                  elaboration
                    paragraph		***Derivation***: true if the data type is a class or a simple collection of members of a class.

                attribute
                  attribute_head	- **inverseClass** - the class which contains, or would contain the inverse attribute (optional Class)

                  elaboration
                    paragraph		***Derivation***: from the data type. Null unless arrribute is invertible.

                attribute
                  attribute_head	- **inverseAttribute** - (optional Attribute)

                attribute
                  attribute_head	- **inverseIsOptional** - (optional Attribute)

              class
                class_head	_ ***Formulas*** 

                elaboration
                  blank_line	

                attribute
                  attribute_head
                    - **default** - The rule or formula for calculating the value, if no value is supplied 

                        Now running to a second line with the parenthentical on yet a third line 

                  elaboration
                    paragraph	    (Derivation, optional)

                  field
                    Note: even when an Attribute has a default derivation, there’s no guarantee that every instance will have an assigned value. Example needed. 

                        And let's see if the note can span extra lines, too

                        Yes, it handled extra lines.  Let's see about additional paras for an annotation

                        Last paragraph here

                attribute
                  attribute_head	- **derivation** - For derived attributes, the rule or formula for calculating the value _(Derivation, optional)_  

                  elaboration
                    paragraph	    ***Issue***: on insert vs on access?

                attribute
                  attribute_head	- **constraints** - Any validation rules specific to this attribute _(ListOf Constraints)_         

                  elaboration
                    paragraph	    Note: from Class.constraints 

              class
                class_head	__ Override Tracking

                attribute
                  attribute_head	- Overrides

              class
                class_head	_ ***ValueType:*** **Derivation**  

                elaboration
                  paragraph	A rule or formula for deriving the value of an attribute  

                field	Plural: Derivations  

                attribute
                  attribute_head	- **statement** - An English language statement of the derivation rule _(RichText)_  

                attribute
                  attribute_head	- **expression** - The formal expression of the derivation in a programming language _(CodeExpression)_  

              class
                class_head	_ ***ValueType:*** **Constraint**  

                elaboration
                  paragraph	A rule, condition, or validation that must be satisfied by the model  

                field
                  Plural: Constraints  

                  Subtype of: Component  

                attribute
                  attribute_head	- **statement** - An English language statement of the constraint _(RichText)_  

                attribute
                  attribute_head	- **expression** - The formal expression of the constraint in a programming language (e.g., OCL _(CodeExpression)_  

                attribute
                  attribute_head	- **severity** -  (Code)

                attribute
                  attribute_head	- - **Warning** - nothing fatal; just a caution

                attribute
                  attribute_head	- - **Error** - serious. Fix now

                attribute
                  attribute_head	- **Message** - (Template)

              class
                class_head
                  _ **Class Constraint**  

                  **Subtype of**: Constraint  

                elaboration
                  paragraph	***Based on***: Class. 

              class
                class_head
                  _ **Attribute Constraint** 

                  ***Subtype of***: Constraint 

                elaboration
                  paragraph	***Based on***: Attribute

              class
                class_head	_ **CodeExpression**

                attribute
                  attribute_head	- **Language** - the programming language (Code)

                attribute
                  attribute_head	- - OCL: Object Constraint Language

                attribute
                  attribute_head	- - Java: Java 

                attribute
                  attribute_head	- **Expression** (String)

              section
                section_head	## Methods 

                class
                  class_head	_ **Method**  

                  elaboration
                    paragraph	A behavior or operation associated with a class  

                  field
                    Plural: Methods  

                    Subtype of: Component  

                  attribute
                    attribute_head	- **parameters** - The input parameters of the method _(ListOf Parameters)_  

                  attribute
                    attribute_head	- **returnType** - The data type of the value returned by the method _(DataType )_  

                class
                  class_head	_ **Parameter**  

                  elaboration
                    paragraph	An input to a method  

                  field
                    Plural: Parameters  

                    Subtype of: Component  

                  attribute
                    attribute_head	- **type** - The data type of the parameter _(DataType )_  

                  attribute
                    attribute_head	- **cardinality** - The cardinality of the parameter (e.g., optional, required) _(AttributeCardinality)_  

                section
                  section_head	## Data Types

                  elaboration
                    paragraph	*ValueType*:**Data Type**

                  class
                    class_head	_ **Simple Data Type** 

                    elaboration
                      paragraph	***SubtpeOf***: DataType

                    attribute
                      attribute_head	- **coreClass** - (Class)

                  class
                    class_head	_ **Complex Data Type**  

                    attribute
                      attribute_head	- **aggregation** (Aggregating Operator)

                    attribute
                      attribute_head	- **aggregatedTypes** (List of DataTypes)

                  class
                    class_head	_ **Aggregating Operator**

                    elaboration
                      blank_line	

                    attribute
                      attribute_head	- **Name**- (Code)

                    attribute
                      attribute_head	- - **SetOf**

                    attribute
                      attribute_head	- - **ListOf**

                    attribute
                      attribute_head	- - **Mapping**

                    attribute
                      attribute_head	- **arity** - (Integer)

                    attribute
                      attribute_head	- **spelling** - (Template)

                  section
                    section_head	## Low level Data Types

                    elaboration
                      paragraph	insert Camel Case.md

                    class
                      class_head	_ ***ValueType***: **CamelName**  

                      elaboration
                        paragraph
                          A short string without punctuation or spaces, suitable for names, labels, or identifiers and presented in camel case.  

                          ***Subtype of***: String

                      attribute
                        attribute_head	- value: the string (String)

                        elaboration
                          paragraph	🚫 ***Constraint***: Must follow the camel case naming convention and not be empty.

                        field
                          Example:  "firstName", "orderDate", "customerID"  

                          > 📝 ***ModelingNote***: Putting the non-empty constraint on the CamelName value type is effective because it automatically applies to all attributes that use CamelName as their type. This ensures consistency and avoids the need to define the constraint separately for each attribute.

                          *ModelingNote:* *CamelName* is presented here, just after its first usage by another class (Component), to provide context and understanding before it is used further in the model.

                    class
                      class_head
                        _ **UpperCamel**- a CamelName that begins with a capital letter  

                        **Subtype of**: CamelName

                      elaboration
                        paragraph	**Where**: content begins with an upper case letter. 

                      field	Example:_ "Customer", "ProductCategory", "PaymentMethod"  

                    class
                      class_head
                        _ **LowerCamel** - a CamelName that begins with a lower case letter  

                        **Subtype of**: CamelName

                        **Where**: content begins with a lower case letter. 

                      elaboration
                        blank_line	

                      field	Example:  "firstName", "orderTotal", "shippingAddress"  

                    class
                      class_head
                        _ **Qualified Camel** - an expression consisting of Camel Names separated by periods 

                        ***Subtype of***: String

                      elaboration
                        paragraph	***Constraint***: content consists of CamelNames, separated by periods.  Each of the camel names must be Upper Camel except, possibly, the first. 

                    class
                      class_head
                        _ **RichText**.  A string with markup for block level formatting.  

                          ***SubtypeOf***: String  

                      elaboration
                        paragraph
                            - **value** - the string content (string)  

                            - **format** - the rich text coding language used (Code)  

                            	- **HTML**  

                      attribute
                        attribute_head	- **MarkDown**  

                    class
                      class_head	_  **RichLine**   - String with markup for line level formatting.  

                      elaboration
                        paragraph	  ***SubtypeOf***: RichText 

                      attribute
                        attribute_head	- **value** - the string content (string)  

                        elaboration
                          paragraph	      ***Constraint***: must not containa line break or new line character

                    class
                      class_head
                        _ **PrimitiveType**  

                        Subtype of: ValueType

                      elaboration
                        paragraph	A basic, built-in data type  

                      field
                        Values: 

                          **String**  

                          **Integer**  

                          **Decimal**  

                          **Boolean**  

                          **Date**  

                          **Time**  

                          **DateTime**  

                        ===

                    section
                      section_head	## Appendices

                      elaboration
                        paragraph
                          Insert More Sidebars.md

                          Insert Overrides.md

                          insert LDM Intro.md

                          Insert OCL.md

                          Insert Camel Case.md

                      section
                        section_head
                          ### Annotation Types Used

                          These are the recognized Annotation Types for the LDM model.

                        elaboration
                          paragraph	And this is how you register the AnnotationTyped for a model. By including this sort of array in the DSL document for the model. 

                          blank_line	

                          code_block	```
interface AnnotationType {
  label: string;
  emoji: string;
  emojiName: string;
  emojiUnicode: string;
  purpose: string;
}
// LINK: LiterateDataModel.annotationTypes
const annotationTypes: AnnotationType[] = [
  {
    label: "Error",
    emoji: "❌",
    emojiName: "cross_mark",
    emojiUnicode: "U+274C",
    purpose: "Indicates a critical error or failure in the model."
  },
  {
    label: "Warning",
    emoji: "⚠️",
    emojiName: "warning",
    emojiUnicode: "U+26A0",
    purpose: "Indicates a potential issue or warning in the model."
  },
  {
    label: "Note",
    emoji: "📘",
    emojiName: "blue_book",
    emojiUnicode: "U+1F4D8",
    purpose: "Provides additional context, explanations, or clarifications for the annotated element."
  },
  {
    label: "Issue",
    emoji: "⚠️",
    emojiName: "warning",
    emojiUnicode: "U+26A0",
    purpose: "Highlights a potential issue or error that needs to be addressed or resolved."
  },
  {
    label: "Question",
    emoji: "❓",
    emojiName: "question",
    emojiUnicode: "U+2753",
    purpose: "Raises a question or seeks further clarification about the annotated element."
  },
  {
    label: "Suggestion",
    emoji: "💡",
    emojiName: "bulb",
    emojiUnicode: "U+1F4A1",
    purpose: "Provides a suggestion or recommendation for improving the model or the annotated element."
  },
  {
    label: "Info",
    emoji: "ℹ️",
    emojiName: "information_source",
    emojiUnicode: "U+2139",
    purpose: "Offers relevant information, facts, or details about the annotated element."
  },
  {
    label: "Todo",
    emoji: "📌",
    emojiName: "pushpin",
    emojiUnicode: "U+1F4CC",
    purpose: "Indicates a pending task, action item, or future work related to the annotated element."
  },
  {
    label: "Reference",
    emoji: "🌐",
    emojiName: "globe_with_meridians",
    emojiUnicode: "U+1F310",
    purpose: "Provides a reference or link to an external resource or documentation."
  },
  {
    label: "See",
    emoji: "🔍",
    emojiName: "mag",
    emojiUnicode: "U+1F50D",
    purpose: "Indicates a cross-reference to another relevant element within the model."
  }
];
```

