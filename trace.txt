[do_pom_test.py:6 -             test_pom()] Starting to test POM
[pom_grammar.py:39 -             __init__()] Initializing PresentableGrammar with model_name=Lit_01, format_name=dull
[pom_grammar.py:50 -             __init__()] Found model directory: C:\Users\fmkat\OneDrive\AllFMKFIles\AllVSCode\FMKProjects\Presentable\models\Lit_01
[pom_grammar.py:53 -             __init__()] Loaded model module: Lit_01.Lit_01
[do_pom_test.py:12 -             test_pom()] < __init__ of () {'model_name': 'Lit_01', 'format_name': 'dull', 'config_dict': {'case_sensitive': True, 'ambiguity': 'resolve', 'debug': False}}
[pom_grammar.py:56 -             __init__()] . Initializing PomConfig with model_name=Lit_01, format_name=dull
[util_flogging.py:203 -              wrapper()] . . Loading format files from paths: ['settings/dull_format.yaml', 'models/Lit_01/Lit_01_dull_format.yaml']
[util_flogging.py:203 -              wrapper()] . . Found format file: settings/dull_format.yaml
[util_flogging.py:203 -              wrapper()] . . Updated metadata: {'_defaults': {'is_abstract': False, 'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str', 'int': 'dull_int', 'float': 'dull_float', 'bool': {'true': 'true', 'false': 'false', 'is_explicit': True}, 'list': '{element} (COMMA {element})+', 'dict': 'dull dict', 'set': "'{'{element} (','' {element})+'}'", 'tuple': " '[' {element} (','' {element})+ ']'", 'field_clause': '{field_name}: {field_value}'}}
[util_flogging.py:203 -              wrapper()] . . Found format file: models/Lit_01/Lit_01_dull_format.yaml
[util_flogging.py:203 -              wrapper()] . . Updated metadata: {'_defaults': {'is_abstract': False, 'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str', 'int': 'dull_int', 'float': 'dull_float', 'bool': {'true': 'true', 'false': 'false', 'is_explicit': True}, 'list': '{element} (COMMA {element})+', 'dict': 'dull dict', 'set': "'{'{element} (','' {element})+'}'", 'tuple': " '[' {element} (','' {element})+ ']'", 'field_clause': '{field_name} ":"  {field_value}'}, 'Component': {'header': '_ {_type}: {name}{? - {one_liner}} "\\n"'}, 'Class': {'header': '_ Class: {name}{? - {one_liner}} "\\n"'}, 'Attribute': {'header': '-  {name}{? - {one_liner}}{? ({data_type_clause})} "\\n"'}, 'BaseDataType': {'template': '{class_name} {? - {is_value}}'}, 'ListDataType': {'template': 'list of {element_type}'}, 'SetDataType': {'template': 'Set of {element_type}'}, 'MappingDataType': {'template': 'Mapping from {domain_type} to {range_type}'}, 'DataTypeClause': {'template': '{is_optional} {data_type}{? {cardinality}}'}}
Saved metadata to models/Lit_01/Lit_01_dull_y_external.yaml
## PomDict - External: 
# From YAML files:
##	Using built-in format: dull
## 	Using: settings/dull_format.yaml
## 	Using: models/Lit_01/Lit_01_dull_format.yaml
_defaults:
  is_abstract: false
  field_value: '{field_name} COLON {field_value} NEWLINE'
  str: dull_str
  int: dull_int
  float: dull_float
  bool:
    'true': 'true'
    'false': 'false'
    is_explicit: true
  list: '{element} (COMMA {element})+'
  dict: dull dict
  set: '''{''{element} ('','''' {element})+''}'''
  tuple: ' ''['' {element} ('','''' {element})+ '']'''
  field_clause: '{field_name} ":"  {field_value}'
Component:
  header: '_ {_type}: {name}{? - {one_liner}} "\n"'
Class:
  header: '_ Class: {name}{? - {one_liner}} "\n"'
Attribute:
  header: '-  {name}{? - {one_liner}}{? ({data_type_clause})} "\n"'
BaseDataType:
  template: '{class_name} {? - {is_value}}'
ListDataType:
  template: list of {element_type}
SetDataType:
  template: Set of {element_type}
MappingDataType:
  template: Mapping from {domain_type} to {range_type}
DataTypeClause:
  template: '{is_optional} {data_type}{? {cardinality}}'

[util_flogging.py:203 -              wrapper()] . Loading default configuration
[util_flogging.py:203 -              wrapper()] . . Looking for default config in settings/config.yaml
[util_flogging.py:203 -              wrapper()] . . . Updating config from file: settings/config.yaml
[do_pom_test.py:12 -             test_pom()] > None - from __init__
Config is  {
  "lark": {
    "case_sensitive": false,
    "ambiguity": "resolve",
    "debug": false
  },
  "case_sensitive": true,
  "ambiguity": "resolve",
  "debug": false
}
[pom_grammar_generator.py:112 -     generate_grammar()] Generating grammar for model module Lit_01.Lit_01
[pom_grammar.py:170 -  _initialize_grammar()] . . < _find_model_classes of (<module 'Lit_01.Lit_01' from 'C:\\Users\\fmkat\\OneDrive\\AllFMKFIles\\AllVSCode\\FMKProjects\\Presentable\\models\\Lit_01\\Lit_01.py'>,) {}
[pom_grammar_generator.py:121 -     generate_grammar()] . . . Found model_imports = [<class 'class_casing.UpperCamel'>, <class 'class_casing.LowerCamel'>, <class 'class_casing.CamelCase'>, <class 'class_pom_token.IsOptional'>, <class 'class_pom_token.IsReallyRequired'>, <class 'class_pom_token.ReferenceOrValue'>]
[pom_grammar_generator.py:121 -     generate_grammar()] . . . Import class names: ['UpperCamel', 'LowerCamel', 'CamelCase', 'IsOptional', 'IsReallyRequired', 'ReferenceOrValue']
[pom_grammar.py:170 -  _initialize_grammar()] . . > {'UpperCamel': <class 'class_casing.UpperCamel'>, 'LowerCamel': <class 'class_casing.LowerCamel'>, 'CamelCase': <class 'class_casing.CamelCase'>, 'IsOptional': <class 'class_pom_token.IsOptional'>, 'ReferenceOrValue': <class 'class_pom_token.ReferenceOrValue'>, 'IsReallyRequired': <class 'class_pom_token.IsReallyRequired'>, 'Paragraph': <class 'Lit_01.Lit_01.Paragraph'>, 'OneLiner': <class 'Lit_01.Lit_01.OneLiner'>, 'ClassName': <class 'Lit_01.Lit_01.ClassName'>, 'Label': <class 'Lit_01.Lit_01.Label'>, 'Annotation': <class 'Lit_01.Lit_01.Annotation'>, 'Component': <class 'Lit_01.Lit_01.Component'>, 'SubjectE': <class 'Lit_01.Lit_01.SubjectE'>, 'SubjectD': <class 'Lit_01.Lit_01.SubjectD'>, 'SubjectC': <class 'Lit_01.Lit_01.SubjectC'>, 'SubjectB': <class 'Lit_01.Lit_01.SubjectB'>, 'LDM': <class 'Lit_01.Lit_01.LDM'>, 'DataType': <class 'Lit_01.Lit_01.DataType'>, 'BaseDataType': <class 'Lit_01.Lit_01.BaseDataType'>, 'ListDataType': <class 'Lit_01.Lit_01.ListDataType'>, 'SetDataType': <class 'Lit_01.Lit_01.SetDataType'>, 'MappingDataType': <class 'Lit_01.Lit_01.MappingDataType'>, 'DataTypeClause': <class 'Lit_01.Lit_01.DataTypeClause'>, 'FormulaCoding': <class 'Lit_01.Lit_01.FormulaCoding'>, 'Formula': <class 'Lit_01.Lit_01.Formula'>, 'Constraint': <class 'Lit_01.Lit_01.Constraint'>, 'Derivation': <class 'Lit_01.Lit_01.Derivation'>, 'Default': <class 'Lit_01.Lit_01.Default'>, 'Class': <class 'Lit_01.Lit_01.Class'>, 'ValueType': <class 'Lit_01.Lit_01.ValueType'>, 'ReferenceType': <class 'Lit_01.Lit_01.ReferenceType'>, 'AttributeSection': <class 'Lit_01.Lit_01.AttributeSection'>, 'Attribute': <class 'Lit_01.Lit_01.Attribute'>} - from _find_model_classes
Saved metadata to models/Lit_01/Lit_01_dull_y_live.yaml
Saved metadata to models/Lit_01/Lit_01_dull_y_resolved.yaml
## PomDict - Resolved: 
## Resolved metadata from Live and External
# extracted from the Lit_01 model
# From YAML files:
##	Using built-in format: dull
## 	Using: settings/dull_format.yaml
## 	Using: models/Lit_01/Lit_01_dull_format.yaml
_defaults:
  field_value: '{field_name} COLON {field_value} NEWLINE'
  is_abstract: false
  str: dull_str
  int: dull_int
  float: dull_float
  bool:
    'true': 'true'
    'false': 'false'
    is_explicit: true
  list: '{element} (COMMA {element})+'
  dict: dull dict
  set: '''{''{element} ('','''' {element})+''}'''
  tuple: ' ''['' {element} ('','''' {element})+ '']'''
  field_clause: '{field_name} ":"  {field_value}'
Paragraph:
  template: '{content}'
OneLiner:
  template: '{content}'
Annotation:
  template: '{?{emoji}}  {label}: {content} ''

    '''
Component:
  is_abstract: true
  header: '_ {_type}: {name}{? - {one_liner}} "\n"'
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
SubjectE:
  header: '#####  {{name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    classes:
      list: '{element}+'
      field_value: '{field_value}'
SubjectD:
  header: '####  {{name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    classes:
      list: '{element}+'
      field_value: '{field_value}'
    subjects:
      list: '{element}+'
      field_value: '{field_value}'
SubjectC:
  header: '###  {{name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    classes:
      list: '{element}+'
      field_value: '{field_value}'
    subjects:
      list: '{element}+'
      field_value: '{field_value}'
SubjectB:
  header: '##  {{name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    classes:
      list: '{element}+'
      field_value: '{field_value}'
    subjects:
      list: '{element}+'
      field_value: '{field_value}'
LDM:
  header: '#  {{name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    classes:
      list: '{element}+'
      field_value: '{field_value}'
    subjects:
      list: '{element}+'
      field_value: '{field_value}'
DataType:
  is_abstract: true
BaseDataType:
  template: '{class_name} {? - {is_value}}'
ListDataType:
  template: list of {element_type}
SetDataType:
  template: Set of {element_type}
MappingDataType:
  template: Mapping from {domain_type} to {range_type}
DataTypeClause:
  template: '{is_optional} {data_type}{? {cardinality}}'
  _fields:
    is_optional:
      bool:
        'true': optional
        'false': required
        is_explicit: false
Class:
  header: '_ Class: {name}{? - {one_liner}} "\n"'
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    attributes:
      list: '{element}+'
      field_value: '{field_value}'
    attribute_sections:
      list: '{element}+'
      field_value: '{field_value}'
ValueType:
  header: '_ {name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    attributes:
      list: '{element}+'
      field_value: '{field_value}'
    attribute_sections:
      list: '{element}+'
      field_value: '{field_value}'
ReferenceType:
  header: '_ {name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    attributes:
      list: '{element}+'
      field_value: '{field_value}'
    attribute_sections:
      list: '{element}+'
      field_value: '{field_value}'
AttributeSection:
  header: '-  {name}{? - {one_liner}}{? ({is_required})} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    attributes:
      list: '{element}+'
      field_value: '{field_value}'
Attribute:
  header: '-  {name}{? - {one_liner}}{? ({data_type_clause})} "\n"'
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    constraints:
      list: '{element}+'
      field_value: '{field_value}'

[pom_grammar.py:170 -  _initialize_grammar()] . . < _derive_class_hierarchy of ({'UpperCamel': <class 'class_casing.UpperCamel'>, 'LowerCamel': <class 'class_casing.LowerCamel'>, 'CamelCase': <class 'class_casing.CamelCase'>, 'IsOptional': <class 'class_pom_token.IsOptional'>, 'ReferenceOrValue': <class 'class_pom_token.ReferenceOrValue'>, 'IsReallyRequired': <class 'class_pom_token.IsReallyRequired'>, 'Paragraph': <class 'Lit_01.Lit_01.Paragraph'>, 'OneLiner': <class 'Lit_01.Lit_01.OneLiner'>, 'ClassName': <class 'Lit_01.Lit_01.ClassName'>, 'Label': <class 'Lit_01.Lit_01.Label'>, 'Annotation': <class 'Lit_01.Lit_01.Annotation'>, 'Component': <class 'Lit_01.Lit_01.Component'>, 'SubjectE': <class 'Lit_01.Lit_01.SubjectE'>, 'SubjectD': <class 'Lit_01.Lit_01.SubjectD'>, 'SubjectC': <class 'Lit_01.Lit_01.SubjectC'>, 'SubjectB': <class 'Lit_01.Lit_01.SubjectB'>, 'LDM': <class 'Lit_01.Lit_01.LDM'>, 'DataType': <class 'Lit_01.Lit_01.DataType'>, 'BaseDataType': <class 'Lit_01.Lit_01.BaseDataType'>, 'ListDataType': <class 'Lit_01.Lit_01.ListDataType'>, 'SetDataType': <class 'Lit_01.Lit_01.SetDataType'>, 'MappingDataType': <class 'Lit_01.Lit_01.MappingDataType'>, 'DataTypeClause': <class 'Lit_01.Lit_01.DataTypeClause'>, 'FormulaCoding': <class 'Lit_01.Lit_01.FormulaCoding'>, 'Formula': <class 'Lit_01.Lit_01.Formula'>, 'Constraint': <class 'Lit_01.Lit_01.Constraint'>, 'Derivation': <class 'Lit_01.Lit_01.Derivation'>, 'Default': <class 'Lit_01.Lit_01.Default'>, 'Class': <class 'Lit_01.Lit_01.Class'>, 'ValueType': <class 'Lit_01.Lit_01.ValueType'>, 'ReferenceType': <class 'Lit_01.Lit_01.ReferenceType'>, 'AttributeSection': <class 'Lit_01.Lit_01.AttributeSection'>, 'Attribute': <class 'Lit_01.Lit_01.Attribute'>},) {}
[pom_grammar.py:170 -  _initialize_grammar()] . . > {'UpperCamel': {'class': <class 'class_casing.UpperCamel'>, 'bases': ['CamelCase'], 'subtypes': [], 'attributes': {}}, 'LowerCamel': {'class': <class 'class_casing.LowerCamel'>, 'bases': ['CamelCase'], 'subtypes': [], 'attributes': {}}, 'CamelCase': {'class': <class 'class_casing.CamelCase'>, 'bases': [], 'subtypes': ['UpperCamel', 'LowerCamel', 'ClassName', 'Label'], 'attributes': {}}, 'IsOptional': {'class': <class 'class_pom_token.IsOptional'>, 'bases': [], 'subtypes': [], 'attributes': {}}, 'ReferenceOrValue': {'class': <class 'class_pom_token.ReferenceOrValue'>, 'bases': [], 'subtypes': [], 'attributes': {}}, 'IsReallyRequired': {'class': <class 'class_pom_token.IsReallyRequired'>, 'bases': [], 'subtypes': [], 'attributes': {}}, 'Paragraph': {'class': <class 'Lit_01.Lit_01.Paragraph'>, 'bases': [], 'subtypes': ['OneLiner'], 'attributes': {}}, 'OneLiner': {'class': <class 'Lit_01.Lit_01.OneLiner'>, 'bases': ['Paragraph'], 'subtypes': [], 'attributes': {}}, 'ClassName': {'class': <class 'Lit_01.Lit_01.ClassName'>, 'bases': ['CamelCase'], 'subtypes': [], 'attributes': {}}, 'Label': {'class': <class 'Lit_01.Lit_01.Label'>, 'bases': ['CamelCase'], 'subtypes': [], 'attributes': {}}, 'Annotation': {'class': <class 'Lit_01.Lit_01.Annotation'>, 'bases': [], 'subtypes': [], 'attributes': {}}, 'Component': {'class': <class 'Lit_01.Lit_01.Component'>, 'bases': [], 'subtypes': ['SubjectE', 'Class', 'AttributeSection', 'Attribute'], 'attributes': {}}, 'SubjectE': {'class': <class 'Lit_01.Lit_01.SubjectE'>, 'bases': ['Component'], 'subtypes': ['SubjectD'], 'attributes': {}}, 'SubjectD': {'class': <class 'Lit_01.Lit_01.SubjectD'>, 'bases': ['SubjectE'], 'subtypes': ['SubjectC'], 'attributes': {}}, 'SubjectC': {'class': <class 'Lit_01.Lit_01.SubjectC'>, 'bases': ['SubjectD'], 'subtypes': ['SubjectB'], 'attributes': {}}, 'SubjectB': {'class': <class 'Lit_01.Lit_01.SubjectB'>, 'bases': ['SubjectC'], 'subtypes': ['LDM'], 'attributes': {}}, 'LDM': {'class': <class 'Lit_01.Lit_01.LDM'>, 'bases': ['SubjectB'], 'subtypes': [], 'attributes': {}}, 'DataType': {'class': <class 'Lit_01.Lit_01.DataType'>, 'bases': [], 'subtypes': ['BaseDataType', 'ListDataType', 'SetDataType', 'MappingDataType'], 'attributes': {}}, 'BaseDataType': {'class': <class 'Lit_01.Lit_01.BaseDataType'>, 'bases': ['DataType'], 'subtypes': [], 'attributes': {}}, 'ListDataType': {'class': <class 'Lit_01.Lit_01.ListDataType'>, 'bases': ['DataType'], 'subtypes': [], 'attributes': {}}, 'SetDataType': {'class': <class 'Lit_01.Lit_01.SetDataType'>, 'bases': ['DataType'], 'subtypes': [], 'attributes': {}}, 'MappingDataType': {'class': <class 'Lit_01.Lit_01.MappingDataType'>, 'bases': ['DataType'], 'subtypes': [], 'attributes': {}}, 'DataTypeClause': {'class': <class 'Lit_01.Lit_01.DataTypeClause'>, 'bases': [], 'subtypes': [], 'attributes': {}}, 'FormulaCoding': {'class': <class 'Lit_01.Lit_01.FormulaCoding'>, 'bases': [], 'subtypes': [], 'attributes': {}}, 'Formula': {'class': <class 'Lit_01.Lit_01.Formula'>, 'bases': [], 'subtypes': ['Constraint', 'Derivation', 'Default'], 'attributes': {}}, 'Constraint': {'class': <class 'Lit_01.Lit_01.Constraint'>, 'bases': ['Formula'], 'subtypes': [], 'attributes': {}}, 'Derivation': {'class': <class 'Lit_01.Lit_01.Derivation'>, 'bases': ['Formula'], 'subtypes': [], 'attributes': {}}, 'Default': {'class': <class 'Lit_01.Lit_01.Default'>, 'bases': ['Formula'], 'subtypes': [], 'attributes': {}}, 'Class': {'class': <class 'Lit_01.Lit_01.Class'>, 'bases': ['Component'], 'subtypes': ['ValueType', 'ReferenceType'], 'attributes': {}}, 'ValueType': {'class': <class 'Lit_01.Lit_01.ValueType'>, 'bases': ['Class'], 'subtypes': [], 'attributes': {}}, 'ReferenceType': {'class': <class 'Lit_01.Lit_01.ReferenceType'>, 'bases': ['Class'], 'subtypes': [], 'attributes': {}}, 'AttributeSection': {'class': <class 'Lit_01.Lit_01.AttributeSection'>, 'bases': ['Component'], 'subtypes': [], 'attributes': {}}, 'Attribute': {'class': <class 'Lit_01.Lit_01.Attribute'>, 'bases': ['Component'], 'subtypes': [], 'attributes': {}}} - from _derive_class_hierarchy
Starting class rules
## PomDict - Resolved: 
## Resolved metadata from Live and External
# extracted from the Lit_01 model
# From YAML files:
##	Using built-in format: dull
## 	Using: settings/dull_format.yaml
## 	Using: models/Lit_01/Lit_01_dull_format.yaml
_defaults:
  field_value: '{field_name} COLON {field_value} NEWLINE'
  is_abstract: false
  str: dull_str
  int: dull_int
  float: dull_float
  bool:
    'true': 'true'
    'false': 'false'
    is_explicit: true
  list: '{element} (COMMA {element})+'
  dict: dull dict
  set: '''{''{element} ('','''' {element})+''}'''
  tuple: ' ''['' {element} ('','''' {element})+ '']'''
  field_clause: '{field_name} ":"  {field_value}'
Paragraph:
  template: '{content}'
OneLiner:
  template: '{content}'
Annotation:
  template: '{?{emoji}}  {label}: {content} ''

    '''
Component:
  is_abstract: true
  header: '_ {_type}: {name}{? - {one_liner}} "\n"'
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
SubjectE:
  header: '#####  {{name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    classes:
      list: '{element}+'
      field_value: '{field_value}'
SubjectD:
  header: '####  {{name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    classes:
      list: '{element}+'
      field_value: '{field_value}'
    subjects:
      list: '{element}+'
      field_value: '{field_value}'
SubjectC:
  header: '###  {{name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    classes:
      list: '{element}+'
      field_value: '{field_value}'
    subjects:
      list: '{element}+'
      field_value: '{field_value}'
SubjectB:
  header: '##  {{name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    classes:
      list: '{element}+'
      field_value: '{field_value}'
    subjects:
      list: '{element}+'
      field_value: '{field_value}'
LDM:
  header: '#  {{name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    classes:
      list: '{element}+'
      field_value: '{field_value}'
    subjects:
      list: '{element}+'
      field_value: '{field_value}'
DataType:
  is_abstract: true
BaseDataType:
  template: '{class_name} {? - {is_value}}'
ListDataType:
  template: list of {element_type}
SetDataType:
  template: Set of {element_type}
MappingDataType:
  template: Mapping from {domain_type} to {range_type}
DataTypeClause:
  template: '{is_optional} {data_type}{? {cardinality}}'
  _fields:
    is_optional:
      bool:
        'true': optional
        'false': required
        is_explicit: false
Class:
  header: '_ Class: {name}{? - {one_liner}} "\n"'
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    attributes:
      list: '{element}+'
      field_value: '{field_value}'
    attribute_sections:
      list: '{element}+'
      field_value: '{field_value}'
ValueType:
  header: '_ {name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    attributes:
      list: '{element}+'
      field_value: '{field_value}'
    attribute_sections:
      list: '{element}+'
      field_value: '{field_value}'
ReferenceType:
  header: '_ {name}{? - {one_liner}} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    attributes:
      list: '{element}+'
      field_value: '{field_value}'
    attribute_sections:
      list: '{element}+'
      field_value: '{field_value}'
AttributeSection:
  header: '-  {name}{? - {one_liner}}{? ({is_required})} ''

    '''
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    attributes:
      list: '{element}+'
      field_value: '{field_value}'
Attribute:
  header: '-  {name}{? - {one_liner}}{? ({data_type_clause})} "\n"'
  _fields:
    elaboration:
      list: '{element}+'
      field_value: '{field_value}'
    annotations:
      list: '{element}+'
      field_value: '{field_value}'
    constraints:
      list: '{element}+'
      field_value: '{field_value}'

[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('UpperCamel', <class 'class_casing.UpperCamel'>) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Token pattern: /[A-Za-z][A-Za-z0-9]*/
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('LowerCamel', <class 'class_casing.LowerCamel'>) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Token pattern: /[A-Za-z][A-Za-z0-9]*/
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('CamelCase', <class 'class_casing.CamelCase'>) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Token pattern: /[A-Za-z][A-Za-z0-9]*/
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('IsOptional', <class 'class_pom_token.IsOptional'>) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Token pattern: "optional"i | "true"i | "sure"i | "yes"i | "required"i | "false"i | "no way"i
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('ReferenceOrValue', <class 'class_pom_token.ReferenceOrValue'>) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Token pattern: "reference"i | "value"i
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('IsReallyRequired', <class 'class_pom_token.IsReallyRequired'>) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Token pattern: "required"i | "true"i | "sure"i | "yes"i | "optional"i | "false"i | "no way"i
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('Paragraph', <class 'Lit_01.Lit_01.Paragraph'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('Paragraph',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of Paragraph are ['OneLiner']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > one_liner - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class Paragraph is not abstract, generating own rule with clauses
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Full template is {content}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_full_class_by_template of ('Paragraph', PomTemplate({content})) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Preprocessed template: {content}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Final grammar parts: ['paragraph__content__value']
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . rule parts are: ['paragraph__content__value']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > paragraph__content__value - from _gen_full_class_by_template
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(0, 9, 'content')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'content'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('Paragraph', <class 'Lit_01.Lit_01.Paragraph'>, {'content'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Paragraph', 'content', Field(name='content',type='str',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EC8F0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Paragraph.content is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > CONTENT_QF COLON STRING NEWLINE	-> paragraph__content__str - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['CONTENT_QF COLON STRING NEWLINE\t-> paragraph__content__str'], [Rule(name='paragraph__content__value', text='STRING')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('OneLiner', <class 'Lit_01.Lit_01.OneLiner'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('OneLiner',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of OneLiner are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class OneLiner is not abstract, generating own rule with clauses
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Full template is {content}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_full_class_by_template of ('OneLiner', PomTemplate({content})) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Preprocessed template: {content}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Final grammar parts: ['one_liner__content__value']
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . rule parts are: ['one_liner__content__value']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > one_liner__content__value - from _gen_full_class_by_template
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(0, 9, 'content')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'content'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('OneLiner', <class 'Lit_01.Lit_01.OneLiner'>, {'content'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('OneLiner', 'content', Field(name='content',type='str',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EC950>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for OneLiner.content is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > CONTENT_QF COLON STRING NEWLINE	-> one_liner__content__str - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['CONTENT_QF COLON STRING NEWLINE\t-> one_liner__content__str'], [Rule(name='one_liner__content__value', text='STRING')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('ClassName', <class 'Lit_01.Lit_01.ClassName'>) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Token pattern: /[A-Za-z][A-Za-z0-9]*/
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('Label', <class 'Lit_01.Lit_01.Label'>) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Token pattern: /[A-Za-z][A-Za-z0-9]*/
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('Annotation', <class 'Lit_01.Lit_01.Annotation'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('Annotation',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of Annotation are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class Annotation is not abstract, generating own rule with clauses
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Full template is {?{emoji}}  {label}: {content} '
'
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_full_class_by_template of ('Annotation', PomTemplate({?{emoji}}  {label}: {content} '
')) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Preprocessed template: [{emoji}]  {label}: {content} '
'
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . Preprocessed template: {emoji}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . Final grammar parts: ['annotation__emoji__value']
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Adding NEWLINE to field terminals
[util_flogging.py:203 -              wrapper()] . . . . . . . . . NEWLINE found in template: [{emoji}]  {label}: {content} '
'
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Final grammar parts: ['[', 'annotation__emoji__value', ']', 'annotation__label__value', 'COLON', 'annotation__content__value', 'NEWLINE']
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . rule parts are: ['[', 'annotation__emoji__value', ']', 'annotation__label__value', 'COLON', 'annotation__content__value', 'NEWLINE']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > [ annotation__emoji__value ] annotation__label__value COLON annotation__content__value NEWLINE - from _gen_full_class_by_template
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(2, 9, 'emoji')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(2, 9, 'emoji'), (12, 19, 'label')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(2, 9, 'emoji'), (12, 19, 'label'), (21, 30, 'content')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'label', 'content', 'emoji'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('Annotation', <class 'Lit_01.Lit_01.Annotation'>, {'label', 'content', 'emoji'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Annotation', 'label', Field(name='label',type='Label',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECA70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Annotation.label is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > LABEL_QF COLON label NEWLINE	-> annotation__label__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Annotation', 'content', Field(name='content',type='OneLiner',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECA70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Annotation.content is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > CONTENT_QF COLON one_liner NEWLINE	-> annotation__content__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Annotation', 'emoji', Field(name='emoji',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECA70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Annotation.emoji is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > EMOJI_QF COLON STRING NEWLINE	-> annotation__emoji__str - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['LABEL_QF COLON label NEWLINE\t-> annotation__label__simple', 'CONTENT_QF COLON one_liner NEWLINE\t-> annotation__content__simple', 'EMOJI_QF COLON STRING NEWLINE\t-> annotation__emoji__str'], [Rule(name='annotation__label__value', text='label'), Rule(name='annotation__content__value', text='one_liner'), Rule(name='annotation__emoji__value', text='STRING')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('Component', <class 'Lit_01.Lit_01.Component'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('Component',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of Component are ['SubjectE', 'Class', 'AttributeSection', 'Attribute']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > subject_e | class | attribute_section | attribute - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class Component is abstract, skipping rule generation
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('SubjectE', <class 'Lit_01.Lit_01.SubjectE'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('SubjectE',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of SubjectE are ['SubjectD']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > subject_d - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class SubjectE is not abstract, generating own rule with clauses
[util_flogging.py:203 -              wrapper()] . . . . . . Preprocessed template: #####  {{name}[- {one_liner}] '
'
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: - {one_liner}
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['DASH', 'subject_e__one_liner__value']
[util_flogging.py:203 -              wrapper()] . . . . . . Adding NEWLINE to field terminals
[util_flogging.py:203 -              wrapper()] . . . . . . NEWLINE found in template: #####  {{name}[- {one_liner}] '
'
[util_flogging.py:203 -              wrapper()] . . . . . . Final grammar parts: ['HASH', 'HASH', 'HASH', 'HASH', 'HASH', 'LBRACE', 'subject_e__name__value', '[', 'DASH', 'subject_e__one_liner__value', ']', 'NEWLINE']
[util_flogging.py:203 -              wrapper()] . . . . . rule parts are: ['HASH', 'HASH', 'HASH', 'HASH', 'HASH', 'LBRACE', 'subject_e__name__value', '[', 'DASH', 'subject_e__one_liner__value', ']', 'NEWLINE']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(8, 14, 'name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(8, 14, 'name'), (19, 30, 'one_liner')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'name', 'one_liner'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('SubjectE', <class 'Lit_01.Lit_01.SubjectE'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECB30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> subject_e__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECB30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> subject_e__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECB30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> subject_e__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECC50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> subject_e__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECB30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> subject_e__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'classes', Field(name='classes',type='List[Class]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECC50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.classes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > class+	-> subject_e__classes__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> subject_e__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> subject_e__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> subject_e__abbreviation__simple', 'paragraph+\t-> subject_e__elaboration__list', 'annotation+\t-> subject_e__annotations__list', 'class+\t-> subject_e__classes__list'], [Rule(name='subject_e__name__value', text='camel_case'), Rule(name='subject_e__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('SubjectE', <class 'Lit_01.Lit_01.SubjectE'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECB30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> subject_e__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECB30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> subject_e__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECB30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> subject_e__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> subject_e__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> subject_e__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectE', 'classes', Field(name='classes',type='List[Class]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectE.classes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > class+	-> subject_e__classes__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> subject_e__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> subject_e__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> subject_e__abbreviation__simple', 'paragraph+\t-> subject_e__elaboration__list', 'annotation+\t-> subject_e__annotations__list', 'class+\t-> subject_e__classes__list'], [Rule(name='subject_e__name__value', text='camel_case'), Rule(name='subject_e__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('SubjectD', <class 'Lit_01.Lit_01.SubjectD'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('SubjectD',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of SubjectD are ['SubjectC']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > subject_c - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class SubjectD is not abstract, generating own rule with clauses
[util_flogging.py:203 -              wrapper()] . . . . . . Preprocessed template: ####  {{name}[- {one_liner}] '
'
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: - {one_liner}
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['DASH', 'subject_d__one_liner__value']
[util_flogging.py:203 -              wrapper()] . . . . . . Adding NEWLINE to field terminals
[util_flogging.py:203 -              wrapper()] . . . . . . NEWLINE found in template: ####  {{name}[- {one_liner}] '
'
[util_flogging.py:203 -              wrapper()] . . . . . . Final grammar parts: ['HASH', 'HASH', 'HASH', 'HASH', 'LBRACE', 'subject_d__name__value', '[', 'DASH', 'subject_d__one_liner__value', ']', 'NEWLINE']
[util_flogging.py:203 -              wrapper()] . . . . . rule parts are: ['HASH', 'HASH', 'HASH', 'HASH', 'LBRACE', 'subject_d__name__value', '[', 'DASH', 'subject_d__one_liner__value', ']', 'NEWLINE']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(7, 13, 'name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(7, 13, 'name'), (18, 29, 'one_liner')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'name', 'one_liner'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('SubjectD', <class 'Lit_01.Lit_01.SubjectD'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECB30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> subject_d__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECB30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> subject_d__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECB30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> subject_d__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECDD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> subject_d__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECDD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> subject_d__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'classes', Field(name='classes',type='List[Class]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECDD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.classes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > class+	-> subject_d__classes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'subjects', Field(name='subjects',type='List[SubjectE]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECDD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.subjects is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > subject_e+	-> subject_d__subjects__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> subject_d__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> subject_d__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> subject_d__abbreviation__simple', 'paragraph+\t-> subject_d__elaboration__list', 'annotation+\t-> subject_d__annotations__list', 'class+\t-> subject_d__classes__list', 'subject_e+\t-> subject_d__subjects__list'], [Rule(name='subject_d__name__value', text='camel_case'), Rule(name='subject_d__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('SubjectD', <class 'Lit_01.Lit_01.SubjectD'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECDD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> subject_d__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECDD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> subject_d__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECDD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> subject_d__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED010>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> subject_d__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED010>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> subject_d__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'classes', Field(name='classes',type='List[Class]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED010>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.classes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > class+	-> subject_d__classes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectD', 'subjects', Field(name='subjects',type='List[SubjectE]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED010>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectD.subjects is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > subject_e+	-> subject_d__subjects__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> subject_d__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> subject_d__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> subject_d__abbreviation__simple', 'paragraph+\t-> subject_d__elaboration__list', 'annotation+\t-> subject_d__annotations__list', 'class+\t-> subject_d__classes__list', 'subject_e+\t-> subject_d__subjects__list'], [Rule(name='subject_d__name__value', text='camel_case'), Rule(name='subject_d__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('SubjectC', <class 'Lit_01.Lit_01.SubjectC'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('SubjectC',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of SubjectC are ['SubjectB']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > subject_b - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class SubjectC is not abstract, generating own rule with clauses
[util_flogging.py:203 -              wrapper()] . . . . . . Preprocessed template: ###  {{name}[- {one_liner}] '
'
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: - {one_liner}
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['DASH', 'subject_c__one_liner__value']
[util_flogging.py:203 -              wrapper()] . . . . . . Adding NEWLINE to field terminals
[util_flogging.py:203 -              wrapper()] . . . . . . NEWLINE found in template: ###  {{name}[- {one_liner}] '
'
[util_flogging.py:203 -              wrapper()] . . . . . . Final grammar parts: ['HASH', 'HASH', 'HASH', 'LBRACE', 'subject_c__name__value', '[', 'DASH', 'subject_c__one_liner__value', ']', 'NEWLINE']
[util_flogging.py:203 -              wrapper()] . . . . . rule parts are: ['HASH', 'HASH', 'HASH', 'LBRACE', 'subject_c__name__value', '[', 'DASH', 'subject_c__one_liner__value', ']', 'NEWLINE']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(6, 12, 'name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(6, 12, 'name'), (17, 28, 'one_liner')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'name', 'one_liner'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('SubjectC', <class 'Lit_01.Lit_01.SubjectC'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECDD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> subject_c__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECDD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> subject_c__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECDD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> subject_c__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> subject_c__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> subject_c__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'classes', Field(name='classes',type='List[Class]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.classes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > class+	-> subject_c__classes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'subjects', Field(name='subjects',type='List[SubjectD]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.subjects is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > subject_d+	-> subject_c__subjects__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> subject_c__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> subject_c__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> subject_c__abbreviation__simple', 'paragraph+\t-> subject_c__elaboration__list', 'annotation+\t-> subject_c__annotations__list', 'class+\t-> subject_c__classes__list', 'subject_d+\t-> subject_c__subjects__list'], [Rule(name='subject_c__name__value', text='camel_case'), Rule(name='subject_c__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('SubjectC', <class 'Lit_01.Lit_01.SubjectC'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> subject_c__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> subject_c__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> subject_c__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED1F0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> subject_c__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED1F0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> subject_c__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'classes', Field(name='classes',type='List[Class]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED1F0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.classes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > class+	-> subject_c__classes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectC', 'subjects', Field(name='subjects',type='List[SubjectD]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED1F0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectC.subjects is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > subject_d+	-> subject_c__subjects__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> subject_c__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> subject_c__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> subject_c__abbreviation__simple', 'paragraph+\t-> subject_c__elaboration__list', 'annotation+\t-> subject_c__annotations__list', 'class+\t-> subject_c__classes__list', 'subject_d+\t-> subject_c__subjects__list'], [Rule(name='subject_c__name__value', text='camel_case'), Rule(name='subject_c__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('SubjectB', <class 'Lit_01.Lit_01.SubjectB'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('SubjectB',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of SubjectB are ['LDM']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > ldm - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class SubjectB is not abstract, generating own rule with clauses
[util_flogging.py:203 -              wrapper()] . . . . . . Preprocessed template: ##  {{name}[- {one_liner}] '
'
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: - {one_liner}
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['DASH', 'subject_b__one_liner__value']
[util_flogging.py:203 -              wrapper()] . . . . . . Adding NEWLINE to field terminals
[util_flogging.py:203 -              wrapper()] . . . . . . NEWLINE found in template: ##  {{name}[- {one_liner}] '
'
[util_flogging.py:203 -              wrapper()] . . . . . . Final grammar parts: ['HASH', 'HASH', 'LBRACE', 'subject_b__name__value', '[', 'DASH', 'subject_b__one_liner__value', ']', 'NEWLINE']
[util_flogging.py:203 -              wrapper()] . . . . . rule parts are: ['HASH', 'HASH', 'LBRACE', 'subject_b__name__value', '[', 'DASH', 'subject_b__one_liner__value', ']', 'NEWLINE']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(5, 11, 'name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(5, 11, 'name'), (16, 27, 'one_liner')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'name', 'one_liner'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('SubjectB', <class 'Lit_01.Lit_01.SubjectB'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> subject_b__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> subject_b__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ECD70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> subject_b__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED130>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> subject_b__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED130>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> subject_b__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'classes', Field(name='classes',type='List[Class]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED130>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.classes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > class+	-> subject_b__classes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'subjects', Field(name='subjects',type='List[SubjectC]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED130>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.subjects is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > subject_c+	-> subject_b__subjects__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> subject_b__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> subject_b__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> subject_b__abbreviation__simple', 'paragraph+\t-> subject_b__elaboration__list', 'annotation+\t-> subject_b__annotations__list', 'class+\t-> subject_b__classes__list', 'subject_c+\t-> subject_b__subjects__list'], [Rule(name='subject_b__name__value', text='camel_case'), Rule(name='subject_b__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('SubjectB', <class 'Lit_01.Lit_01.SubjectB'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED130>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> subject_b__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED130>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> subject_b__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED130>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> subject_b__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED3D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> subject_b__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED3D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> subject_b__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'classes', Field(name='classes',type='List[Class]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED3D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.classes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > class+	-> subject_b__classes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SubjectB', 'subjects', Field(name='subjects',type='List[SubjectC]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED3D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SubjectB.subjects is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > subject_c+	-> subject_b__subjects__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> subject_b__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> subject_b__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> subject_b__abbreviation__simple', 'paragraph+\t-> subject_b__elaboration__list', 'annotation+\t-> subject_b__annotations__list', 'class+\t-> subject_b__classes__list', 'subject_c+\t-> subject_b__subjects__list'], [Rule(name='subject_b__name__value', text='camel_case'), Rule(name='subject_b__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('LDM', <class 'Lit_01.Lit_01.LDM'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('LDM',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of LDM are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class LDM is not abstract, generating own rule with clauses
[util_flogging.py:203 -              wrapper()] . . . . . . Preprocessed template: #  {{name}[- {one_liner}] '
'
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: - {one_liner}
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['DASH', 'ldm__one_liner__value']
[util_flogging.py:203 -              wrapper()] . . . . . . Adding NEWLINE to field terminals
[util_flogging.py:203 -              wrapper()] . . . . . . NEWLINE found in template: #  {{name}[- {one_liner}] '
'
[util_flogging.py:203 -              wrapper()] . . . . . . Final grammar parts: ['HASH', 'LBRACE', 'ldm__name__value', '[', 'DASH', 'ldm__one_liner__value', ']', 'NEWLINE']
[util_flogging.py:203 -              wrapper()] . . . . . rule parts are: ['HASH', 'LBRACE', 'ldm__name__value', '[', 'DASH', 'ldm__one_liner__value', ']', 'NEWLINE']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(4, 10, 'name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(4, 10, 'name'), (15, 26, 'one_liner')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'name', 'one_liner'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('LDM', <class 'Lit_01.Lit_01.LDM'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED130>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> ldm__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED130>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> ldm__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED130>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> ldm__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED310>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> ldm__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED310>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> ldm__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'classes', Field(name='classes',type='List[Class]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED310>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.classes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > class+	-> ldm__classes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'subjects', Field(name='subjects',type='List[SubjectB]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED310>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.subjects is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > subject_b+	-> ldm__subjects__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> ldm__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> ldm__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> ldm__abbreviation__simple', 'paragraph+\t-> ldm__elaboration__list', 'annotation+\t-> ldm__annotations__list', 'class+\t-> ldm__classes__list', 'subject_b+\t-> ldm__subjects__list'], [Rule(name='ldm__name__value', text='camel_case'), Rule(name='ldm__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('LDM', <class 'Lit_01.Lit_01.LDM'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED310>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> ldm__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED310>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> ldm__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED310>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> ldm__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED550>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> ldm__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED550>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> ldm__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'classes', Field(name='classes',type='List[Class]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED550>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.classes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > class+	-> ldm__classes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('LDM', 'subjects', Field(name='subjects',type='List[SubjectB]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5ED550>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for LDM.subjects is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > subject_b+	-> ldm__subjects__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> ldm__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> ldm__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> ldm__abbreviation__simple', 'paragraph+\t-> ldm__elaboration__list', 'annotation+\t-> ldm__annotations__list', 'class+\t-> ldm__classes__list', 'subject_b+\t-> ldm__subjects__list'], [Rule(name='ldm__name__value', text='camel_case'), Rule(name='ldm__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('DataType', <class 'Lit_01.Lit_01.DataType'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('DataType',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of DataType are ['BaseDataType', 'ListDataType', 'SetDataType', 'MappingDataType']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > base_data_type | list_data_type | set_data_type | mapping_data_type - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class DataType is abstract, skipping rule generation
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('BaseDataType', <class 'Lit_01.Lit_01.BaseDataType'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('BaseDataType',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of BaseDataType are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class BaseDataType is not abstract, generating own rule with clauses
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Full template is {class_name} {? - {is_value}}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_full_class_by_template of ('BaseDataType', PomTemplate({class_name} {? - {is_value}})) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Preprocessed template: {class_name} [- {is_value}]
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . Preprocessed template: - {is_value}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . Final grammar parts: ['DASH', 'base_data_type__is_value__value']
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Final grammar parts: ['base_data_type__class_name__value', '[', 'DASH', 'base_data_type__is_value__value', ']']
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . rule parts are: ['base_data_type__class_name__value', '[', 'DASH', 'base_data_type__is_value__value', ']']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > base_data_type__class_name__value [ DASH base_data_type__is_value__value ] - from _gen_full_class_by_template
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(0, 12, 'class_name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(0, 12, 'class_name'), (18, 28, 'is_value')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'is_value', 'class_name'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('BaseDataType', <class 'Lit_01.Lit_01.BaseDataType'>, {'is_value', 'class_name'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('BaseDataType', 'class_name', Field(name='class_name',type='str',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED5B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for BaseDataType.class_name is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > CLASS_NAME_QF COLON STRING NEWLINE	-> base_data_type__class_name__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('BaseDataType', 'is_value', Field(name='is_value',type='ReferenceOrValue',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'class_pom_token.ReferenceOrValue'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED5B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for BaseDataType.is_value is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_VALUE_QF COLON reference_or_value NEWLINE	-> base_data_type__is_value__simple - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['CLASS_NAME_QF COLON STRING NEWLINE\t-> base_data_type__class_name__str', 'IS_VALUE_QF COLON reference_or_value NEWLINE\t-> base_data_type__is_value__simple'], [Rule(name='base_data_type__class_name__value', text='STRING'), Rule(name='base_data_type__is_value__value', text='reference_or_value')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('ListDataType', <class 'Lit_01.Lit_01.ListDataType'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('ListDataType',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of ListDataType are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class ListDataType is not abstract, generating own rule with clauses
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Full template is list of {element_type}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_full_class_by_template of ('ListDataType', PomTemplate(list of {element_type})) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Preprocessed template: list of {element_type}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Final grammar parts: ['LIST_Q', 'OF_Q', 'list_data_type__element_type__value']
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . rule parts are: ['LIST_Q', 'OF_Q', 'list_data_type__element_type__value']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > LIST_Q OF_Q list_data_type__element_type__value - from _gen_full_class_by_template
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(8, 22, 'element_type')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'element_type'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('ListDataType', <class 'Lit_01.Lit_01.ListDataType'>, {'element_type'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ListDataType', 'element_type', Field(name='element_type',type='DataType',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED790>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ListDataType.element_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ELEMENT_TYPE_QF COLON data_type NEWLINE	-> list_data_type__element_type__simple - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['ELEMENT_TYPE_QF COLON data_type NEWLINE\t-> list_data_type__element_type__simple'], [Rule(name='list_data_type__element_type__value', text='data_type')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('SetDataType', <class 'Lit_01.Lit_01.SetDataType'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('SetDataType',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of SetDataType are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class SetDataType is not abstract, generating own rule with clauses
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Full template is Set of {element_type}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_full_class_by_template of ('SetDataType', PomTemplate(Set of {element_type})) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Preprocessed template: Set of {element_type}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Final grammar parts: ['SET_Q', 'OF_Q', 'set_data_type__element_type__value']
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . rule parts are: ['SET_Q', 'OF_Q', 'set_data_type__element_type__value']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > SET_Q OF_Q set_data_type__element_type__value - from _gen_full_class_by_template
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(7, 21, 'element_type')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'element_type'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('SetDataType', <class 'Lit_01.Lit_01.SetDataType'>, {'element_type'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('SetDataType', 'element_type', Field(name='element_type',type='DataType',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5ED970>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for SetDataType.element_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ELEMENT_TYPE_QF COLON data_type NEWLINE	-> set_data_type__element_type__simple - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['ELEMENT_TYPE_QF COLON data_type NEWLINE\t-> set_data_type__element_type__simple'], [Rule(name='set_data_type__element_type__value', text='data_type')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('MappingDataType', <class 'Lit_01.Lit_01.MappingDataType'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('MappingDataType',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of MappingDataType are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class MappingDataType is not abstract, generating own rule with clauses
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Full template is Mapping from {domain_type} to {range_type}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_full_class_by_template of ('MappingDataType', PomTemplate(Mapping from {domain_type} to {range_type})) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Preprocessed template: Mapping from {domain_type} to {range_type}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Final grammar parts: ['MAPPING_Q', 'FROM_Q', 'mapping_data_type__domain_type__value', 'TO_Q', 'mapping_data_type__range_type__value']
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . rule parts are: ['MAPPING_Q', 'FROM_Q', 'mapping_data_type__domain_type__value', 'TO_Q', 'mapping_data_type__range_type__value']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > MAPPING_Q FROM_Q mapping_data_type__domain_type__value TO_Q mapping_data_type__range_type__value - from _gen_full_class_by_template
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(13, 26, 'domain_type')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(13, 26, 'domain_type'), (30, 42, 'range_type')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'range_type', 'domain_type'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('MappingDataType', <class 'Lit_01.Lit_01.MappingDataType'>, {'range_type', 'domain_type'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('MappingDataType', 'domain_type', Field(name='domain_type',type='DataType',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EDAF0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for MappingDataType.domain_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DOMAIN_TYPE_QF COLON data_type NEWLINE	-> mapping_data_type__domain_type__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('MappingDataType', 'range_type', Field(name='range_type',type='DataType',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EDAF0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for MappingDataType.range_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > RANGE_TYPE_QF COLON data_type NEWLINE	-> mapping_data_type__range_type__simple - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['DOMAIN_TYPE_QF COLON data_type NEWLINE\t-> mapping_data_type__domain_type__simple', 'RANGE_TYPE_QF COLON data_type NEWLINE\t-> mapping_data_type__range_type__simple'], [Rule(name='mapping_data_type__domain_type__value', text='data_type'), Rule(name='mapping_data_type__range_type__value', text='data_type')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('DataTypeClause', <class 'Lit_01.Lit_01.DataTypeClause'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('DataTypeClause',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of DataTypeClause are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class DataTypeClause is not abstract, generating own rule with clauses
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Full template is {is_optional} {data_type}{? {cardinality}}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_full_class_by_template of ('DataTypeClause', PomTemplate({is_optional} {data_type}{? {cardinality}})) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Preprocessed template: {is_optional} {data_type}[{cardinality}]
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . Preprocessed template: {cardinality}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . Final grammar parts: ['data_type_clause__cardinality__value']
[util_flogging.py:203 -              wrapper()] . . . . . . . . . Final grammar parts: ['data_type_clause__is_optional__value', 'data_type_clause__data_type__value', '[', 'data_type_clause__cardinality__value', ']']
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . rule parts are: ['data_type_clause__is_optional__value', 'data_type_clause__data_type__value', '[', 'data_type_clause__cardinality__value', ']']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > data_type_clause__is_optional__value data_type_clause__data_type__value [ data_type_clause__cardinality__value ] - from _gen_full_class_by_template
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(0, 13, 'is_optional')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(0, 13, 'is_optional'), (14, 25, 'data_type')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(0, 13, 'is_optional'), (14, 25, 'data_type'), (28, 41, 'cardinality')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'data_type', 'is_optional', 'cardinality'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('DataTypeClause', <class 'Lit_01.Lit_01.DataTypeClause'>, {'data_type', 'is_optional', 'cardinality'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('DataTypeClause', 'data_type', Field(name='data_type',type='DataType',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EDD30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for DataTypeClause.data_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DATA_TYPE_QF COLON data_type NEWLINE	-> data_type_clause__data_type__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('DataTypeClause', 'is_required', Field(name='is_required',type='IsReallyRequired',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'class_pom_token.IsReallyRequired'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EDD30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for DataTypeClause.is_required is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_REQUIRED_QF COLON is_really_required NEWLINE	-> data_type_clause__is_required__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('DataTypeClause', 'is_also_optional', Field(name='is_also_optional',type='IsOptional',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'class_pom_token.IsOptional'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EDD30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for DataTypeClause.is_also_optional is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_ALSO_OPTIONAL_QF COLON is_optional NEWLINE	-> data_type_clause__is_also_optional__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('DataTypeClause', 'is_optional', Field(name='is_optional',type='bool',default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'bool': {'true': 'optional', 'false': 'required', 'is_explicit': False}}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EDDF0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for DataTypeClause.is_optional is: {'bool': {'true': 'optional', 'false': 'required', 'is_explicit': False}, 'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_OPTIONAL_QF COLON BOOLEAN NEWLINE	-> data_type_clause__is_optional__bool - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('DataTypeClause', 'cardinality', Field(name='cardinality',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EDE50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for DataTypeClause.cardinality is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > CARDINALITY_QF COLON STRING NEWLINE	-> data_type_clause__cardinality__str - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['DATA_TYPE_QF COLON data_type NEWLINE\t-> data_type_clause__data_type__simple', 'IS_REQUIRED_QF COLON is_really_required NEWLINE\t-> data_type_clause__is_required__simple', 'IS_ALSO_OPTIONAL_QF COLON is_optional NEWLINE\t-> data_type_clause__is_also_optional__simple', 'IS_OPTIONAL_QF COLON BOOLEAN NEWLINE\t-> data_type_clause__is_optional__bool', 'CARDINALITY_QF COLON STRING NEWLINE\t-> data_type_clause__cardinality__str'], [Rule(name='data_type_clause__data_type__value', text='data_type'), Rule(name='data_type_clause__is_optional__value', text='BOOLEAN'), Rule(name='data_type_clause__cardinality__value', text='STRING')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('FormulaCoding', <class 'Lit_01.Lit_01.FormulaCoding'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('FormulaCoding',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of FormulaCoding are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class FormulaCoding is not abstract, generating own rule with clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('FormulaCoding', <class 'Lit_01.Lit_01.FormulaCoding'>, set()) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('FormulaCoding', 'content', Field(name='content',type='str',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EDDF0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for FormulaCoding.content is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > CONTENT_QF COLON STRING NEWLINE	-> formula_coding__content__str - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['CONTENT_QF COLON STRING NEWLINE\t-> formula_coding__content__str'], []) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('Formula', <class 'Lit_01.Lit_01.Formula'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('Formula',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of Formula are ['Constraint', 'Derivation', 'Default']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > constraint | derivation | default - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class Formula is not abstract, generating own rule with clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('Formula', <class 'Lit_01.Lit_01.Formula'>, set()) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Formula', 'english', Field(name='english',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EDFD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Formula.english is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ENGLISH_QF COLON STRING NEWLINE	-> formula__english__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Formula', 'code', Field(name='code',type='Optional[FormulaCoding]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EDFD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Formula.code is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > CODE_QF COLON formula_coding NEWLINE	-> formula__code__simple - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['ENGLISH_QF COLON STRING NEWLINE\t-> formula__english__str', 'CODE_QF COLON formula_coding NEWLINE\t-> formula__code__simple'], []) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('Constraint', <class 'Lit_01.Lit_01.Constraint'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('Constraint',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of Constraint are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class Constraint is not abstract, generating own rule with clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('Constraint', <class 'Lit_01.Lit_01.Constraint'>, set()) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Constraint', 'english', Field(name='english',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE150>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Constraint.english is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ENGLISH_QF COLON STRING NEWLINE	-> constraint__english__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Constraint', 'code', Field(name='code',type='Optional[FormulaCoding]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE150>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Constraint.code is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > CODE_QF COLON formula_coding NEWLINE	-> constraint__code__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Constraint', 'message', Field(name='message',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE1B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Constraint.message is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > MESSAGE_QF COLON STRING NEWLINE	-> constraint__message__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Constraint', 'severity', Field(name='severity',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE210>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Constraint.severity is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SEVERITY_QF COLON STRING NEWLINE	-> constraint__severity__str - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['ENGLISH_QF COLON STRING NEWLINE\t-> constraint__english__str', 'CODE_QF COLON formula_coding NEWLINE\t-> constraint__code__simple', 'MESSAGE_QF COLON STRING NEWLINE\t-> constraint__message__str', 'SEVERITY_QF COLON STRING NEWLINE\t-> constraint__severity__str'], []) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('Derivation', <class 'Lit_01.Lit_01.Derivation'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('Derivation',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of Derivation are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class Derivation is not abstract, generating own rule with clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('Derivation', <class 'Lit_01.Lit_01.Derivation'>, set()) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Derivation', 'english', Field(name='english',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE270>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Derivation.english is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ENGLISH_QF COLON STRING NEWLINE	-> derivation__english__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Derivation', 'code', Field(name='code',type='Optional[FormulaCoding]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE270>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Derivation.code is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > CODE_QF COLON formula_coding NEWLINE	-> derivation__code__simple - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['ENGLISH_QF COLON STRING NEWLINE\t-> derivation__english__str', 'CODE_QF COLON formula_coding NEWLINE\t-> derivation__code__simple'], []) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('Default', <class 'Lit_01.Lit_01.Default'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('Default',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of Default are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class Default is not abstract, generating own rule with clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('Default', <class 'Lit_01.Lit_01.Default'>, set()) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Default', 'english', Field(name='english',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE390>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Default.english is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ENGLISH_QF COLON STRING NEWLINE	-> default__english__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Default', 'code', Field(name='code',type='Optional[FormulaCoding]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE390>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Default.code is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > CODE_QF COLON formula_coding NEWLINE	-> default__code__simple - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['ENGLISH_QF COLON STRING NEWLINE\t-> default__english__str', 'CODE_QF COLON formula_coding NEWLINE\t-> default__code__simple'], []) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('Class', <class 'Lit_01.Lit_01.Class'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('Class',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of Class are ['ValueType', 'ReferenceType']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > value_type | reference_type - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class Class is not abstract, generating own rule with clauses
[util_flogging.py:203 -              wrapper()] . . . . . . Preprocessed template: _ Class: {name}[- {one_liner}] "\n"
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: - {one_liner}
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['DASH', 'class__one_liner__value']
[util_flogging.py:203 -              wrapper()] . . . . . . Final grammar parts: ['UNDERSCORE', 'CLASS_Q', 'COLON', 'class__name__value', '[', 'DASH', 'class__one_liner__value', ']', 'N']
[util_flogging.py:203 -              wrapper()] . . . . . rule parts are: ['UNDERSCORE', 'CLASS_Q', 'COLON', 'class__name__value', '[', 'DASH', 'class__one_liner__value', ']', 'N']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(9, 15, 'name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(9, 15, 'name'), (20, 31, 'one_liner')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'name', 'one_liner'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('Class', <class 'Lit_01.Lit_01.Class'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'name', Field(name='name',type='UpperCamel',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE390>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON upper_camel NEWLINE	-> class__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE390>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> class__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE390>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> class__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE570>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> class__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE570>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> class__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'plural', Field(name='plural',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.plural is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > PLURAL_QF COLON upper_camel NEWLINE	-> class__plural__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'subtype_of', Field(name='subtype_of',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.subtype_of is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE	-> class__subtype_of__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'subtypes', Field(name='subtypes',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.subtypes is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE	-> class__subtypes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'based_on', Field(name='based_on',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.based_on is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE	-> class__based_on__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'dependents', Field(name='dependents',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.dependents is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE	-> class__dependents__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'is_value_type', Field(name='is_value_type',type='bool',default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE570>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.is_value_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'bool': {'true': 'true', 'false': 'false', 'is_explicit': True}}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE	-> class__is_value_type__bool - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'where', Field(name='where',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE5D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.where is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > WHERE_QF COLON STRING NEWLINE	-> class__where__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'attributes', Field(name='attributes',type='List[Attribute]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE5D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.attributes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute+	-> class__attributes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'attribute_sections', Field(name='attribute_sections',type='List[AttributeSection]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE5D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.attribute_sections is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute_section+	-> class__attribute_sections__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON upper_camel NEWLINE\t-> class__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> class__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> class__abbreviation__simple', 'paragraph+\t-> class__elaboration__list', 'annotation+\t-> class__annotations__list', 'PLURAL_QF COLON upper_camel NEWLINE\t-> class__plural__simple', 'SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> class__subtype_of__list', 'SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> class__subtypes__list', 'BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> class__based_on__list', 'DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> class__dependents__list', 'IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE\t-> class__is_value_type__bool', 'WHERE_QF COLON STRING NEWLINE\t-> class__where__str', 'attribute+\t-> class__attributes__list', 'attribute_section+\t-> class__attribute_sections__list'], [Rule(name='class__name__value', text='upper_camel'), Rule(name='class__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('Class', <class 'Lit_01.Lit_01.Class'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'name', Field(name='name',type='UpperCamel',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE5D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON upper_camel NEWLINE	-> class__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE5D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> class__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE5D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> class__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE7B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> class__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE7B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> class__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'plural', Field(name='plural',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.plural is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > PLURAL_QF COLON upper_camel NEWLINE	-> class__plural__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'subtype_of', Field(name='subtype_of',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.subtype_of is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE	-> class__subtype_of__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'subtypes', Field(name='subtypes',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.subtypes is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE	-> class__subtypes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'based_on', Field(name='based_on',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.based_on is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE	-> class__based_on__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'dependents', Field(name='dependents',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.dependents is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE	-> class__dependents__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'is_value_type', Field(name='is_value_type',type='bool',default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE7B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.is_value_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'bool': {'true': 'true', 'false': 'false', 'is_explicit': True}}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE	-> class__is_value_type__bool - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'where', Field(name='where',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE810>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.where is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > WHERE_QF COLON STRING NEWLINE	-> class__where__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'attributes', Field(name='attributes',type='List[Attribute]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE810>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.attributes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute+	-> class__attributes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Class', 'attribute_sections', Field(name='attribute_sections',type='List[AttributeSection]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE810>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Class.attribute_sections is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute_section+	-> class__attribute_sections__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON upper_camel NEWLINE\t-> class__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> class__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> class__abbreviation__simple', 'paragraph+\t-> class__elaboration__list', 'annotation+\t-> class__annotations__list', 'PLURAL_QF COLON upper_camel NEWLINE\t-> class__plural__simple', 'SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> class__subtype_of__list', 'SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> class__subtypes__list', 'BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> class__based_on__list', 'DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> class__dependents__list', 'IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE\t-> class__is_value_type__bool', 'WHERE_QF COLON STRING NEWLINE\t-> class__where__str', 'attribute+\t-> class__attributes__list', 'attribute_section+\t-> class__attribute_sections__list'], [Rule(name='class__name__value', text='upper_camel'), Rule(name='class__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('ValueType', <class 'Lit_01.Lit_01.ValueType'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('ValueType',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of ValueType are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class ValueType is not abstract, generating own rule with clauses
[util_flogging.py:203 -              wrapper()] . . . . . . Preprocessed template: _ {name}[- {one_liner}] '
'
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: - {one_liner}
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['DASH', 'value_type__one_liner__value']
[util_flogging.py:203 -              wrapper()] . . . . . . Adding NEWLINE to field terminals
[util_flogging.py:203 -              wrapper()] . . . . . . NEWLINE found in template: _ {name}[- {one_liner}] '
'
[util_flogging.py:203 -              wrapper()] . . . . . . Final grammar parts: ['UNDERSCORE', 'value_type__name__value', '[', 'DASH', 'value_type__one_liner__value', ']', 'NEWLINE']
[util_flogging.py:203 -              wrapper()] . . . . . rule parts are: ['UNDERSCORE', 'value_type__name__value', '[', 'DASH', 'value_type__one_liner__value', ']', 'NEWLINE']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(2, 8, 'name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(2, 8, 'name'), (13, 24, 'one_liner')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'name', 'one_liner'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('ValueType', <class 'Lit_01.Lit_01.ValueType'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'name', Field(name='name',type='UpperCamel',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON upper_camel NEWLINE	-> value_type__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> value_type__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> value_type__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE570>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> value_type__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE570>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> value_type__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'plural', Field(name='plural',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE8D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.plural is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > PLURAL_QF COLON upper_camel NEWLINE	-> value_type__plural__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'subtype_of', Field(name='subtype_of',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE8D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.subtype_of is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE	-> value_type__subtype_of__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'subtypes', Field(name='subtypes',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE8D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.subtypes is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE	-> value_type__subtypes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'based_on', Field(name='based_on',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE8D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.based_on is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE	-> value_type__based_on__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'dependents', Field(name='dependents',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE8D0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.dependents is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE	-> value_type__dependents__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'is_value_type', Field(name='is_value_type',type='bool',default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE570>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.is_value_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'bool': {'true': 'true', 'false': 'false', 'is_explicit': True}}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE	-> value_type__is_value_type__bool - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'where', Field(name='where',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.where is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > WHERE_QF COLON STRING NEWLINE	-> value_type__where__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'attributes', Field(name='attributes',type='List[Attribute]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.attributes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute+	-> value_type__attributes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'attribute_sections', Field(name='attribute_sections',type='List[AttributeSection]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.attribute_sections is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute_section+	-> value_type__attribute_sections__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON upper_camel NEWLINE\t-> value_type__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> value_type__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> value_type__abbreviation__simple', 'paragraph+\t-> value_type__elaboration__list', 'annotation+\t-> value_type__annotations__list', 'PLURAL_QF COLON upper_camel NEWLINE\t-> value_type__plural__simple', 'SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> value_type__subtype_of__list', 'SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> value_type__subtypes__list', 'BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> value_type__based_on__list', 'DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> value_type__dependents__list', 'IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE\t-> value_type__is_value_type__bool', 'WHERE_QF COLON STRING NEWLINE\t-> value_type__where__str', 'attribute+\t-> value_type__attributes__list', 'attribute_section+\t-> value_type__attribute_sections__list'], [Rule(name='value_type__name__value', text='upper_camel'), Rule(name='value_type__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('ValueType', <class 'Lit_01.Lit_01.ValueType'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'name', Field(name='name',type='UpperCamel',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON upper_camel NEWLINE	-> value_type__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> value_type__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> value_type__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEA50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> value_type__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEA50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> value_type__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'plural', Field(name='plural',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEB70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.plural is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > PLURAL_QF COLON upper_camel NEWLINE	-> value_type__plural__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'subtype_of', Field(name='subtype_of',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEB70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.subtype_of is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE	-> value_type__subtype_of__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'subtypes', Field(name='subtypes',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEB70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.subtypes is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE	-> value_type__subtypes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'based_on', Field(name='based_on',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEB70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.based_on is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE	-> value_type__based_on__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'dependents', Field(name='dependents',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEB70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.dependents is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE	-> value_type__dependents__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'is_value_type', Field(name='is_value_type',type='bool',default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEA50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.is_value_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'bool': {'true': 'true', 'false': 'false', 'is_explicit': True}}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE	-> value_type__is_value_type__bool - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'where', Field(name='where',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEAB0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.where is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > WHERE_QF COLON STRING NEWLINE	-> value_type__where__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'attributes', Field(name='attributes',type='List[Attribute]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEAB0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.attributes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute+	-> value_type__attributes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ValueType', 'attribute_sections', Field(name='attribute_sections',type='List[AttributeSection]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEAB0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ValueType.attribute_sections is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute_section+	-> value_type__attribute_sections__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON upper_camel NEWLINE\t-> value_type__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> value_type__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> value_type__abbreviation__simple', 'paragraph+\t-> value_type__elaboration__list', 'annotation+\t-> value_type__annotations__list', 'PLURAL_QF COLON upper_camel NEWLINE\t-> value_type__plural__simple', 'SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> value_type__subtype_of__list', 'SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> value_type__subtypes__list', 'BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> value_type__based_on__list', 'DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> value_type__dependents__list', 'IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE\t-> value_type__is_value_type__bool', 'WHERE_QF COLON STRING NEWLINE\t-> value_type__where__str', 'attribute+\t-> value_type__attributes__list', 'attribute_section+\t-> value_type__attribute_sections__list'], [Rule(name='value_type__name__value', text='upper_camel'), Rule(name='value_type__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('ReferenceType', <class 'Lit_01.Lit_01.ReferenceType'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('ReferenceType',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of ReferenceType are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class ReferenceType is not abstract, generating own rule with clauses
[util_flogging.py:203 -              wrapper()] . . . . . . Preprocessed template: _ {name}[- {one_liner}] '
'
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: - {one_liner}
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['DASH', 'reference_type__one_liner__value']
[util_flogging.py:203 -              wrapper()] . . . . . . Adding NEWLINE to field terminals
[util_flogging.py:203 -              wrapper()] . . . . . . NEWLINE found in template: _ {name}[- {one_liner}] '
'
[util_flogging.py:203 -              wrapper()] . . . . . . Final grammar parts: ['UNDERSCORE', 'reference_type__name__value', '[', 'DASH', 'reference_type__one_liner__value', ']', 'NEWLINE']
[util_flogging.py:203 -              wrapper()] . . . . . rule parts are: ['UNDERSCORE', 'reference_type__name__value', '[', 'DASH', 'reference_type__one_liner__value', ']', 'NEWLINE']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(2, 8, 'name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(2, 8, 'name'), (13, 24, 'one_liner')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'name', 'one_liner'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('ReferenceType', <class 'Lit_01.Lit_01.ReferenceType'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'name', Field(name='name',type='UpperCamel',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON upper_camel NEWLINE	-> reference_type__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> reference_type__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> reference_type__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE510>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> reference_type__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE510>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> reference_type__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'plural', Field(name='plural',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.plural is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > PLURAL_QF COLON upper_camel NEWLINE	-> reference_type__plural__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'subtype_of', Field(name='subtype_of',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.subtype_of is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE	-> reference_type__subtype_of__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'subtypes', Field(name='subtypes',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.subtypes is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE	-> reference_type__subtypes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'based_on', Field(name='based_on',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.based_on is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE	-> reference_type__based_on__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'dependents', Field(name='dependents',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE870>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.dependents is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE	-> reference_type__dependents__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'is_value_type', Field(name='is_value_type',type='bool',default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE510>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.is_value_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'bool': {'true': 'true', 'false': 'false', 'is_explicit': True}}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE	-> reference_type__is_value_type__bool - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'where', Field(name='where',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE4B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.where is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > WHERE_QF COLON STRING NEWLINE	-> reference_type__where__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'attributes', Field(name='attributes',type='List[Attribute]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE4B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.attributes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute+	-> reference_type__attributes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'attribute_sections', Field(name='attribute_sections',type='List[AttributeSection]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE4B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.attribute_sections is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute_section+	-> reference_type__attribute_sections__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON upper_camel NEWLINE\t-> reference_type__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> reference_type__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> reference_type__abbreviation__simple', 'paragraph+\t-> reference_type__elaboration__list', 'annotation+\t-> reference_type__annotations__list', 'PLURAL_QF COLON upper_camel NEWLINE\t-> reference_type__plural__simple', 'SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> reference_type__subtype_of__list', 'SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> reference_type__subtypes__list', 'BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> reference_type__based_on__list', 'DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> reference_type__dependents__list', 'IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE\t-> reference_type__is_value_type__bool', 'WHERE_QF COLON STRING NEWLINE\t-> reference_type__where__str', 'attribute+\t-> reference_type__attributes__list', 'attribute_section+\t-> reference_type__attribute_sections__list'], [Rule(name='reference_type__name__value', text='upper_camel'), Rule(name='reference_type__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('ReferenceType', <class 'Lit_01.Lit_01.ReferenceType'>, {'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'name', Field(name='name',type='UpperCamel',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE4B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON upper_camel NEWLINE	-> reference_type__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE4B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> reference_type__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE4B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> reference_type__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEBD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> reference_type__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEBD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> reference_type__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'plural', Field(name='plural',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EED50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.plural is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > PLURAL_QF COLON upper_camel NEWLINE	-> reference_type__plural__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'subtype_of', Field(name='subtype_of',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EED50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.subtype_of is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE	-> reference_type__subtype_of__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'subtypes', Field(name='subtypes',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EED50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.subtypes is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE	-> reference_type__subtypes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'based_on', Field(name='based_on',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EED50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.based_on is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE	-> reference_type__based_on__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'dependents', Field(name='dependents',type='Optional[List[ClassName]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EED50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.dependents is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'list': '{element} (COMMA {element})+'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE	-> reference_type__dependents__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'is_value_type', Field(name='is_value_type',type='bool',default=False,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEBD0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.is_value_type is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'bool': {'true': 'true', 'false': 'false', 'is_explicit': True}}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE	-> reference_type__is_value_type__bool - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'where', Field(name='where',type='Optional[str]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEAB0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.where is: {'field_value': '{field_name} COLON {field_value} NEWLINE', 'str': 'dull_str'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > WHERE_QF COLON STRING NEWLINE	-> reference_type__where__str - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'attributes', Field(name='attributes',type='List[Attribute]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEAB0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.attributes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute+	-> reference_type__attributes__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('ReferenceType', 'attribute_sections', Field(name='attribute_sections',type='List[AttributeSection]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEAB0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for ReferenceType.attribute_sections is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute_section+	-> reference_type__attribute_sections__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON upper_camel NEWLINE\t-> reference_type__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> reference_type__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> reference_type__abbreviation__simple', 'paragraph+\t-> reference_type__elaboration__list', 'annotation+\t-> reference_type__annotations__list', 'PLURAL_QF COLON upper_camel NEWLINE\t-> reference_type__plural__simple', 'SUBTYPE_OF_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> reference_type__subtype_of__list', 'SUBTYPES_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> reference_type__subtypes__list', 'BASED_ON_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> reference_type__based_on__list', 'DEPENDENTS_QF COLON class_name (COMMA class_name)+ NEWLINE\t-> reference_type__dependents__list', 'IS_VALUE_TYPE_QF COLON BOOLEAN NEWLINE\t-> reference_type__is_value_type__bool', 'WHERE_QF COLON STRING NEWLINE\t-> reference_type__where__str', 'attribute+\t-> reference_type__attributes__list', 'attribute_section+\t-> reference_type__attribute_sections__list'], [Rule(name='reference_type__name__value', text='upper_camel'), Rule(name='reference_type__one_liner__value', text='one_liner')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('AttributeSection', <class 'Lit_01.Lit_01.AttributeSection'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('AttributeSection',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of AttributeSection are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class AttributeSection is not abstract, generating own rule with clauses
[util_flogging.py:203 -              wrapper()] . . . . . . Preprocessed template: -  {name}[- {one_liner}][({is_required})] '
'
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: - {one_liner}
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['DASH', 'attribute_section__one_liner__value']
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: ({is_required})
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['LPAREN', 'attribute_section__is_required__value', 'RPAREN']
[util_flogging.py:203 -              wrapper()] . . . . . . Adding NEWLINE to field terminals
[util_flogging.py:203 -              wrapper()] . . . . . . NEWLINE found in template: -  {name}[- {one_liner}][({is_required})] '
'
[util_flogging.py:203 -              wrapper()] . . . . . . Final grammar parts: ['DASH', 'attribute_section__name__value', '[', 'DASH', 'attribute_section__one_liner__value', ']', '[', 'LPAREN', 'attribute_section__is_required__value', 'RPAREN', ']', 'NEWLINE']
[util_flogging.py:203 -              wrapper()] . . . . . rule parts are: ['DASH', 'attribute_section__name__value', '[', 'DASH', 'attribute_section__one_liner__value', ']', '[', 'LPAREN', 'attribute_section__is_required__value', 'RPAREN', ']', 'NEWLINE']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(3, 9, 'name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(3, 9, 'name'), (14, 25, 'one_liner')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(3, 9, 'name'), (14, 25, 'one_liner'), (30, 43, 'is_required')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'is_required', 'name', 'one_liner'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('AttributeSection', <class 'Lit_01.Lit_01.AttributeSection'>, {'is_required', 'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE4B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> attribute_section__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE4B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> attribute_section__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE4B0>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> attribute_section__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE930>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> attribute_section__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE930>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> attribute_section__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'is_required', Field(name='is_required',type='IsReallyRequired',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'class_pom_token.IsReallyRequired'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.is_required is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_REQUIRED_QF COLON is_really_required NEWLINE	-> attribute_section__is_required__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'attributes', Field(name='attributes',type='List[Attribute]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EE630>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.attributes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute+	-> attribute_section__attributes__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> attribute_section__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> attribute_section__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> attribute_section__abbreviation__simple', 'paragraph+\t-> attribute_section__elaboration__list', 'annotation+\t-> attribute_section__annotations__list', 'IS_REQUIRED_QF COLON is_really_required NEWLINE\t-> attribute_section__is_required__simple', 'attribute+\t-> attribute_section__attributes__list'], [Rule(name='attribute_section__name__value', text='camel_case'), Rule(name='attribute_section__one_liner__value', text='one_liner'), Rule(name='attribute_section__is_required__value', text='is_really_required')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('AttributeSection', <class 'Lit_01.Lit_01.AttributeSection'>, {'is_required', 'name', 'one_liner'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'name', Field(name='name',type='CamelCase',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEE10>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON camel_case NEWLINE	-> attribute_section__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEE10>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> attribute_section__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEE10>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> attribute_section__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEF30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> attribute_section__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEF30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> attribute_section__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'is_required', Field(name='is_required',type='IsReallyRequired',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'class_pom_token.IsReallyRequired'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEF90>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.is_required is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > IS_REQUIRED_QF COLON is_really_required NEWLINE	-> attribute_section__is_required__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('AttributeSection', 'attributes', Field(name='attributes',type='List[Attribute]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEF90>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for AttributeSection.attributes is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > attribute+	-> attribute_section__attributes__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON camel_case NEWLINE\t-> attribute_section__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> attribute_section__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> attribute_section__abbreviation__simple', 'paragraph+\t-> attribute_section__elaboration__list', 'annotation+\t-> attribute_section__annotations__list', 'IS_REQUIRED_QF COLON is_really_required NEWLINE\t-> attribute_section__is_required__simple', 'attribute+\t-> attribute_section__attributes__list'], [Rule(name='attribute_section__name__value', text='camel_case'), Rule(name='attribute_section__one_liner__value', text='one_liner'), Rule(name='attribute_section__is_required__value', text='is_really_required')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
[pom_grammar_generator.py:126 -     generate_grammar()] . . . < _gen_rules_for_class of ('Attribute', <class 'Lit_01.Lit_01.Attribute'>) {}
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _generate_type_hierarchy_clause of ('Attribute',) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . subtypes of Attribute are []
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > None - from _generate_type_hierarchy_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . Class Attribute is not abstract, generating own rule with clauses
[util_flogging.py:203 -              wrapper()] . . . . . . Preprocessed template: -  {name}[- {one_liner}][({data_type_clause})] "\n"
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: - {one_liner}
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['DASH', 'attribute__one_liner__value']
[util_flogging.py:239 -              wrapper()] . . . . . . . Preprocessed template: ({data_type_clause})
[util_flogging.py:239 -              wrapper()] . . . . . . . Final grammar parts: ['LPAREN', 'attribute__data_type_clause__value', 'RPAREN']
[util_flogging.py:203 -              wrapper()] . . . . . . Final grammar parts: ['DASH', 'attribute__name__value', '[', 'DASH', 'attribute__one_liner__value', ']', '[', 'LPAREN', 'attribute__data_type_clause__value', 'RPAREN', ']', 'N']
[util_flogging.py:203 -              wrapper()] . . . . . rule parts are: ['DASH', 'attribute__name__value', '[', 'DASH', 'attribute__one_liner__value', ']', '[', 'LPAREN', 'attribute__data_type_clause__value', 'RPAREN', ']', 'N']
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < find_fields of () {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(3, 9, 'name')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(3, 9, 'name'), (14, 25, 'one_liner')]
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . Field posiitons: [(3, 9, 'name'), (14, 25, 'one_liner'), (30, 48, 'data_type_clause')]
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > {'name', 'one_liner', 'data_type_clause'} - from find_fields
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('Attribute', <class 'Lit_01.Lit_01.Attribute'>, {'name', 'one_liner', 'data_type_clause'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'name', Field(name='name',type='LowerCamel',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EF050>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON lower_camel NEWLINE	-> attribute__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EF050>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> attribute__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EF050>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> attribute__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEA50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> attribute__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEA50>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> attribute__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'data_type_clause', Field(name='data_type_clause',type='Optional[DataTypeClause]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEE70>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.data_type_clause is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DATA_TYPE_CLAUSE_QF COLON data_type_clause NEWLINE	-> attribute__data_type_clause__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'derivation', Field(name='derivation',type='Optional[Derivation]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEC30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.derivation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DERIVATION_QF COLON derivation NEWLINE	-> attribute__derivation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'default', Field(name='default',type='Optional[Default]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEC30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.default is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DEFAULT_QF COLON default NEWLINE	-> attribute__default__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'constraints', Field(name='constraints',type='Optional[List[Constraint]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EEC30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.constraints is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > constraint+	-> attribute__constraints__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON lower_camel NEWLINE\t-> attribute__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> attribute__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> attribute__abbreviation__simple', 'paragraph+\t-> attribute__elaboration__list', 'annotation+\t-> attribute__annotations__list', 'DATA_TYPE_CLAUSE_QF COLON data_type_clause NEWLINE\t-> attribute__data_type_clause__simple', 'DERIVATION_QF COLON derivation NEWLINE\t-> attribute__derivation__simple', 'DEFAULT_QF COLON default NEWLINE\t-> attribute__default__simple', 'constraint+\t-> attribute__constraints__list'], [Rule(name='attribute__name__value', text='lower_camel'), Rule(name='attribute__one_liner__value', text='one_liner'), Rule(name='attribute__data_type_clause__value', text='data_type_clause')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . < _gen_field_clauses of ('Attribute', <class 'Lit_01.Lit_01.Attribute'>, {'name', 'one_liner', 'data_type_clause'}) {}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'name', Field(name='name',type='LowerCamel',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEC30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.name is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > NAME_QF COLON lower_camel NEWLINE	-> attribute__name__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'one_liner', Field(name='one_liner',type='Optional[OneLiner]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEC30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.one_liner is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ONE_LINER_QF COLON one_liner NEWLINE	-> attribute__one_liner__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'abbreviation', Field(name='abbreviation',type='Optional[UpperCamel]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EEC30>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.abbreviation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > ABBREVIATION_QF COLON upper_camel NEWLINE	-> attribute__abbreviation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'elaboration', Field(name='elaboration',type='Optional[List[Paragraph]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EF110>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.elaboration is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > paragraph+	-> attribute__elaboration__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'annotations', Field(name='annotations',type='Optional[List[Annotation]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EF110>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.annotations is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > annotation+	-> attribute__annotations__list - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'data_type_clause', Field(name='data_type_clause',type='Optional[DataTypeClause]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EF230>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.data_type_clause is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DATA_TYPE_CLAUSE_QF COLON data_type_clause NEWLINE	-> attribute__data_type_clause__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'derivation', Field(name='derivation',type='Optional[Derivation]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EF290>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.derivation is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DERIVATION_QF COLON derivation NEWLINE	-> attribute__derivation__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'default', Field(name='default',type='Optional[Default]',default=None,default_factory=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({}),kw_only=False,_field_type=_FIELD), <class_field_type.SimpleType object at 0x0000022E8E5EF290>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.default is: {'field_value': '{field_name} COLON {field_value} NEWLINE'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > DEFAULT_QF COLON default NEWLINE	-> attribute__default__simple - from _generate_field_clause
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . < _generate_field_clause of ('Attribute', 'constraints', Field(name='constraints',type='Optional[List[Constraint]]',default=<dataclasses._MISSING_TYPE object at 0x0000022E8BF55160>,default_factory=<class 'list'>,init=True,repr=True,hash=None,compare=True,metadata=mappingproxy({'list': '{element}+', 'field_value': '{field_value}'}),kw_only=False,_field_type=_FIELD), <class_field_type.ListType object at 0x0000022E8E5EF290>) {}
[util_flogging.py:203 -              wrapper()] . . . . . . . . . . . . . Field meta  for Attribute.constraints is: {'list': '{element}+', 'field_value': '{field_value}'}
[pom_grammar_generator.py:225 - _gen_all_class_rules()] . . . . . . . . . . . . > constraint+	-> attribute__constraints__list - from _generate_field_clause
[pom_grammar_generator.py:126 -     generate_grammar()] . . . . . . . > (['NAME_QF COLON lower_camel NEWLINE\t-> attribute__name__simple', 'ONE_LINER_QF COLON one_liner NEWLINE\t-> attribute__one_liner__simple', 'ABBREVIATION_QF COLON upper_camel NEWLINE\t-> attribute__abbreviation__simple', 'paragraph+\t-> attribute__elaboration__list', 'annotation+\t-> attribute__annotations__list', 'DATA_TYPE_CLAUSE_QF COLON data_type_clause NEWLINE\t-> attribute__data_type_clause__simple', 'DERIVATION_QF COLON derivation NEWLINE\t-> attribute__derivation__simple', 'DEFAULT_QF COLON default NEWLINE\t-> attribute__default__simple', 'constraint+\t-> attribute__constraints__list'], [Rule(name='attribute__name__value', text='lower_camel'), Rule(name='attribute__one_liner__value', text='one_liner'), Rule(name='attribute__data_type_clause__value', text='data_type_clause')]) - from _gen_field_clauses
[pom_grammar_generator.py:126 -     generate_grammar()] . . . > None - from _gen_rules_for_class
Field terminals:  {'FROM_Q', 'CLASS_Q', 'RPAREN', 'N', 'LPAREN', 'TO_Q', 'LBRACE', 'LIST_Q', 'HASH', 'OF_Q', 'SET_Q', 'UNDERSCORE', 'COLON', 'MAPPING_Q', 'NEWLINE', 'DASH'}
Self terminals:  set()
[pom_grammar.py:189 -           save_rules()] Saved grammar rules to C:\Users\fmkat\OneDrive\AllFMKFIles\AllVSCode\FMKProjects\Presentable\models\Lit_01\Lit_01_dull_grammar.lark
[pom_grammar.py:210 -       save_templates()] Saved templates to C:\Users\fmkat\OneDrive\AllFMKFIles\AllVSCode\FMKProjects\Presentable\models\Lit_01\Lit_01_dull_templates.hbs
[pom_grammar.py:70 -             __init__()] PresentableGrammar initialization complete
[do_pom_test.py:13 -             test_pom()] Grammar created
<pom_grammar.PresentableGrammar object at 0x0000022E8E51D940>
[do_pom_test.py:17 -             test_pom()] Trying file models/Lit_01/SamplerClass.md
Text is:  _ SampleClassB
abbreviation: CSample

[pom_parser.py:84 -             __init__()] PomParser initialized
[pom_grammar.py:249 -                parse()] Parsing input text (length: 37)
[pom_parser.py:113 -          _get_parser()] Creating new Lark parser with settings: {'start': 'start', 'parser': 'earley', 'debug': False, 'ambiguity': 'resolve'}
[pom_parser.py:147 -                parse()] Parsing input text
[pom_parser.py:149 -                parse()] Input parsed successfully
[pom_parser.py:155 -                parse()] Visiting parse tree to build model object
[pom_parser.py:157 -                parse()] Created model object: list
parse tree =  Tree(Token('RULE', 'start'), [Tree(Token('RULE', 'component'), [Tree(Token('RULE', 'class'), [Tree(Token('RULE', 'value_type'), [Token('UNDERSCORE', '_'), Tree(Token('RULE', 'value_type__name__value'), [Tree(Token('RULE', 'upper_camel'), [Token('__ANON_0', 'SampleClassB')])]), None, None, Token('NEWLINE', '\n'), Tree('value_type__abbreviation__simple', [Token('ABBREVIATION_QF', 'abbreviation'), Token('COLON', ':'), Tree(Token('RULE', 'upper_camel'), [Token('__ANON_0', 'CSample')]), Token('NEWLINE', '\n')])])])])])
parse tree =  start
  component
    class
      value_type
        _
        value_type__name__value
          upper_camel	SampleClassB
        None
        None
        

        value_type__abbreviation__simple
          abbreviation
          :
          upper_camel	CSample
          


Text is:  _ SampleClassB
abbreviation: CSample

[do_pom_test.py:19 -             test_pom()] Done testing POM
